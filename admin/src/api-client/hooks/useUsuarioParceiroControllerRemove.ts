/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/lib/fetch-client'
import type {
  UsuarioParceiroControllerRemoveMutationResponse,
  UsuarioParceiroControllerRemovePathParams,
  UsuarioParceiroControllerRemove404,
} from '../types/UsuarioParceiroControllerRemove.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/lib/fetch-client'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const usuarioParceiroControllerRemoveMutationKey = () => [{ url: '/usuario-parceiro/{id}' }] as const

export type UsuarioParceiroControllerRemoveMutationKey = ReturnType<typeof usuarioParceiroControllerRemoveMutationKey>

/**
 * @summary Remover relação usuário-parceiro por ID
 * {@link /usuario-parceiro/:id}
 */
export async function usuarioParceiroControllerRemove(
  id: UsuarioParceiroControllerRemovePathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<UsuarioParceiroControllerRemoveMutationResponse, ResponseErrorConfig<UsuarioParceiroControllerRemove404>, unknown>({
    method: 'DELETE',
    url: `/usuario-parceiro/${id}`,
    ...requestConfig,
  })
  return res.data
}

/**
 * @summary Remover relação usuário-parceiro por ID
 * {@link /usuario-parceiro/:id}
 */
export function useUsuarioParceiroControllerRemove<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UsuarioParceiroControllerRemoveMutationResponse,
      ResponseErrorConfig<UsuarioParceiroControllerRemove404>,
      { id: UsuarioParceiroControllerRemovePathParams['id'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? usuarioParceiroControllerRemoveMutationKey()

  return useMutation<
    UsuarioParceiroControllerRemoveMutationResponse,
    ResponseErrorConfig<UsuarioParceiroControllerRemove404>,
    { id: UsuarioParceiroControllerRemovePathParams['id'] },
    TContext
  >(
    {
      mutationFn: async ({ id }) => {
        return usuarioParceiroControllerRemove(id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}
