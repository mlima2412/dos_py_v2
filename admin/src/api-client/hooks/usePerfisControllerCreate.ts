/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { PerfisControllerCreateMutationRequest, PerfisControllerCreateMutationResponse, PerfisControllerCreate400, PerfisControllerCreate409 } from "../types/PerfisControllerCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const perfisControllerCreateMutationKey = () =>   [{"url":"/perfis"}] as const

export type PerfisControllerCreateMutationKey = ReturnType<typeof perfisControllerCreateMutationKey>

/**
 * @summary Criar um novo perfil
 * {@link /perfis}
 */
export async function perfisControllerCreate(data?: PerfisControllerCreateMutationRequest, config: Partial<RequestConfig<PerfisControllerCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config

const requestData = data
const res = await request<PerfisControllerCreateMutationResponse, ResponseErrorConfig<PerfisControllerCreate400 | PerfisControllerCreate409>, PerfisControllerCreateMutationRequest>({ method : "POST", url : `/perfis`, data : requestData, ... requestConfig })
return res.data
}

/**
 * @summary Criar um novo perfil
 * {@link /perfis}
 */
export function usePerfisControllerCreate<TContext>(options: 
  {
    mutation?: UseMutationOptions<PerfisControllerCreateMutationResponse, ResponseErrorConfig<PerfisControllerCreate400 | PerfisControllerCreate409>, {data?: PerfisControllerCreateMutationRequest}, TContext> & { client?: QueryClient },
    client?: Partial<RequestConfig<PerfisControllerCreateMutationRequest>> & { client?: typeof fetch },
  }
   = {}) {
  
          const { mutation = {}, client: config = {} } = options ?? {}
          const { client: queryClient, ...mutationOptions } = mutation;
          const mutationKey = mutationOptions.mutationKey ?? perfisControllerCreateMutationKey()
  
          return useMutation<PerfisControllerCreateMutationResponse, ResponseErrorConfig<PerfisControllerCreate400 | PerfisControllerCreate409>, {data?: PerfisControllerCreateMutationRequest}, TContext>({
            mutationFn: async({ data }) => {
              return perfisControllerCreate(data, config)
            },
            mutationKey,
            ...mutationOptions
          }, queryClient)
      
}