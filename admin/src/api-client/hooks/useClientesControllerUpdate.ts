/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { ClientesControllerUpdateMutationRequest, ClientesControllerUpdateMutationResponse, ClientesControllerUpdatePathParams, ClientesControllerUpdate400, ClientesControllerUpdate404, ClientesControllerUpdate409 } from "../types/ClientesControllerUpdate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, UseMutationResult, QueryClient } from "@tanstack/react-query";
import { mutationOptions, useMutation } from "@tanstack/react-query";

export const clientesControllerUpdateMutationKey = () => [{ url: '/clientes/:publicId' }] as const

export type ClientesControllerUpdateMutationKey = ReturnType<typeof clientesControllerUpdateMutationKey>

/**
 * @summary Atualizar cliente
 * {@link /clientes/:publicId}
 */
export async function clientesControllerUpdate(publicId: ClientesControllerUpdatePathParams["publicId"], data?: ClientesControllerUpdateMutationRequest, config: Partial<RequestConfig<ClientesControllerUpdateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<ClientesControllerUpdateMutationResponse, ResponseErrorConfig<ClientesControllerUpdate400 | ClientesControllerUpdate404 | ClientesControllerUpdate409>, ClientesControllerUpdateMutationRequest>({ method : "PATCH", url : `/clientes/${publicId}`, data : requestData, ... requestConfig })  
  return res.data
}

export function clientesControllerUpdateMutationOptions(config: Partial<RequestConfig<ClientesControllerUpdateMutationRequest>> & { client?: typeof fetch } = {}) {
  const mutationKey = clientesControllerUpdateMutationKey()
  return mutationOptions<ClientesControllerUpdateMutationResponse, ResponseErrorConfig<ClientesControllerUpdate400 | ClientesControllerUpdate404 | ClientesControllerUpdate409>, {publicId: ClientesControllerUpdatePathParams["publicId"], data?: ClientesControllerUpdateMutationRequest}, typeof mutationKey>({
    mutationKey,
    mutationFn: async({ publicId, data }) => {
      return clientesControllerUpdate(publicId, data, config)
    },
  })
}

/**
 * @summary Atualizar cliente
 * {@link /clientes/:publicId}
 */
export function useClientesControllerUpdate<TContext>(options: 
{
  mutation?: UseMutationOptions<ClientesControllerUpdateMutationResponse, ResponseErrorConfig<ClientesControllerUpdate400 | ClientesControllerUpdate404 | ClientesControllerUpdate409>, {publicId: ClientesControllerUpdatePathParams["publicId"], data?: ClientesControllerUpdateMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<ClientesControllerUpdateMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? clientesControllerUpdateMutationKey()

  const baseOptions = clientesControllerUpdateMutationOptions(config) as UseMutationOptions<ClientesControllerUpdateMutationResponse, ResponseErrorConfig<ClientesControllerUpdate400 | ClientesControllerUpdate404 | ClientesControllerUpdate409>, {publicId: ClientesControllerUpdatePathParams["publicId"], data?: ClientesControllerUpdateMutationRequest}, TContext>

  return useMutation<ClientesControllerUpdateMutationResponse, ResponseErrorConfig<ClientesControllerUpdate400 | ClientesControllerUpdate404 | ClientesControllerUpdate409>, {publicId: ClientesControllerUpdatePathParams["publicId"], data?: ClientesControllerUpdateMutationRequest}, TContext>({
    ...baseOptions,
    mutationKey,
    ...mutationOptions,
  }, queryClient) as UseMutationResult<ClientesControllerUpdateMutationResponse, ResponseErrorConfig<ClientesControllerUpdate400 | ClientesControllerUpdate404 | ClientesControllerUpdate409>, {publicId: ClientesControllerUpdatePathParams["publicId"], data?: ClientesControllerUpdateMutationRequest}, TContext>
}