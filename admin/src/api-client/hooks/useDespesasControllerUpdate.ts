/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/lib/fetch-client'
import type {
  DespesasControllerUpdateMutationRequest,
  DespesasControllerUpdateMutationResponse,
  DespesasControllerUpdatePathParams,
  DespesasControllerUpdateHeaderParams,
  DespesasControllerUpdate400,
  DespesasControllerUpdate404,
} from '../types/DespesasControllerUpdate.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/lib/fetch-client'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const despesasControllerUpdateMutationKey = () => [{ url: '/despesas/{publicId}' }] as const

export type DespesasControllerUpdateMutationKey = ReturnType<typeof despesasControllerUpdateMutationKey>

/**
 * @summary Atualizar despesa
 * {@link /despesas/:publicId}
 */
export async function despesasControllerUpdate(
  publicId: DespesasControllerUpdatePathParams['publicId'],
  headers: DespesasControllerUpdateHeaderParams,
  data?: DespesasControllerUpdateMutationRequest,
  config: Partial<RequestConfig<DespesasControllerUpdateMutationRequest>> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<
    DespesasControllerUpdateMutationResponse,
    ResponseErrorConfig<DespesasControllerUpdate400 | DespesasControllerUpdate404>,
    DespesasControllerUpdateMutationRequest
  >({ method: 'PATCH', url: `/despesas/${publicId}`, data: requestData, ...requestConfig, headers: { ...headers, ...requestConfig.headers } })
  return res.data
}

/**
 * @summary Atualizar despesa
 * {@link /despesas/:publicId}
 */
export function useDespesasControllerUpdate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      DespesasControllerUpdateMutationResponse,
      ResponseErrorConfig<DespesasControllerUpdate400 | DespesasControllerUpdate404>,
      {
        publicId: DespesasControllerUpdatePathParams['publicId']
        headers: DespesasControllerUpdateHeaderParams
        data?: DespesasControllerUpdateMutationRequest
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<DespesasControllerUpdateMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? despesasControllerUpdateMutationKey()

  return useMutation<
    DespesasControllerUpdateMutationResponse,
    ResponseErrorConfig<DespesasControllerUpdate400 | DespesasControllerUpdate404>,
    { publicId: DespesasControllerUpdatePathParams['publicId']; headers: DespesasControllerUpdateHeaderParams; data?: DespesasControllerUpdateMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ publicId, headers, data }) => {
        return despesasControllerUpdate(publicId, headers, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}