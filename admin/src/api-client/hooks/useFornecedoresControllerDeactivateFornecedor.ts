/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/lib/fetch-client'
import type {
  FornecedoresControllerDeactivateFornecedorMutationResponse,
  FornecedoresControllerDeactivateFornecedorPathParams,
  FornecedoresControllerDeactivateFornecedor404,
} from '../types/FornecedoresControllerDeactivateFornecedor.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/lib/fetch-client'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const fornecedoresControllerDeactivateFornecedorMutationKey = () => [{ url: '/fornecedores/{publicId}/desativar' }] as const

export type FornecedoresControllerDeactivateFornecedorMutationKey = ReturnType<typeof fornecedoresControllerDeactivateFornecedorMutationKey>

/**
 * @summary Desativar fornecedor
 * {@link /fornecedores/:publicId/desativar}
 */
export async function fornecedoresControllerDeactivateFornecedor(
  publicId: FornecedoresControllerDeactivateFornecedorPathParams['publicId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<
    FornecedoresControllerDeactivateFornecedorMutationResponse,
    ResponseErrorConfig<FornecedoresControllerDeactivateFornecedor404>,
    unknown
  >({ method: 'PATCH', url: `/fornecedores/${publicId}/desativar`, ...requestConfig })
  return res.data
}

/**
 * @summary Desativar fornecedor
 * {@link /fornecedores/:publicId/desativar}
 */
export function useFornecedoresControllerDeactivateFornecedor<TContext>(
  options: {
    mutation?: UseMutationOptions<
      FornecedoresControllerDeactivateFornecedorMutationResponse,
      ResponseErrorConfig<FornecedoresControllerDeactivateFornecedor404>,
      { publicId: FornecedoresControllerDeactivateFornecedorPathParams['publicId'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? fornecedoresControllerDeactivateFornecedorMutationKey()

  return useMutation<
    FornecedoresControllerDeactivateFornecedorMutationResponse,
    ResponseErrorConfig<FornecedoresControllerDeactivateFornecedor404>,
    { publicId: FornecedoresControllerDeactivateFornecedorPathParams['publicId'] },
    TContext
  >(
    {
      mutationFn: async ({ publicId }) => {
        return fornecedoresControllerDeactivateFornecedor(publicId, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}