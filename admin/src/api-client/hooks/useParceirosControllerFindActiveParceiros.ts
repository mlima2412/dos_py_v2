/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/lib/fetch-client'
import type { ParceirosControllerFindActiveParceirosQueryResponse } from '../types/ParceirosControllerFindActiveParceiros.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/lib/fetch-client'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const parceirosControllerFindActiveParceirosQueryKey = () => [{ url: '/parceiros/ativos' }] as const

export type ParceirosControllerFindActiveParceirosQueryKey = ReturnType<typeof parceirosControllerFindActiveParceirosQueryKey>

/**
 * @summary Listar parceiros ativos
 * {@link /parceiros/ativos}
 */
export async function parceirosControllerFindActiveParceiros(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<ParceirosControllerFindActiveParceirosQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/parceiros/ativos`,
    ...requestConfig,
  })
  return res.data
}

export function parceirosControllerFindActiveParceirosQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = parceirosControllerFindActiveParceirosQueryKey()
  return queryOptions<
    ParceirosControllerFindActiveParceirosQueryResponse,
    ResponseErrorConfig<Error>,
    ParceirosControllerFindActiveParceirosQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return parceirosControllerFindActiveParceiros(config)
    },
  })
}

/**
 * @summary Listar parceiros ativos
 * {@link /parceiros/ativos}
 */
export function useParceirosControllerFindActiveParceiros<
  TData = ParceirosControllerFindActiveParceirosQueryResponse,
  TQueryData = ParceirosControllerFindActiveParceirosQueryResponse,
  TQueryKey extends QueryKey = ParceirosControllerFindActiveParceirosQueryKey,
>(
  options: {
    query?: Partial<QueryObserverOptions<ParceirosControllerFindActiveParceirosQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? parceirosControllerFindActiveParceirosQueryKey()

  const query = useQuery(
    {
      ...parceirosControllerFindActiveParceirosQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}