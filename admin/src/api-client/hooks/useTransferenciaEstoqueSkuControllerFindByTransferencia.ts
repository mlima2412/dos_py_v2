/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { TransferenciaEstoqueSkuControllerFindByTransferenciaQueryResponse, TransferenciaEstoqueSkuControllerFindByTransferenciaPathParams, TransferenciaEstoqueSkuControllerFindByTransferencia404 } from "../types/TransferenciaEstoqueSkuControllerFindByTransferencia.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const transferenciaEstoqueSkuControllerFindByTransferenciaQueryKey = (transferenciaId: TransferenciaEstoqueSkuControllerFindByTransferenciaPathParams["transferenciaId"]) =>   [{ url: '/transferencia-estoque-sku/transferencia/:transferenciaId', params: {transferenciaId:transferenciaId} }] as const

export type TransferenciaEstoqueSkuControllerFindByTransferenciaQueryKey = ReturnType<typeof transferenciaEstoqueSkuControllerFindByTransferenciaQueryKey>

/**
 * @description Retorna todos os itens de uma transferência específica
 * @summary Listar itens por transferência
 * {@link /transferencia-estoque-sku/transferencia/:transferenciaId}
 */
export async function transferenciaEstoqueSkuControllerFindByTransferencia(transferenciaId: TransferenciaEstoqueSkuControllerFindByTransferenciaPathParams["transferenciaId"], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config


const res = await request<TransferenciaEstoqueSkuControllerFindByTransferenciaQueryResponse, ResponseErrorConfig<TransferenciaEstoqueSkuControllerFindByTransferencia404>, unknown>({ method : "GET", url : `/transferencia-estoque-sku/transferencia/${transferenciaId}`, ... requestConfig })
return res.data
}

export function transferenciaEstoqueSkuControllerFindByTransferenciaQueryOptions(transferenciaId: TransferenciaEstoqueSkuControllerFindByTransferenciaPathParams["transferenciaId"], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  
        const queryKey = transferenciaEstoqueSkuControllerFindByTransferenciaQueryKey(transferenciaId)
        return queryOptions<TransferenciaEstoqueSkuControllerFindByTransferenciaQueryResponse, ResponseErrorConfig<TransferenciaEstoqueSkuControllerFindByTransferencia404>, TransferenciaEstoqueSkuControllerFindByTransferenciaQueryResponse, typeof queryKey>({
         enabled: !!(transferenciaId),
         queryKey,
         queryFn: async ({ signal }) => {
            config.signal = signal
            return transferenciaEstoqueSkuControllerFindByTransferencia(transferenciaId, config)
         },
        })
  
}

/**
 * @description Retorna todos os itens de uma transferência específica
 * @summary Listar itens por transferência
 * {@link /transferencia-estoque-sku/transferencia/:transferenciaId}
 */
export function useTransferenciaEstoqueSkuControllerFindByTransferencia<TData = TransferenciaEstoqueSkuControllerFindByTransferenciaQueryResponse, TQueryData = TransferenciaEstoqueSkuControllerFindByTransferenciaQueryResponse, TQueryKey extends QueryKey = TransferenciaEstoqueSkuControllerFindByTransferenciaQueryKey>(transferenciaId: TransferenciaEstoqueSkuControllerFindByTransferenciaPathParams["transferenciaId"], options: 
  {
    query?: Partial<QueryObserverOptions<TransferenciaEstoqueSkuControllerFindByTransferenciaQueryResponse, ResponseErrorConfig<TransferenciaEstoqueSkuControllerFindByTransferencia404>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  }
   = {}) {
  
         const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
         const queryKey = queryOptions?.queryKey ?? transferenciaEstoqueSkuControllerFindByTransferenciaQueryKey(transferenciaId)
  
         const query = useQuery({
          ...transferenciaEstoqueSkuControllerFindByTransferenciaQueryOptions(transferenciaId, config),
          queryKey,
          ...queryOptions
         } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<TransferenciaEstoqueSkuControllerFindByTransferencia404>> & { queryKey: TQueryKey }
  
         query.queryKey = queryKey as TQueryKey
  
         return query
         
}