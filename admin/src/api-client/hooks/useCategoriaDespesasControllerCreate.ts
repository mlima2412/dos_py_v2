/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/lib/fetch-client'
import type {
  CategoriaDespesasControllerCreateMutationRequest,
  CategoriaDespesasControllerCreateMutationResponse,
  CategoriaDespesasControllerCreate401,
  CategoriaDespesasControllerCreate409,
} from '../types/CategoriaDespesasControllerCreate.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/lib/fetch-client'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const categoriaDespesasControllerCreateMutationKey = () => [{ url: '/categoria-despesas' }] as const

export type CategoriaDespesasControllerCreateMutationKey = ReturnType<typeof categoriaDespesasControllerCreateMutationKey>

/**
 * @summary Criar nova categoria de despesas
 * {@link /categoria-despesas}
 */
export async function categoriaDespesasControllerCreate(
  data: CategoriaDespesasControllerCreateMutationRequest,
  config: Partial<RequestConfig<CategoriaDespesasControllerCreateMutationRequest>> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<
    CategoriaDespesasControllerCreateMutationResponse,
    ResponseErrorConfig<CategoriaDespesasControllerCreate401 | CategoriaDespesasControllerCreate409>,
    CategoriaDespesasControllerCreateMutationRequest
  >({ method: 'POST', url: `/categoria-despesas`, data: requestData, ...requestConfig })
  return res.data
}

/**
 * @summary Criar nova categoria de despesas
 * {@link /categoria-despesas}
 */
export function useCategoriaDespesasControllerCreate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CategoriaDespesasControllerCreateMutationResponse,
      ResponseErrorConfig<CategoriaDespesasControllerCreate401 | CategoriaDespesasControllerCreate409>,
      { data: CategoriaDespesasControllerCreateMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CategoriaDespesasControllerCreateMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? categoriaDespesasControllerCreateMutationKey()

  return useMutation<
    CategoriaDespesasControllerCreateMutationResponse,
    ResponseErrorConfig<CategoriaDespesasControllerCreate401 | CategoriaDespesasControllerCreate409>,
    { data: CategoriaDespesasControllerCreateMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return categoriaDespesasControllerCreate(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}