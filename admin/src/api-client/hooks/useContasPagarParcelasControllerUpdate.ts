/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/lib/fetch-client'
import type {
  ContasPagarParcelasControllerUpdateMutationRequest,
  ContasPagarParcelasControllerUpdateMutationResponse,
  ContasPagarParcelasControllerUpdatePathParams,
  ContasPagarParcelasControllerUpdate404,
} from '../types/ContasPagarParcelasControllerUpdate.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/lib/fetch-client'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const contasPagarParcelasControllerUpdateMutationKey = () => [{ url: '/contas-pagar-parcelas/{publicId}' }] as const

export type ContasPagarParcelasControllerUpdateMutationKey = ReturnType<typeof contasPagarParcelasControllerUpdateMutationKey>

/**
 * @summary Atualizar parcela
 * {@link /contas-pagar-parcelas/:publicId}
 */
export async function contasPagarParcelasControllerUpdate(
  publicId: ContasPagarParcelasControllerUpdatePathParams['publicId'],
  data?: ContasPagarParcelasControllerUpdateMutationRequest,
  config: Partial<RequestConfig<ContasPagarParcelasControllerUpdateMutationRequest>> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<
    ContasPagarParcelasControllerUpdateMutationResponse,
    ResponseErrorConfig<ContasPagarParcelasControllerUpdate404>,
    ContasPagarParcelasControllerUpdateMutationRequest
  >({ method: 'PATCH', url: `/contas-pagar-parcelas/${publicId}`, data: requestData, ...requestConfig })
  return res.data
}

/**
 * @summary Atualizar parcela
 * {@link /contas-pagar-parcelas/:publicId}
 */
export function useContasPagarParcelasControllerUpdate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ContasPagarParcelasControllerUpdateMutationResponse,
      ResponseErrorConfig<ContasPagarParcelasControllerUpdate404>,
      { publicId: ContasPagarParcelasControllerUpdatePathParams['publicId']; data?: ContasPagarParcelasControllerUpdateMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<ContasPagarParcelasControllerUpdateMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? contasPagarParcelasControllerUpdateMutationKey()

  return useMutation<
    ContasPagarParcelasControllerUpdateMutationResponse,
    ResponseErrorConfig<ContasPagarParcelasControllerUpdate404>,
    { publicId: ContasPagarParcelasControllerUpdatePathParams['publicId']; data?: ContasPagarParcelasControllerUpdateMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ publicId, data }) => {
        return contasPagarParcelasControllerUpdate(publicId, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}
