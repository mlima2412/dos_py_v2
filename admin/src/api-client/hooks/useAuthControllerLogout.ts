/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { AuthControllerLogoutMutationResponse } from "../types/AuthControllerLogout.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, UseMutationResult, QueryClient } from "@tanstack/react-query";
import { mutationOptions, useMutation } from "@tanstack/react-query";

export const authControllerLogoutMutationKey = () => [{ url: '/auth/logout' }] as const

export type AuthControllerLogoutMutationKey = ReturnType<typeof authControllerLogoutMutationKey>

/**
 * @summary Realizar logout
 * {@link /auth/logout}
 */
export async function authControllerLogout(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<AuthControllerLogoutMutationResponse, ResponseErrorConfig<Error>, unknown>({ method : "POST", url : `/auth/logout`, ... requestConfig })  
  return res.data
}

export function authControllerLogoutMutationOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const mutationKey = authControllerLogoutMutationKey()
  return mutationOptions<AuthControllerLogoutMutationResponse, ResponseErrorConfig<Error>, void, typeof mutationKey>({
    mutationKey,
    mutationFn: async() => {
      return authControllerLogout(config)
    },
  })
}

/**
 * @summary Realizar logout
 * {@link /auth/logout}
 */
export function useAuthControllerLogout<TContext>(options: 
{
  mutation?: UseMutationOptions<AuthControllerLogoutMutationResponse, ResponseErrorConfig<Error>, void, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? authControllerLogoutMutationKey()

  const baseOptions = authControllerLogoutMutationOptions(config) as UseMutationOptions<AuthControllerLogoutMutationResponse, ResponseErrorConfig<Error>, void, TContext>

  return useMutation<AuthControllerLogoutMutationResponse, ResponseErrorConfig<Error>, void, TContext>({
    ...baseOptions,
    mutationKey,
    ...mutationOptions,
  }, queryClient) as UseMutationResult<AuthControllerLogoutMutationResponse, ResponseErrorConfig<Error>, void, TContext>
}