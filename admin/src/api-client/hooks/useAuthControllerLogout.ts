/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/lib/fetch-client'
import type { AuthControllerLogoutMutationResponse } from '../types/AuthControllerLogout.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/lib/fetch-client'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const authControllerLogoutMutationKey = () => [{ url: '/auth/logout' }] as const

export type AuthControllerLogoutMutationKey = ReturnType<typeof authControllerLogoutMutationKey>

/**
 * @summary Realizar logout
 * {@link /auth/logout}
 */
export async function authControllerLogout(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<AuthControllerLogoutMutationResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'POST',
    url: `/auth/logout`,
    ...requestConfig,
  })
  return res.data
}

/**
 * @summary Realizar logout
 * {@link /auth/logout}
 */
export function useAuthControllerLogout<TContext>(
  options: {
    mutation?: UseMutationOptions<AuthControllerLogoutMutationResponse, ResponseErrorConfig<Error>, void, TContext> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? authControllerLogoutMutationKey()

  return useMutation<AuthControllerLogoutMutationResponse, ResponseErrorConfig<Error>, void, TContext>(
    {
      mutationFn: async () => {
        return authControllerLogout(config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}