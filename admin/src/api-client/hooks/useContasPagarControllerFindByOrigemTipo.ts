/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/lib/fetch-client'
import type {
  ContasPagarControllerFindByOrigemTipoQueryResponse,
  ContasPagarControllerFindByOrigemTipoPathParams,
} from '../types/ContasPagarControllerFindByOrigemTipo.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/lib/fetch-client'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const contasPagarControllerFindByOrigemTipoQueryKey = (origemTipo: ContasPagarControllerFindByOrigemTipoPathParams['origemTipo']) =>
  [{ url: '/contas-pagar/origem-tipo/:origemTipo', params: { origemTipo: origemTipo } }] as const

export type ContasPagarControllerFindByOrigemTipoQueryKey = ReturnType<typeof contasPagarControllerFindByOrigemTipoQueryKey>

/**
 * @summary Buscar contas a pagar por tipo de origem
 * {@link /contas-pagar/origem-tipo/:origemTipo}
 */
export async function contasPagarControllerFindByOrigemTipo(
  origemTipo: ContasPagarControllerFindByOrigemTipoPathParams['origemTipo'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<ContasPagarControllerFindByOrigemTipoQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/contas-pagar/origem-tipo/${origemTipo}`,
    ...requestConfig,
  })
  return res.data
}

export function contasPagarControllerFindByOrigemTipoQueryOptions(
  origemTipo: ContasPagarControllerFindByOrigemTipoPathParams['origemTipo'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = contasPagarControllerFindByOrigemTipoQueryKey(origemTipo)
  return queryOptions<
    ContasPagarControllerFindByOrigemTipoQueryResponse,
    ResponseErrorConfig<Error>,
    ContasPagarControllerFindByOrigemTipoQueryResponse,
    typeof queryKey
  >({
    enabled: !!origemTipo,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return contasPagarControllerFindByOrigemTipo(origemTipo, config)
    },
  })
}

/**
 * @summary Buscar contas a pagar por tipo de origem
 * {@link /contas-pagar/origem-tipo/:origemTipo}
 */
export function useContasPagarControllerFindByOrigemTipo<
  TData = ContasPagarControllerFindByOrigemTipoQueryResponse,
  TQueryData = ContasPagarControllerFindByOrigemTipoQueryResponse,
  TQueryKey extends QueryKey = ContasPagarControllerFindByOrigemTipoQueryKey,
>(
  origemTipo: ContasPagarControllerFindByOrigemTipoPathParams['origemTipo'],
  options: {
    query?: Partial<QueryObserverOptions<ContasPagarControllerFindByOrigemTipoQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? contasPagarControllerFindByOrigemTipoQueryKey(origemTipo)

  const query = useQuery(
    {
      ...contasPagarControllerFindByOrigemTipoQueryOptions(origemTipo, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}