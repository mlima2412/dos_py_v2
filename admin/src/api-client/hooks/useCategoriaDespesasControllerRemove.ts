/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/lib/fetch-client'
import type {
  CategoriaDespesasControllerRemoveMutationResponse,
  CategoriaDespesasControllerRemovePathParams,
  CategoriaDespesasControllerRemove401,
  CategoriaDespesasControllerRemove404,
} from '../types/CategoriaDespesasControllerRemove.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/lib/fetch-client'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const categoriaDespesasControllerRemoveMutationKey = () => [{ url: '/categoria-despesas/{id}' }] as const

export type CategoriaDespesasControllerRemoveMutationKey = ReturnType<typeof categoriaDespesasControllerRemoveMutationKey>

/**
 * @summary Remover categoria de despesas (soft delete)
 * {@link /categoria-despesas/:id}
 */
export async function categoriaDespesasControllerRemove(
  id: CategoriaDespesasControllerRemovePathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<
    CategoriaDespesasControllerRemoveMutationResponse,
    ResponseErrorConfig<CategoriaDespesasControllerRemove401 | CategoriaDespesasControllerRemove404>,
    unknown
  >({ method: 'DELETE', url: `/categoria-despesas/${id}`, ...requestConfig })
  return res.data
}

/**
 * @summary Remover categoria de despesas (soft delete)
 * {@link /categoria-despesas/:id}
 */
export function useCategoriaDespesasControllerRemove<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CategoriaDespesasControllerRemoveMutationResponse,
      ResponseErrorConfig<CategoriaDespesasControllerRemove401 | CategoriaDespesasControllerRemove404>,
      { id: CategoriaDespesasControllerRemovePathParams['id'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? categoriaDespesasControllerRemoveMutationKey()

  return useMutation<
    CategoriaDespesasControllerRemoveMutationResponse,
    ResponseErrorConfig<CategoriaDespesasControllerRemove401 | CategoriaDespesasControllerRemove404>,
    { id: CategoriaDespesasControllerRemovePathParams['id'] },
    TContext
  >(
    {
      mutationFn: async ({ id }) => {
        return categoriaDespesasControllerRemove(id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}