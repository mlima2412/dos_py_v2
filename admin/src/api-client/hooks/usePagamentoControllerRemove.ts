/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { PagamentoControllerRemoveMutationResponse, PagamentoControllerRemovePathParams, PagamentoControllerRemoveHeaderParams, PagamentoControllerRemove404 } from "../types/PagamentoControllerRemove.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const pagamentoControllerRemoveMutationKey = () =>   [{"url":"/pagamento/{id}"}] as const

export type PagamentoControllerRemoveMutationKey = ReturnType<typeof pagamentoControllerRemoveMutationKey>

/**
 * @summary Remover pagamento
 * {@link /pagamento/:id}
 */
export async function pagamentoControllerRemove(id: PagamentoControllerRemovePathParams["id"], headers: PagamentoControllerRemoveHeaderParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config


const res = await request<PagamentoControllerRemoveMutationResponse, ResponseErrorConfig<PagamentoControllerRemove404>, unknown>({ method : "DELETE", url : `/pagamento/${id}`, ... requestConfig, headers : { ...headers, ...requestConfig.headers } })
return res.data
}

/**
 * @summary Remover pagamento
 * {@link /pagamento/:id}
 */
export function usePagamentoControllerRemove<TContext>(options: 
  {
    mutation?: UseMutationOptions<PagamentoControllerRemoveMutationResponse, ResponseErrorConfig<PagamentoControllerRemove404>, {id: PagamentoControllerRemovePathParams["id"], headers: PagamentoControllerRemoveHeaderParams}, TContext> & { client?: QueryClient },
    client?: Partial<RequestConfig> & { client?: typeof fetch },
  }
   = {}) {
  
          const { mutation = {}, client: config = {} } = options ?? {}
          const { client: queryClient, ...mutationOptions } = mutation;
          const mutationKey = mutationOptions.mutationKey ?? pagamentoControllerRemoveMutationKey()
  
          return useMutation<PagamentoControllerRemoveMutationResponse, ResponseErrorConfig<PagamentoControllerRemove404>, {id: PagamentoControllerRemovePathParams["id"], headers: PagamentoControllerRemoveHeaderParams}, TContext>({
            mutationFn: async({ id, headers }) => {
              return pagamentoControllerRemove(id, headers, config)
            },
            mutationKey,
            ...mutationOptions
          }, queryClient)
      
}