/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { FornecedoresControllerCreateMutationRequest, FornecedoresControllerCreateMutationResponse, FornecedoresControllerCreate409 } from "../types/FornecedoresControllerCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const fornecedoresControllerCreateMutationKey = () =>   [{"url":"/fornecedores"}] as const

export type FornecedoresControllerCreateMutationKey = ReturnType<typeof fornecedoresControllerCreateMutationKey>

/**
 * @summary Criar novo fornecedor
 * {@link /fornecedores}
 */
export async function fornecedoresControllerCreate(data: FornecedoresControllerCreateMutationRequest, config: Partial<RequestConfig<FornecedoresControllerCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config

const requestData = data
const res = await request<FornecedoresControllerCreateMutationResponse, ResponseErrorConfig<FornecedoresControllerCreate409>, FornecedoresControllerCreateMutationRequest>({ method : "POST", url : `/fornecedores`, data : requestData, ... requestConfig })
return res.data
}

/**
 * @summary Criar novo fornecedor
 * {@link /fornecedores}
 */
export function useFornecedoresControllerCreate<TContext>(options: 
  {
    mutation?: UseMutationOptions<FornecedoresControllerCreateMutationResponse, ResponseErrorConfig<FornecedoresControllerCreate409>, {data: FornecedoresControllerCreateMutationRequest}, TContext> & { client?: QueryClient },
    client?: Partial<RequestConfig<FornecedoresControllerCreateMutationRequest>> & { client?: typeof fetch },
  }
   = {}) {
  
          const { mutation = {}, client: config = {} } = options ?? {}
          const { client: queryClient, ...mutationOptions } = mutation;
          const mutationKey = mutationOptions.mutationKey ?? fornecedoresControllerCreateMutationKey()
  
          return useMutation<FornecedoresControllerCreateMutationResponse, ResponseErrorConfig<FornecedoresControllerCreate409>, {data: FornecedoresControllerCreateMutationRequest}, TContext>({
            mutationFn: async({ data }) => {
              return fornecedoresControllerCreate(data, config)
            },
            mutationKey,
            ...mutationOptions
          }, queryClient)
      
}