/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { UsuarioParceiroControllerCreateMutationRequest, UsuarioParceiroControllerCreateMutationResponse, UsuarioParceiroControllerCreate400, UsuarioParceiroControllerCreate404, UsuarioParceiroControllerCreate409 } from "../types/UsuarioParceiroControllerCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const usuarioParceiroControllerCreateMutationKey = () =>   [{"url":"/usuario-parceiro"}] as const

export type UsuarioParceiroControllerCreateMutationKey = ReturnType<typeof usuarioParceiroControllerCreateMutationKey>

/**
 * @summary Criar uma nova relação usuário-parceiro
 * {@link /usuario-parceiro}
 */
export async function usuarioParceiroControllerCreate(data: UsuarioParceiroControllerCreateMutationRequest, config: Partial<RequestConfig<UsuarioParceiroControllerCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config

const requestData = data
const res = await request<UsuarioParceiroControllerCreateMutationResponse, ResponseErrorConfig<UsuarioParceiroControllerCreate400 | UsuarioParceiroControllerCreate404 | UsuarioParceiroControllerCreate409>, UsuarioParceiroControllerCreateMutationRequest>({ method : "POST", url : `/usuario-parceiro`, data : requestData, ... requestConfig })
return res.data
}

/**
 * @summary Criar uma nova relação usuário-parceiro
 * {@link /usuario-parceiro}
 */
export function useUsuarioParceiroControllerCreate<TContext>(options: 
  {
    mutation?: UseMutationOptions<UsuarioParceiroControllerCreateMutationResponse, ResponseErrorConfig<UsuarioParceiroControllerCreate400 | UsuarioParceiroControllerCreate404 | UsuarioParceiroControllerCreate409>, {data: UsuarioParceiroControllerCreateMutationRequest}, TContext> & { client?: QueryClient },
    client?: Partial<RequestConfig<UsuarioParceiroControllerCreateMutationRequest>> & { client?: typeof fetch },
  }
   = {}) {
  
          const { mutation = {}, client: config = {} } = options ?? {}
          const { client: queryClient, ...mutationOptions } = mutation;
          const mutationKey = mutationOptions.mutationKey ?? usuarioParceiroControllerCreateMutationKey()
  
          return useMutation<UsuarioParceiroControllerCreateMutationResponse, ResponseErrorConfig<UsuarioParceiroControllerCreate400 | UsuarioParceiroControllerCreate404 | UsuarioParceiroControllerCreate409>, {data: UsuarioParceiroControllerCreateMutationRequest}, TContext>({
            mutationFn: async({ data }) => {
              return usuarioParceiroControllerCreate(data, config)
            },
            mutationKey,
            ...mutationOptions
          }, queryClient)
      
}