/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { ProdutoControllerActivateMutationResponse, ProdutoControllerActivatePathParams, ProdutoControllerActivateHeaderParams, ProdutoControllerActivate404 } from "../types/ProdutoControllerActivate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const produtoControllerActivateMutationKey = () =>   [{"url":"/produto/{publicId}/ativar"}] as const

export type ProdutoControllerActivateMutationKey = ReturnType<typeof produtoControllerActivateMutationKey>

/**
 * @summary Ativar produto
 * {@link /produto/:publicId/ativar}
 */
export async function produtoControllerActivate(publicId: ProdutoControllerActivatePathParams["publicId"], headers: ProdutoControllerActivateHeaderParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config


const res = await request<ProdutoControllerActivateMutationResponse, ResponseErrorConfig<ProdutoControllerActivate404>, unknown>({ method : "PATCH", url : `/produto/${publicId}/ativar`, ... requestConfig, headers : { ...headers, ...requestConfig.headers } })
return res.data
}

/**
 * @summary Ativar produto
 * {@link /produto/:publicId/ativar}
 */
export function useProdutoControllerActivate<TContext>(options: 
  {
    mutation?: UseMutationOptions<ProdutoControllerActivateMutationResponse, ResponseErrorConfig<ProdutoControllerActivate404>, {publicId: ProdutoControllerActivatePathParams["publicId"], headers: ProdutoControllerActivateHeaderParams}, TContext> & { client?: QueryClient },
    client?: Partial<RequestConfig> & { client?: typeof fetch },
  }
   = {}) {
  
          const { mutation = {}, client: config = {} } = options ?? {}
          const { client: queryClient, ...mutationOptions } = mutation;
          const mutationKey = mutationOptions.mutationKey ?? produtoControllerActivateMutationKey()
  
          return useMutation<ProdutoControllerActivateMutationResponse, ResponseErrorConfig<ProdutoControllerActivate404>, {publicId: ProdutoControllerActivatePathParams["publicId"], headers: ProdutoControllerActivateHeaderParams}, TContext>({
            mutationFn: async({ publicId, headers }) => {
              return produtoControllerActivate(publicId, headers, config)
            },
            mutationKey,
            ...mutationOptions
          }, queryClient)
      
}