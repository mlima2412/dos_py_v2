/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/lib/fetch-client'
import type {
  UsuariosControllerDeactivateUserMutationResponse,
  UsuariosControllerDeactivateUserPathParams,
  UsuariosControllerDeactivateUser404,
} from '../types/UsuariosControllerDeactivateUser.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/lib/fetch-client'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const usuariosControllerDeactivateUserMutationKey = () => [{ url: '/usuarios/{publicId}/desativar' }] as const

export type UsuariosControllerDeactivateUserMutationKey = ReturnType<typeof usuariosControllerDeactivateUserMutationKey>

/**
 * @summary Desativar usuário
 * {@link /usuarios/:publicId/desativar}
 */
export async function usuariosControllerDeactivateUser(
  publicId: UsuariosControllerDeactivateUserPathParams['publicId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<UsuariosControllerDeactivateUserMutationResponse, ResponseErrorConfig<UsuariosControllerDeactivateUser404>, unknown>({
    method: 'PATCH',
    url: `/usuarios/${publicId}/desativar`,
    ...requestConfig,
  })
  return res.data
}

/**
 * @summary Desativar usuário
 * {@link /usuarios/:publicId/desativar}
 */
export function useUsuariosControllerDeactivateUser<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UsuariosControllerDeactivateUserMutationResponse,
      ResponseErrorConfig<UsuariosControllerDeactivateUser404>,
      { publicId: UsuariosControllerDeactivateUserPathParams['publicId'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? usuariosControllerDeactivateUserMutationKey()

  return useMutation<
    UsuariosControllerDeactivateUserMutationResponse,
    ResponseErrorConfig<UsuariosControllerDeactivateUser404>,
    { publicId: UsuariosControllerDeactivateUserPathParams['publicId'] },
    TContext
  >(
    {
      mutationFn: async ({ publicId }) => {
        return usuariosControllerDeactivateUser(publicId, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}