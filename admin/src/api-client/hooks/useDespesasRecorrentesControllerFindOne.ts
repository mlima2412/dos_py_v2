/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/lib/fetch-client'
import type {
  DespesasRecorrentesControllerFindOneQueryResponse,
  DespesasRecorrentesControllerFindOnePathParams,
  DespesasRecorrentesControllerFindOne401,
  DespesasRecorrentesControllerFindOne404,
} from '../types/DespesasRecorrentesControllerFindOne.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/lib/fetch-client'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const despesasRecorrentesControllerFindOneQueryKey = (publicId: DespesasRecorrentesControllerFindOnePathParams['publicId']) =>
  [{ url: '/despesas-recorrentes/:publicId', params: { publicId: publicId } }] as const

export type DespesasRecorrentesControllerFindOneQueryKey = ReturnType<typeof despesasRecorrentesControllerFindOneQueryKey>

/**
 * @summary Buscar despesa recorrente por ID público
 * {@link /despesas-recorrentes/:publicId}
 */
export async function despesasRecorrentesControllerFindOne(
  publicId: DespesasRecorrentesControllerFindOnePathParams['publicId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<
    DespesasRecorrentesControllerFindOneQueryResponse,
    ResponseErrorConfig<DespesasRecorrentesControllerFindOne401 | DespesasRecorrentesControllerFindOne404>,
    unknown
  >({ method: 'GET', url: `/despesas-recorrentes/${publicId}`, ...requestConfig })
  return res.data
}

export function despesasRecorrentesControllerFindOneQueryOptions(
  publicId: DespesasRecorrentesControllerFindOnePathParams['publicId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = despesasRecorrentesControllerFindOneQueryKey(publicId)
  return queryOptions<
    DespesasRecorrentesControllerFindOneQueryResponse,
    ResponseErrorConfig<DespesasRecorrentesControllerFindOne401 | DespesasRecorrentesControllerFindOne404>,
    DespesasRecorrentesControllerFindOneQueryResponse,
    typeof queryKey
  >({
    enabled: !!publicId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return despesasRecorrentesControllerFindOne(publicId, config)
    },
  })
}

/**
 * @summary Buscar despesa recorrente por ID público
 * {@link /despesas-recorrentes/:publicId}
 */
export function useDespesasRecorrentesControllerFindOne<
  TData = DespesasRecorrentesControllerFindOneQueryResponse,
  TQueryData = DespesasRecorrentesControllerFindOneQueryResponse,
  TQueryKey extends QueryKey = DespesasRecorrentesControllerFindOneQueryKey,
>(
  publicId: DespesasRecorrentesControllerFindOnePathParams['publicId'],
  options: {
    query?: Partial<
      QueryObserverOptions<
        DespesasRecorrentesControllerFindOneQueryResponse,
        ResponseErrorConfig<DespesasRecorrentesControllerFindOne401 | DespesasRecorrentesControllerFindOne404>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? despesasRecorrentesControllerFindOneQueryKey(publicId)

  const query = useQuery(
    {
      ...despesasRecorrentesControllerFindOneQueryOptions(publicId, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<DespesasRecorrentesControllerFindOne401 | DespesasRecorrentesControllerFindOne404>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}
