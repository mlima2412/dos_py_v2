/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { ProdutoHistoricoPrecoControllerFindOneQueryResponse, ProdutoHistoricoPrecoControllerFindOnePathParams, ProdutoHistoricoPrecoControllerFindOneHeaderParams, ProdutoHistoricoPrecoControllerFindOne404 } from "../types/ProdutoHistoricoPrecoControllerFindOne.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const produtoHistoricoPrecoControllerFindOneQueryKey = (id: ProdutoHistoricoPrecoControllerFindOnePathParams["id"]) => [{ url: '/produto-historico-preco/:id', params: {id:id} }] as const

export type ProdutoHistoricoPrecoControllerFindOneQueryKey = ReturnType<typeof produtoHistoricoPrecoControllerFindOneQueryKey>

/**
 * @description Busca um registro específico de histórico de preço pelo ID
 * @summary Buscar histórico de preço por ID
 * {@link /produto-historico-preco/:id}
 */
export async function produtoHistoricoPrecoControllerFindOne(id: ProdutoHistoricoPrecoControllerFindOnePathParams["id"], headers: ProdutoHistoricoPrecoControllerFindOneHeaderParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<ProdutoHistoricoPrecoControllerFindOneQueryResponse, ResponseErrorConfig<ProdutoHistoricoPrecoControllerFindOne404>, unknown>({ method : "GET", url : `/produto-historico-preco/${id}`, ... requestConfig, headers : { ...headers, ...requestConfig.headers } })  
  return res.data
}

export function produtoHistoricoPrecoControllerFindOneQueryOptions(id: ProdutoHistoricoPrecoControllerFindOnePathParams["id"], headers: ProdutoHistoricoPrecoControllerFindOneHeaderParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = produtoHistoricoPrecoControllerFindOneQueryKey(id)
  return queryOptions<ProdutoHistoricoPrecoControllerFindOneQueryResponse, ResponseErrorConfig<ProdutoHistoricoPrecoControllerFindOne404>, ProdutoHistoricoPrecoControllerFindOneQueryResponse, typeof queryKey>({
   enabled: !!(id),
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return produtoHistoricoPrecoControllerFindOne(id, headers, config)
   },
  })
}

/**
 * @description Busca um registro específico de histórico de preço pelo ID
 * @summary Buscar histórico de preço por ID
 * {@link /produto-historico-preco/:id}
 */
export function useProdutoHistoricoPrecoControllerFindOne<TData = ProdutoHistoricoPrecoControllerFindOneQueryResponse, TQueryData = ProdutoHistoricoPrecoControllerFindOneQueryResponse, TQueryKey extends QueryKey = ProdutoHistoricoPrecoControllerFindOneQueryKey>(id: ProdutoHistoricoPrecoControllerFindOnePathParams["id"], headers: ProdutoHistoricoPrecoControllerFindOneHeaderParams, options: 
{
  query?: Partial<QueryObserverOptions<ProdutoHistoricoPrecoControllerFindOneQueryResponse, ResponseErrorConfig<ProdutoHistoricoPrecoControllerFindOne404>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? produtoHistoricoPrecoControllerFindOneQueryKey(id)

  const query = useQuery({
   ...produtoHistoricoPrecoControllerFindOneQueryOptions(id, headers, config),
   queryKey,
   ...queryOptions
  } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<ProdutoHistoricoPrecoControllerFindOne404>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}