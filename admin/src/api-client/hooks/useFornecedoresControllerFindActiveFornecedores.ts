/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/lib/fetch-client'
import type { FornecedoresControllerFindActiveFornecedoresQueryResponse } from '../types/FornecedoresControllerFindActiveFornecedores.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/lib/fetch-client'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const fornecedoresControllerFindActiveFornecedoresQueryKey = () => [{ url: '/fornecedores/ativos' }] as const

export type FornecedoresControllerFindActiveFornecedoresQueryKey = ReturnType<typeof fornecedoresControllerFindActiveFornecedoresQueryKey>

/**
 * @summary Listar fornecedores ativos
 * {@link /fornecedores/ativos}
 */
export async function fornecedoresControllerFindActiveFornecedores(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<FornecedoresControllerFindActiveFornecedoresQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/fornecedores/ativos`,
    ...requestConfig,
  })
  return res.data
}

export function fornecedoresControllerFindActiveFornecedoresQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = fornecedoresControllerFindActiveFornecedoresQueryKey()
  return queryOptions<
    FornecedoresControllerFindActiveFornecedoresQueryResponse,
    ResponseErrorConfig<Error>,
    FornecedoresControllerFindActiveFornecedoresQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return fornecedoresControllerFindActiveFornecedores(config)
    },
  })
}

/**
 * @summary Listar fornecedores ativos
 * {@link /fornecedores/ativos}
 */
export function useFornecedoresControllerFindActiveFornecedores<
  TData = FornecedoresControllerFindActiveFornecedoresQueryResponse,
  TQueryData = FornecedoresControllerFindActiveFornecedoresQueryResponse,
  TQueryKey extends QueryKey = FornecedoresControllerFindActiveFornecedoresQueryKey,
>(
  options: {
    query?: Partial<
      QueryObserverOptions<FornecedoresControllerFindActiveFornecedoresQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? fornecedoresControllerFindActiveFornecedoresQueryKey()

  const query = useQuery(
    {
      ...fornecedoresControllerFindActiveFornecedoresQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}