/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/lib/fetch-client'
import type { PerfisControllerFindAllQueryResponse } from '../types/PerfisControllerFindAll.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/lib/fetch-client'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const perfisControllerFindAllQueryKey = () => [{ url: '/perfis' }] as const

export type PerfisControllerFindAllQueryKey = ReturnType<typeof perfisControllerFindAllQueryKey>

/**
 * @summary Listar todos os perfis
 * {@link /perfis}
 */
export async function perfisControllerFindAll(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<PerfisControllerFindAllQueryResponse, ResponseErrorConfig<Error>, unknown>({ method: 'GET', url: `/perfis`, ...requestConfig })
  return res.data
}

export function perfisControllerFindAllQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = perfisControllerFindAllQueryKey()
  return queryOptions<PerfisControllerFindAllQueryResponse, ResponseErrorConfig<Error>, PerfisControllerFindAllQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return perfisControllerFindAll(config)
    },
  })
}

/**
 * @summary Listar todos os perfis
 * {@link /perfis}
 */
export function usePerfisControllerFindAll<
  TData = PerfisControllerFindAllQueryResponse,
  TQueryData = PerfisControllerFindAllQueryResponse,
  TQueryKey extends QueryKey = PerfisControllerFindAllQueryKey,
>(
  options: {
    query?: Partial<QueryObserverOptions<PerfisControllerFindAllQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? perfisControllerFindAllQueryKey()

  const query = useQuery(
    {
      ...perfisControllerFindAllQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}
