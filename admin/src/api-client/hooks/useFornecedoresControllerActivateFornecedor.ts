/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/lib/fetch-client'
import type {
  FornecedoresControllerActivateFornecedorMutationResponse,
  FornecedoresControllerActivateFornecedorPathParams,
  FornecedoresControllerActivateFornecedor404,
} from '../types/FornecedoresControllerActivateFornecedor.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/lib/fetch-client'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const fornecedoresControllerActivateFornecedorMutationKey = () => [{ url: '/fornecedores/{publicId}/ativar' }] as const

export type FornecedoresControllerActivateFornecedorMutationKey = ReturnType<typeof fornecedoresControllerActivateFornecedorMutationKey>

/**
 * @summary Ativar fornecedor
 * {@link /fornecedores/:publicId/ativar}
 */
export async function fornecedoresControllerActivateFornecedor(
  publicId: FornecedoresControllerActivateFornecedorPathParams['publicId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<
    FornecedoresControllerActivateFornecedorMutationResponse,
    ResponseErrorConfig<FornecedoresControllerActivateFornecedor404>,
    unknown
  >({ method: 'PATCH', url: `/fornecedores/${publicId}/ativar`, ...requestConfig })
  return res.data
}

/**
 * @summary Ativar fornecedor
 * {@link /fornecedores/:publicId/ativar}
 */
export function useFornecedoresControllerActivateFornecedor<TContext>(
  options: {
    mutation?: UseMutationOptions<
      FornecedoresControllerActivateFornecedorMutationResponse,
      ResponseErrorConfig<FornecedoresControllerActivateFornecedor404>,
      { publicId: FornecedoresControllerActivateFornecedorPathParams['publicId'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? fornecedoresControllerActivateFornecedorMutationKey()

  return useMutation<
    FornecedoresControllerActivateFornecedorMutationResponse,
    ResponseErrorConfig<FornecedoresControllerActivateFornecedor404>,
    { publicId: FornecedoresControllerActivateFornecedorPathParams['publicId'] },
    TContext
  >(
    {
      mutationFn: async ({ publicId }) => {
        return fornecedoresControllerActivateFornecedor(publicId, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}