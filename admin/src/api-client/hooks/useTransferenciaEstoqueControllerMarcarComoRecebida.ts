/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { TransferenciaEstoqueControllerMarcarComoRecebidaMutationResponse, TransferenciaEstoqueControllerMarcarComoRecebidaPathParams, TransferenciaEstoqueControllerMarcarComoRecebidaHeaderParams, TransferenciaEstoqueControllerMarcarComoRecebida404, TransferenciaEstoqueControllerMarcarComoRecebida409 } from "../types/TransferenciaEstoqueControllerMarcarComoRecebida.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const transferenciaEstoqueControllerMarcarComoRecebidaMutationKey = () =>   [{"url":"/transferencia-estoque/receber/{publicId}"}] as const

export type TransferenciaEstoqueControllerMarcarComoRecebidaMutationKey = ReturnType<typeof transferenciaEstoqueControllerMarcarComoRecebidaMutationKey>

/**
 * @description Marca uma transferência de estoque como recebida usando o publicId. O usuário que recebe é obtido automaticamente do token de autenticação e a transferência deve pertencer ao parceiro especificado no header.
 * @summary Marcar transferência como recebida
 * {@link /transferencia-estoque/receber/:publicId}
 */
export async function transferenciaEstoqueControllerMarcarComoRecebida(publicId: TransferenciaEstoqueControllerMarcarComoRecebidaPathParams["publicId"], headers: TransferenciaEstoqueControllerMarcarComoRecebidaHeaderParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config


const res = await request<TransferenciaEstoqueControllerMarcarComoRecebidaMutationResponse, ResponseErrorConfig<TransferenciaEstoqueControllerMarcarComoRecebida404 | TransferenciaEstoqueControllerMarcarComoRecebida409>, unknown>({ method : "PATCH", url : `/transferencia-estoque/receber/${publicId}`, ... requestConfig, headers : { ...headers, ...requestConfig.headers } })
return res.data
}

/**
 * @description Marca uma transferência de estoque como recebida usando o publicId. O usuário que recebe é obtido automaticamente do token de autenticação e a transferência deve pertencer ao parceiro especificado no header.
 * @summary Marcar transferência como recebida
 * {@link /transferencia-estoque/receber/:publicId}
 */
export function useTransferenciaEstoqueControllerMarcarComoRecebida<TContext>(options: 
  {
    mutation?: UseMutationOptions<TransferenciaEstoqueControllerMarcarComoRecebidaMutationResponse, ResponseErrorConfig<TransferenciaEstoqueControllerMarcarComoRecebida404 | TransferenciaEstoqueControllerMarcarComoRecebida409>, {publicId: TransferenciaEstoqueControllerMarcarComoRecebidaPathParams["publicId"], headers: TransferenciaEstoqueControllerMarcarComoRecebidaHeaderParams}, TContext> & { client?: QueryClient },
    client?: Partial<RequestConfig> & { client?: typeof fetch },
  }
   = {}) {
  
          const { mutation = {}, client: config = {} } = options ?? {}
          const { client: queryClient, ...mutationOptions } = mutation;
          const mutationKey = mutationOptions.mutationKey ?? transferenciaEstoqueControllerMarcarComoRecebidaMutationKey()
  
          return useMutation<TransferenciaEstoqueControllerMarcarComoRecebidaMutationResponse, ResponseErrorConfig<TransferenciaEstoqueControllerMarcarComoRecebida404 | TransferenciaEstoqueControllerMarcarComoRecebida409>, {publicId: TransferenciaEstoqueControllerMarcarComoRecebidaPathParams["publicId"], headers: TransferenciaEstoqueControllerMarcarComoRecebidaHeaderParams}, TContext>({
            mutationFn: async({ publicId, headers }) => {
              return transferenciaEstoqueControllerMarcarComoRecebida(publicId, headers, config)
            },
            mutationKey,
            ...mutationOptions
          }, queryClient)
      
}