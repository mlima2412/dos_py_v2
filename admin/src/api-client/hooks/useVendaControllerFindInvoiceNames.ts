/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { VendaControllerFindInvoiceNamesQueryResponse, VendaControllerFindInvoiceNamesPathParams, VendaControllerFindInvoiceNamesHeaderParams } from "../types/VendaControllerFindInvoiceNames.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const vendaControllerFindInvoiceNamesQueryKey = (clienteId: VendaControllerFindInvoiceNamesPathParams["clienteId"]) => [{ url: '/venda/fatura-nomes/:clienteId', params: {clienteId:clienteId} }] as const

export type VendaControllerFindInvoiceNamesQueryKey = ReturnType<typeof vendaControllerFindInvoiceNamesQueryKey>

/**
 * @summary Listar nomes de fatura e RUC/CNPJ usados anteriormente pelo cliente do parceiro
 * {@link /venda/fatura-nomes/:clienteId}
 */
export async function vendaControllerFindInvoiceNames(clienteId: VendaControllerFindInvoiceNamesPathParams["clienteId"], headers: VendaControllerFindInvoiceNamesHeaderParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<VendaControllerFindInvoiceNamesQueryResponse, ResponseErrorConfig<Error>, unknown>({ method : "GET", url : `/venda/fatura-nomes/${clienteId}`, ... requestConfig, headers : { ...headers, ...requestConfig.headers } })  
  return res.data
}

export function vendaControllerFindInvoiceNamesQueryOptions(clienteId: VendaControllerFindInvoiceNamesPathParams["clienteId"], headers: VendaControllerFindInvoiceNamesHeaderParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = vendaControllerFindInvoiceNamesQueryKey(clienteId)
  return queryOptions<VendaControllerFindInvoiceNamesQueryResponse, ResponseErrorConfig<Error>, VendaControllerFindInvoiceNamesQueryResponse, typeof queryKey>({
   enabled: !!(clienteId),
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return vendaControllerFindInvoiceNames(clienteId, headers, config)
   },
  })
}

/**
 * @summary Listar nomes de fatura e RUC/CNPJ usados anteriormente pelo cliente do parceiro
 * {@link /venda/fatura-nomes/:clienteId}
 */
export function useVendaControllerFindInvoiceNames<TData = VendaControllerFindInvoiceNamesQueryResponse, TQueryData = VendaControllerFindInvoiceNamesQueryResponse, TQueryKey extends QueryKey = VendaControllerFindInvoiceNamesQueryKey>(clienteId: VendaControllerFindInvoiceNamesPathParams["clienteId"], headers: VendaControllerFindInvoiceNamesHeaderParams, options: 
{
  query?: Partial<QueryObserverOptions<VendaControllerFindInvoiceNamesQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? vendaControllerFindInvoiceNamesQueryKey(clienteId)

  const query = useQuery({
   ...vendaControllerFindInvoiceNamesQueryOptions(clienteId, headers, config),
   queryKey,
   ...queryOptions
  } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}