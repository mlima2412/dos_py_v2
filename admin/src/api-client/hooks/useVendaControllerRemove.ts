/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { VendaControllerRemoveMutationResponse, VendaControllerRemovePathParams, VendaControllerRemoveHeaderParams, VendaControllerRemove400, VendaControllerRemove401, VendaControllerRemove403, VendaControllerRemove404 } from "../types/VendaControllerRemove.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const vendaControllerRemoveMutationKey = () =>   [{"url":"/venda/{publicId}"}] as const

export type VendaControllerRemoveMutationKey = ReturnType<typeof vendaControllerRemoveMutationKey>

/**
 * @summary Remover uma venda (apenas se status for PEDIDO)
 * {@link /venda/:publicId}
 */
export async function vendaControllerRemove(publicId: VendaControllerRemovePathParams["publicId"], headers: VendaControllerRemoveHeaderParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config


const res = await request<VendaControllerRemoveMutationResponse, ResponseErrorConfig<VendaControllerRemove400 | VendaControllerRemove401 | VendaControllerRemove403 | VendaControllerRemove404>, unknown>({ method : "DELETE", url : `/venda/${publicId}`, ... requestConfig, headers : { ...headers, ...requestConfig.headers } })
return res.data
}

/**
 * @summary Remover uma venda (apenas se status for PEDIDO)
 * {@link /venda/:publicId}
 */
export function useVendaControllerRemove<TContext>(options: 
  {
    mutation?: UseMutationOptions<VendaControllerRemoveMutationResponse, ResponseErrorConfig<VendaControllerRemove400 | VendaControllerRemove401 | VendaControllerRemove403 | VendaControllerRemove404>, {publicId: VendaControllerRemovePathParams["publicId"], headers: VendaControllerRemoveHeaderParams}, TContext> & { client?: QueryClient },
    client?: Partial<RequestConfig> & { client?: typeof fetch },
  }
   = {}) {
  
          const { mutation = {}, client: config = {} } = options ?? {}
          const { client: queryClient, ...mutationOptions } = mutation;
          const mutationKey = mutationOptions.mutationKey ?? vendaControllerRemoveMutationKey()
  
          return useMutation<VendaControllerRemoveMutationResponse, ResponseErrorConfig<VendaControllerRemove400 | VendaControllerRemove401 | VendaControllerRemove403 | VendaControllerRemove404>, {publicId: VendaControllerRemovePathParams["publicId"], headers: VendaControllerRemoveHeaderParams}, TContext>({
            mutationFn: async({ publicId, headers }) => {
              return vendaControllerRemove(publicId, headers, config)
            },
            mutationKey,
            ...mutationOptions
          }, queryClient)
      
}