/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { ParcelamentoControllerRemoveMutationResponse, ParcelamentoControllerRemovePathParams } from "../types/ParcelamentoControllerRemove.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const parcelamentoControllerRemoveMutationKey = () =>   [{"url":"/parcelamento/{id}"}] as const

export type ParcelamentoControllerRemoveMutationKey = ReturnType<typeof parcelamentoControllerRemoveMutationKey>

/**
 * @summary Remover um Parcelamento
 * {@link /parcelamento/:id}
 */
export async function parcelamentoControllerRemove(id: ParcelamentoControllerRemovePathParams["id"], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config


const res = await request<ParcelamentoControllerRemoveMutationResponse, ResponseErrorConfig<Error>, unknown>({ method : "DELETE", url : `/parcelamento/${id}`, ... requestConfig })
return res.data
}

/**
 * @summary Remover um Parcelamento
 * {@link /parcelamento/:id}
 */
export function useParcelamentoControllerRemove<TContext>(options: 
  {
    mutation?: UseMutationOptions<ParcelamentoControllerRemoveMutationResponse, ResponseErrorConfig<Error>, {id: ParcelamentoControllerRemovePathParams["id"]}, TContext> & { client?: QueryClient },
    client?: Partial<RequestConfig> & { client?: typeof fetch },
  }
   = {}) {
  
          const { mutation = {}, client: config = {} } = options ?? {}
          const { client: queryClient, ...mutationOptions } = mutation;
          const mutationKey = mutationOptions.mutationKey ?? parcelamentoControllerRemoveMutationKey()
  
          return useMutation<ParcelamentoControllerRemoveMutationResponse, ResponseErrorConfig<Error>, {id: ParcelamentoControllerRemovePathParams["id"]}, TContext>({
            mutationFn: async({ id }) => {
              return parcelamentoControllerRemove(id, config)
            },
            mutationKey,
            ...mutationOptions
          }, queryClient)
      
}