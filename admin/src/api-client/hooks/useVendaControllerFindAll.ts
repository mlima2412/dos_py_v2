/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { VendaControllerFindAllQueryResponse, VendaControllerFindAllHeaderParams } from "../types/VendaControllerFindAll.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const vendaControllerFindAllQueryKey = () =>   [{ url: '/venda' }] as const

export type VendaControllerFindAllQueryKey = ReturnType<typeof vendaControllerFindAllQueryKey>

/**
 * @summary Listar vendas do parceiro retornando dados da venda, nome do cliente, nome do usuário e itens vendidos
 * {@link /venda}
 */
export async function vendaControllerFindAll(headers: VendaControllerFindAllHeaderParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config


const res = await request<VendaControllerFindAllQueryResponse, ResponseErrorConfig<Error>, unknown>({ method : "GET", url : `/venda`, ... requestConfig, headers : { ...headers, ...requestConfig.headers } })
return res.data
}

export function vendaControllerFindAllQueryOptions(headers: VendaControllerFindAllHeaderParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  
        const queryKey = vendaControllerFindAllQueryKey()
        return queryOptions<VendaControllerFindAllQueryResponse, ResponseErrorConfig<Error>, VendaControllerFindAllQueryResponse, typeof queryKey>({
         
         queryKey,
         queryFn: async ({ signal }) => {
            config.signal = signal
            return vendaControllerFindAll(headers, config)
         },
        })
  
}

/**
 * @summary Listar vendas do parceiro retornando dados da venda, nome do cliente, nome do usuário e itens vendidos
 * {@link /venda}
 */
export function useVendaControllerFindAll<TData = VendaControllerFindAllQueryResponse, TQueryData = VendaControllerFindAllQueryResponse, TQueryKey extends QueryKey = VendaControllerFindAllQueryKey>(headers: VendaControllerFindAllHeaderParams, options: 
  {
    query?: Partial<QueryObserverOptions<VendaControllerFindAllQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  }
   = {}) {
  
         const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
         const queryKey = queryOptions?.queryKey ?? vendaControllerFindAllQueryKey()
  
         const query = useQuery({
          ...vendaControllerFindAllQueryOptions(headers, config),
          queryKey,
          ...queryOptions
         } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }
  
         query.queryKey = queryKey as TQueryKey
  
         return query
         
}