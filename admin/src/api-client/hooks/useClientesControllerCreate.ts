/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { ClientesControllerCreateMutationRequest, ClientesControllerCreateMutationResponse, ClientesControllerCreate400, ClientesControllerCreate409 } from "../types/ClientesControllerCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const clientesControllerCreateMutationKey = () =>   [{"url":"/clientes"}] as const

export type ClientesControllerCreateMutationKey = ReturnType<typeof clientesControllerCreateMutationKey>

/**
 * @summary Criar novo cliente
 * {@link /clientes}
 */
export async function clientesControllerCreate(data: ClientesControllerCreateMutationRequest, config: Partial<RequestConfig<ClientesControllerCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config

const requestData = data
const res = await request<ClientesControllerCreateMutationResponse, ResponseErrorConfig<ClientesControllerCreate400 | ClientesControllerCreate409>, ClientesControllerCreateMutationRequest>({ method : "POST", url : `/clientes`, data : requestData, ... requestConfig })
return res.data
}

/**
 * @summary Criar novo cliente
 * {@link /clientes}
 */
export function useClientesControllerCreate<TContext>(options: 
  {
    mutation?: UseMutationOptions<ClientesControllerCreateMutationResponse, ResponseErrorConfig<ClientesControllerCreate400 | ClientesControllerCreate409>, {data: ClientesControllerCreateMutationRequest}, TContext> & { client?: QueryClient },
    client?: Partial<RequestConfig<ClientesControllerCreateMutationRequest>> & { client?: typeof fetch },
  }
   = {}) {
  
          const { mutation = {}, client: config = {} } = options ?? {}
          const { client: queryClient, ...mutationOptions } = mutation;
          const mutationKey = mutationOptions.mutationKey ?? clientesControllerCreateMutationKey()
  
          return useMutation<ClientesControllerCreateMutationResponse, ResponseErrorConfig<ClientesControllerCreate400 | ClientesControllerCreate409>, {data: ClientesControllerCreateMutationRequest}, TContext>({
            mutationFn: async({ data }) => {
              return clientesControllerCreate(data, config)
            },
            mutationKey,
            ...mutationOptions
          }, queryClient)
      
}