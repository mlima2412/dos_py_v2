/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { ProdutoSkuControllerCreateMutationRequest, ProdutoSkuControllerCreateMutationResponse, ProdutoSkuControllerCreateHeaderParams, ProdutoSkuControllerCreate400, ProdutoSkuControllerCreate404 } from "../types/ProdutoSkuControllerCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, UseMutationResult, QueryClient } from "@tanstack/react-query";
import { mutationOptions, useMutation } from "@tanstack/react-query";

export const produtoSkuControllerCreateMutationKey = () => [{ url: '/produto-sku' }] as const

export type ProdutoSkuControllerCreateMutationKey = ReturnType<typeof produtoSkuControllerCreateMutationKey>

/**
 * @summary Criar novo SKU de produto
 * {@link /produto-sku}
 */
export async function produtoSkuControllerCreate(data: ProdutoSkuControllerCreateMutationRequest, headers: ProdutoSkuControllerCreateHeaderParams, config: Partial<RequestConfig<ProdutoSkuControllerCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<ProdutoSkuControllerCreateMutationResponse, ResponseErrorConfig<ProdutoSkuControllerCreate400 | ProdutoSkuControllerCreate404>, ProdutoSkuControllerCreateMutationRequest>({ method : "POST", url : `/produto-sku`, data : requestData, ... requestConfig, headers : { ...headers, ...requestConfig.headers } })  
  return res.data
}

export function produtoSkuControllerCreateMutationOptions(config: Partial<RequestConfig<ProdutoSkuControllerCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const mutationKey = produtoSkuControllerCreateMutationKey()
  return mutationOptions<ProdutoSkuControllerCreateMutationResponse, ResponseErrorConfig<ProdutoSkuControllerCreate400 | ProdutoSkuControllerCreate404>, {data: ProdutoSkuControllerCreateMutationRequest, headers: ProdutoSkuControllerCreateHeaderParams}, typeof mutationKey>({
    mutationKey,
    mutationFn: async({ data, headers }) => {
      return produtoSkuControllerCreate(data, headers, config)
    },
  })
}

/**
 * @summary Criar novo SKU de produto
 * {@link /produto-sku}
 */
export function useProdutoSkuControllerCreate<TContext>(options: 
{
  mutation?: UseMutationOptions<ProdutoSkuControllerCreateMutationResponse, ResponseErrorConfig<ProdutoSkuControllerCreate400 | ProdutoSkuControllerCreate404>, {data: ProdutoSkuControllerCreateMutationRequest, headers: ProdutoSkuControllerCreateHeaderParams}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<ProdutoSkuControllerCreateMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? produtoSkuControllerCreateMutationKey()

  const baseOptions = produtoSkuControllerCreateMutationOptions(config) as UseMutationOptions<ProdutoSkuControllerCreateMutationResponse, ResponseErrorConfig<ProdutoSkuControllerCreate400 | ProdutoSkuControllerCreate404>, {data: ProdutoSkuControllerCreateMutationRequest, headers: ProdutoSkuControllerCreateHeaderParams}, TContext>

  return useMutation<ProdutoSkuControllerCreateMutationResponse, ResponseErrorConfig<ProdutoSkuControllerCreate400 | ProdutoSkuControllerCreate404>, {data: ProdutoSkuControllerCreateMutationRequest, headers: ProdutoSkuControllerCreateHeaderParams}, TContext>({
    ...baseOptions,
    mutationKey,
    ...mutationOptions,
  }, queryClient) as UseMutationResult<ProdutoSkuControllerCreateMutationResponse, ResponseErrorConfig<ProdutoSkuControllerCreate400 | ProdutoSkuControllerCreate404>, {data: ProdutoSkuControllerCreateMutationRequest, headers: ProdutoSkuControllerCreateHeaderParams}, TContext>
}