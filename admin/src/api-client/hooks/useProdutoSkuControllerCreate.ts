/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { ProdutoSkuControllerCreateMutationRequest, ProdutoSkuControllerCreateMutationResponse, ProdutoSkuControllerCreateHeaderParams, ProdutoSkuControllerCreate400, ProdutoSkuControllerCreate404 } from "../types/ProdutoSkuControllerCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const produtoSkuControllerCreateMutationKey = () =>   [{"url":"/produto-sku"}] as const

export type ProdutoSkuControllerCreateMutationKey = ReturnType<typeof produtoSkuControllerCreateMutationKey>

/**
 * @summary Criar novo SKU de produto
 * {@link /produto-sku}
 */
export async function produtoSkuControllerCreate(data: ProdutoSkuControllerCreateMutationRequest, headers: ProdutoSkuControllerCreateHeaderParams, config: Partial<RequestConfig<ProdutoSkuControllerCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config

const requestData = data
const res = await request<ProdutoSkuControllerCreateMutationResponse, ResponseErrorConfig<ProdutoSkuControllerCreate400 | ProdutoSkuControllerCreate404>, ProdutoSkuControllerCreateMutationRequest>({ method : "POST", url : `/produto-sku`, data : requestData, ... requestConfig, headers : { ...headers, ...requestConfig.headers } })
return res.data
}

/**
 * @summary Criar novo SKU de produto
 * {@link /produto-sku}
 */
export function useProdutoSkuControllerCreate<TContext>(options: 
  {
    mutation?: UseMutationOptions<ProdutoSkuControllerCreateMutationResponse, ResponseErrorConfig<ProdutoSkuControllerCreate400 | ProdutoSkuControllerCreate404>, {data: ProdutoSkuControllerCreateMutationRequest, headers: ProdutoSkuControllerCreateHeaderParams}, TContext> & { client?: QueryClient },
    client?: Partial<RequestConfig<ProdutoSkuControllerCreateMutationRequest>> & { client?: typeof fetch },
  }
   = {}) {
  
          const { mutation = {}, client: config = {} } = options ?? {}
          const { client: queryClient, ...mutationOptions } = mutation;
          const mutationKey = mutationOptions.mutationKey ?? produtoSkuControllerCreateMutationKey()
  
          return useMutation<ProdutoSkuControllerCreateMutationResponse, ResponseErrorConfig<ProdutoSkuControllerCreate400 | ProdutoSkuControllerCreate404>, {data: ProdutoSkuControllerCreateMutationRequest, headers: ProdutoSkuControllerCreateHeaderParams}, TContext>({
            mutationFn: async({ data, headers }) => {
              return produtoSkuControllerCreate(data, headers, config)
            },
            mutationKey,
            ...mutationOptions
          }, queryClient)
      
}