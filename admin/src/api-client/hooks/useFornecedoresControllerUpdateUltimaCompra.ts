/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { FornecedoresControllerUpdateUltimaCompraMutationResponse, FornecedoresControllerUpdateUltimaCompraPathParams, FornecedoresControllerUpdateUltimaCompraHeaderParams, FornecedoresControllerUpdateUltimaCompra400, FornecedoresControllerUpdateUltimaCompra404 } from "../types/FornecedoresControllerUpdateUltimaCompra.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const fornecedoresControllerUpdateUltimaCompraMutationKey = () =>   [{"url":"/fornecedores/{publicId}/ultima-compra"}] as const

export type FornecedoresControllerUpdateUltimaCompraMutationKey = ReturnType<typeof fornecedoresControllerUpdateUltimaCompraMutationKey>

/**
 * @summary Atualizar data da última compra
 * {@link /fornecedores/:publicId/ultima-compra}
 */
export async function fornecedoresControllerUpdateUltimaCompra(publicId: FornecedoresControllerUpdateUltimaCompraPathParams["publicId"], headers: FornecedoresControllerUpdateUltimaCompraHeaderParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config


const res = await request<FornecedoresControllerUpdateUltimaCompraMutationResponse, ResponseErrorConfig<FornecedoresControllerUpdateUltimaCompra400 | FornecedoresControllerUpdateUltimaCompra404>, unknown>({ method : "PATCH", url : `/fornecedores/${publicId}/ultima-compra`, ... requestConfig, headers : { ...headers, ...requestConfig.headers } })
return res.data
}

/**
 * @summary Atualizar data da última compra
 * {@link /fornecedores/:publicId/ultima-compra}
 */
export function useFornecedoresControllerUpdateUltimaCompra<TContext>(options: 
  {
    mutation?: UseMutationOptions<FornecedoresControllerUpdateUltimaCompraMutationResponse, ResponseErrorConfig<FornecedoresControllerUpdateUltimaCompra400 | FornecedoresControllerUpdateUltimaCompra404>, {publicId: FornecedoresControllerUpdateUltimaCompraPathParams["publicId"], headers: FornecedoresControllerUpdateUltimaCompraHeaderParams}, TContext> & { client?: QueryClient },
    client?: Partial<RequestConfig> & { client?: typeof fetch },
  }
   = {}) {
  
          const { mutation = {}, client: config = {} } = options ?? {}
          const { client: queryClient, ...mutationOptions } = mutation;
          const mutationKey = mutationOptions.mutationKey ?? fornecedoresControllerUpdateUltimaCompraMutationKey()
  
          return useMutation<FornecedoresControllerUpdateUltimaCompraMutationResponse, ResponseErrorConfig<FornecedoresControllerUpdateUltimaCompra400 | FornecedoresControllerUpdateUltimaCompra404>, {publicId: FornecedoresControllerUpdateUltimaCompraPathParams["publicId"], headers: FornecedoresControllerUpdateUltimaCompraHeaderParams}, TContext>({
            mutationFn: async({ publicId, headers }) => {
              return fornecedoresControllerUpdateUltimaCompra(publicId, headers, config)
            },
            mutationKey,
            ...mutationOptions
          }, queryClient)
      
}