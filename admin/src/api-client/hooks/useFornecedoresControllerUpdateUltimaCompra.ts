/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/lib/fetch-client'
import type {
  FornecedoresControllerUpdateUltimaCompraMutationResponse,
  FornecedoresControllerUpdateUltimaCompraPathParams,
  FornecedoresControllerUpdateUltimaCompra404,
} from '../types/FornecedoresControllerUpdateUltimaCompra.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/lib/fetch-client'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const fornecedoresControllerUpdateUltimaCompraMutationKey = () => [{ url: '/fornecedores/{publicId}/ultima-compra' }] as const

export type FornecedoresControllerUpdateUltimaCompraMutationKey = ReturnType<typeof fornecedoresControllerUpdateUltimaCompraMutationKey>

/**
 * @summary Atualizar data da última compra
 * {@link /fornecedores/:publicId/ultima-compra}
 */
export async function fornecedoresControllerUpdateUltimaCompra(
  publicId: FornecedoresControllerUpdateUltimaCompraPathParams['publicId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<
    FornecedoresControllerUpdateUltimaCompraMutationResponse,
    ResponseErrorConfig<FornecedoresControllerUpdateUltimaCompra404>,
    unknown
  >({ method: 'PATCH', url: `/fornecedores/${publicId}/ultima-compra`, ...requestConfig })
  return res.data
}

/**
 * @summary Atualizar data da última compra
 * {@link /fornecedores/:publicId/ultima-compra}
 */
export function useFornecedoresControllerUpdateUltimaCompra<TContext>(
  options: {
    mutation?: UseMutationOptions<
      FornecedoresControllerUpdateUltimaCompraMutationResponse,
      ResponseErrorConfig<FornecedoresControllerUpdateUltimaCompra404>,
      { publicId: FornecedoresControllerUpdateUltimaCompraPathParams['publicId'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? fornecedoresControllerUpdateUltimaCompraMutationKey()

  return useMutation<
    FornecedoresControllerUpdateUltimaCompraMutationResponse,
    ResponseErrorConfig<FornecedoresControllerUpdateUltimaCompra404>,
    { publicId: FornecedoresControllerUpdateUltimaCompraPathParams['publicId'] },
    TContext
  >(
    {
      mutationFn: async ({ publicId }) => {
        return fornecedoresControllerUpdateUltimaCompra(publicId, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}