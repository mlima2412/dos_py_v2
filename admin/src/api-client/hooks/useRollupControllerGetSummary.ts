/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { RollupControllerGetSummaryQueryResponse, RollupControllerGetSummaryQueryParams } from "../types/RollupControllerGetSummary.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const rollupControllerGetSummaryQueryKey = (params: RollupControllerGetSummaryQueryParams) => [{ url: '/dashboard/despesas/mes' }, ...(params ? [params] : [])] as const

export type RollupControllerGetSummaryQueryKey = ReturnType<typeof rollupControllerGetSummaryQueryKey>

/**
 * @summary Obter resumo mensal de despesas
 * {@link /dashboard/despesas/mes}
 */
export async function rollupControllerGetSummary(params: RollupControllerGetSummaryQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<RollupControllerGetSummaryQueryResponse, ResponseErrorConfig<Error>, unknown>({ method : "GET", url : `/dashboard/despesas/mes`, params, ... requestConfig })  
  return res.data
}

export function rollupControllerGetSummaryQueryOptions(params: RollupControllerGetSummaryQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = rollupControllerGetSummaryQueryKey(params)
  return queryOptions<RollupControllerGetSummaryQueryResponse, ResponseErrorConfig<Error>, RollupControllerGetSummaryQueryResponse, typeof queryKey>({
   enabled: !!(params),
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return rollupControllerGetSummary(params, config)
   },
  })
}

/**
 * @summary Obter resumo mensal de despesas
 * {@link /dashboard/despesas/mes}
 */
export function useRollupControllerGetSummary<TData = RollupControllerGetSummaryQueryResponse, TQueryData = RollupControllerGetSummaryQueryResponse, TQueryKey extends QueryKey = RollupControllerGetSummaryQueryKey>(params: RollupControllerGetSummaryQueryParams, options: 
{
  query?: Partial<QueryObserverOptions<RollupControllerGetSummaryQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? rollupControllerGetSummaryQueryKey(params)

  const query = useQuery({
   ...rollupControllerGetSummaryQueryOptions(params, config),
   queryKey,
   ...queryOptions
  } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}