/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { TransferenciaEstoqueSkuControllerUpdateMutationRequest, TransferenciaEstoqueSkuControllerUpdateMutationResponse, TransferenciaEstoqueSkuControllerUpdatePathParams, TransferenciaEstoqueSkuControllerUpdate404 } from "../types/TransferenciaEstoqueSkuControllerUpdate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const transferenciaEstoqueSkuControllerUpdateMutationKey = () =>   [{"url":"/transferencia-estoque-sku/{id}"}] as const

export type TransferenciaEstoqueSkuControllerUpdateMutationKey = ReturnType<typeof transferenciaEstoqueSkuControllerUpdateMutationKey>

/**
 * @description Atualiza um item de transferência de estoque existente
 * @summary Atualizar item de transferência
 * {@link /transferencia-estoque-sku/:id}
 */
export async function transferenciaEstoqueSkuControllerUpdate(id: TransferenciaEstoqueSkuControllerUpdatePathParams["id"], data?: TransferenciaEstoqueSkuControllerUpdateMutationRequest, config: Partial<RequestConfig<TransferenciaEstoqueSkuControllerUpdateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config

const requestData = data
const res = await request<TransferenciaEstoqueSkuControllerUpdateMutationResponse, ResponseErrorConfig<TransferenciaEstoqueSkuControllerUpdate404>, TransferenciaEstoqueSkuControllerUpdateMutationRequest>({ method : "PATCH", url : `/transferencia-estoque-sku/${id}`, data : requestData, ... requestConfig })
return res.data
}

/**
 * @description Atualiza um item de transferência de estoque existente
 * @summary Atualizar item de transferência
 * {@link /transferencia-estoque-sku/:id}
 */
export function useTransferenciaEstoqueSkuControllerUpdate<TContext>(options: 
  {
    mutation?: UseMutationOptions<TransferenciaEstoqueSkuControllerUpdateMutationResponse, ResponseErrorConfig<TransferenciaEstoqueSkuControllerUpdate404>, {id: TransferenciaEstoqueSkuControllerUpdatePathParams["id"], data?: TransferenciaEstoqueSkuControllerUpdateMutationRequest}, TContext> & { client?: QueryClient },
    client?: Partial<RequestConfig<TransferenciaEstoqueSkuControllerUpdateMutationRequest>> & { client?: typeof fetch },
  }
   = {}) {
  
          const { mutation = {}, client: config = {} } = options ?? {}
          const { client: queryClient, ...mutationOptions } = mutation;
          const mutationKey = mutationOptions.mutationKey ?? transferenciaEstoqueSkuControllerUpdateMutationKey()
  
          return useMutation<TransferenciaEstoqueSkuControllerUpdateMutationResponse, ResponseErrorConfig<TransferenciaEstoqueSkuControllerUpdate404>, {id: TransferenciaEstoqueSkuControllerUpdatePathParams["id"], data?: TransferenciaEstoqueSkuControllerUpdateMutationRequest}, TContext>({
            mutationFn: async({ id, data }) => {
              return transferenciaEstoqueSkuControllerUpdate(id, data, config)
            },
            mutationKey,
            ...mutationOptions
          }, queryClient)
      
}