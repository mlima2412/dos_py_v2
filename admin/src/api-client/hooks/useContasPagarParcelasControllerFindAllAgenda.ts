/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { ContasPagarParcelasControllerFindAllAgendaQueryResponse, ContasPagarParcelasControllerFindAllAgendaPathParams } from "../types/ContasPagarParcelasControllerFindAllAgenda.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const contasPagarParcelasControllerFindAllAgendaQueryKey = (parceiroId: ContasPagarParcelasControllerFindAllAgendaPathParams["parceiroId"]) => [{ url: '/contas-pagar-parcelas/agenda/:parceiroId', params: {parceiroId:parceiroId} }] as const

export type ContasPagarParcelasControllerFindAllAgendaQueryKey = ReturnType<typeof contasPagarParcelasControllerFindAllAgendaQueryKey>

/**
 * @summary Listar todas as parcelas de contas a pagar da agenda de compromissos
 * {@link /contas-pagar-parcelas/agenda/:parceiroId}
 */
export async function contasPagarParcelasControllerFindAllAgenda(parceiroId: ContasPagarParcelasControllerFindAllAgendaPathParams["parceiroId"], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<ContasPagarParcelasControllerFindAllAgendaQueryResponse, ResponseErrorConfig<Error>, unknown>({ method : "GET", url : `/contas-pagar-parcelas/agenda/${parceiroId}`, ... requestConfig })  
  return res.data
}

export function contasPagarParcelasControllerFindAllAgendaQueryOptions(parceiroId: ContasPagarParcelasControllerFindAllAgendaPathParams["parceiroId"], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = contasPagarParcelasControllerFindAllAgendaQueryKey(parceiroId)
  return queryOptions<ContasPagarParcelasControllerFindAllAgendaQueryResponse, ResponseErrorConfig<Error>, ContasPagarParcelasControllerFindAllAgendaQueryResponse, typeof queryKey>({
   enabled: !!(parceiroId),
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return contasPagarParcelasControllerFindAllAgenda(parceiroId, config)
   },
  })
}

/**
 * @summary Listar todas as parcelas de contas a pagar da agenda de compromissos
 * {@link /contas-pagar-parcelas/agenda/:parceiroId}
 */
export function useContasPagarParcelasControllerFindAllAgenda<TData = ContasPagarParcelasControllerFindAllAgendaQueryResponse, TQueryData = ContasPagarParcelasControllerFindAllAgendaQueryResponse, TQueryKey extends QueryKey = ContasPagarParcelasControllerFindAllAgendaQueryKey>(parceiroId: ContasPagarParcelasControllerFindAllAgendaPathParams["parceiroId"], options: 
{
  query?: Partial<QueryObserverOptions<ContasPagarParcelasControllerFindAllAgendaQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? contasPagarParcelasControllerFindAllAgendaQueryKey(parceiroId)

  const query = useQuery({
   ...contasPagarParcelasControllerFindAllAgendaQueryOptions(parceiroId, config),
   queryKey,
   ...queryOptions
  } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}