/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/lib/fetch-client'
import type {
  PerfisControllerRemoveMutationResponse,
  PerfisControllerRemovePathParams,
  PerfisControllerRemove400,
  PerfisControllerRemove404,
} from '../types/PerfisControllerRemove.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/lib/fetch-client'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const perfisControllerRemoveMutationKey = () => [{ url: '/perfis/{id}' }] as const

export type PerfisControllerRemoveMutationKey = ReturnType<typeof perfisControllerRemoveMutationKey>

/**
 * @summary Remover perfil
 * {@link /perfis/:id}
 */
export async function perfisControllerRemove(id: PerfisControllerRemovePathParams['id'], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<PerfisControllerRemoveMutationResponse, ResponseErrorConfig<PerfisControllerRemove400 | PerfisControllerRemove404>, unknown>({
    method: 'DELETE',
    url: `/perfis/${id}`,
    ...requestConfig,
  })
  return res.data
}

/**
 * @summary Remover perfil
 * {@link /perfis/:id}
 */
export function usePerfisControllerRemove<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PerfisControllerRemoveMutationResponse,
      ResponseErrorConfig<PerfisControllerRemove400 | PerfisControllerRemove404>,
      { id: PerfisControllerRemovePathParams['id'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? perfisControllerRemoveMutationKey()

  return useMutation<
    PerfisControllerRemoveMutationResponse,
    ResponseErrorConfig<PerfisControllerRemove400 | PerfisControllerRemove404>,
    { id: PerfisControllerRemovePathParams['id'] },
    TContext
  >(
    {
      mutationFn: async ({ id }) => {
        return perfisControllerRemove(id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}
