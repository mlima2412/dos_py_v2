/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { ProdutoHistoricoPrecoControllerFindByProdutoIdQueryResponse, ProdutoHistoricoPrecoControllerFindByProdutoIdPathParams, ProdutoHistoricoPrecoControllerFindByProdutoIdQueryParams, ProdutoHistoricoPrecoControllerFindByProdutoIdHeaderParams, ProdutoHistoricoPrecoControllerFindByProdutoId404 } from "../types/ProdutoHistoricoPrecoControllerFindByProdutoId.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const produtoHistoricoPrecoControllerFindByProdutoIdQueryKey = (produtoId: ProdutoHistoricoPrecoControllerFindByProdutoIdPathParams["produtoId"], params?: ProdutoHistoricoPrecoControllerFindByProdutoIdQueryParams) => [{ url: '/produto-historico-preco/produto/:produtoId', params: {produtoId:produtoId} }, ...(params ? [params] : [])] as const

export type ProdutoHistoricoPrecoControllerFindByProdutoIdQueryKey = ReturnType<typeof produtoHistoricoPrecoControllerFindByProdutoIdQueryKey>

/**
 * @description Lista todos os registros de histórico de preço de um produto específico pelo ID numérico com filtros opcionais
 * @summary Listar histórico de preços por ID do produto
 * {@link /produto-historico-preco/produto/:produtoId}
 */
export async function produtoHistoricoPrecoControllerFindByProdutoId(produtoId: ProdutoHistoricoPrecoControllerFindByProdutoIdPathParams["produtoId"], headers: ProdutoHistoricoPrecoControllerFindByProdutoIdHeaderParams, params?: ProdutoHistoricoPrecoControllerFindByProdutoIdQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<ProdutoHistoricoPrecoControllerFindByProdutoIdQueryResponse, ResponseErrorConfig<ProdutoHistoricoPrecoControllerFindByProdutoId404>, unknown>({ method : "GET", url : `/produto-historico-preco/produto/${produtoId}`, params, ... requestConfig, headers : { ...headers, ...requestConfig.headers } })  
  return res.data
}

export function produtoHistoricoPrecoControllerFindByProdutoIdQueryOptions(produtoId: ProdutoHistoricoPrecoControllerFindByProdutoIdPathParams["produtoId"], headers: ProdutoHistoricoPrecoControllerFindByProdutoIdHeaderParams, params?: ProdutoHistoricoPrecoControllerFindByProdutoIdQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = produtoHistoricoPrecoControllerFindByProdutoIdQueryKey(produtoId, params)
  return queryOptions<ProdutoHistoricoPrecoControllerFindByProdutoIdQueryResponse, ResponseErrorConfig<ProdutoHistoricoPrecoControllerFindByProdutoId404>, ProdutoHistoricoPrecoControllerFindByProdutoIdQueryResponse, typeof queryKey>({
   enabled: !!(produtoId),
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return produtoHistoricoPrecoControllerFindByProdutoId(produtoId, headers, params, config)
   },
  })
}

/**
 * @description Lista todos os registros de histórico de preço de um produto específico pelo ID numérico com filtros opcionais
 * @summary Listar histórico de preços por ID do produto
 * {@link /produto-historico-preco/produto/:produtoId}
 */
export function useProdutoHistoricoPrecoControllerFindByProdutoId<TData = ProdutoHistoricoPrecoControllerFindByProdutoIdQueryResponse, TQueryData = ProdutoHistoricoPrecoControllerFindByProdutoIdQueryResponse, TQueryKey extends QueryKey = ProdutoHistoricoPrecoControllerFindByProdutoIdQueryKey>(produtoId: ProdutoHistoricoPrecoControllerFindByProdutoIdPathParams["produtoId"], headers: ProdutoHistoricoPrecoControllerFindByProdutoIdHeaderParams, params?: ProdutoHistoricoPrecoControllerFindByProdutoIdQueryParams, options: 
{
  query?: Partial<QueryObserverOptions<ProdutoHistoricoPrecoControllerFindByProdutoIdQueryResponse, ResponseErrorConfig<ProdutoHistoricoPrecoControllerFindByProdutoId404>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? produtoHistoricoPrecoControllerFindByProdutoIdQueryKey(produtoId, params)

  const query = useQuery({
   ...produtoHistoricoPrecoControllerFindByProdutoIdQueryOptions(produtoId, headers, params, config),
   queryKey,
   ...queryOptions
  } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<ProdutoHistoricoPrecoControllerFindByProdutoId404>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}