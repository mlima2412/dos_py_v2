/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { CurrencyControllerFindAllActiveQueryResponse, CurrencyControllerFindAllActive401 } from "../types/CurrencyControllerFindAllActive.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const currencyControllerFindAllActiveQueryKey = () =>   [{ url: '/currency/ativos' }] as const

export type CurrencyControllerFindAllActiveQueryKey = ReturnType<typeof currencyControllerFindAllActiveQueryKey>

/**
 * @summary Listar apenas moedas ativas
 * {@link /currency/ativos}
 */
export async function currencyControllerFindAllActive(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config


const res = await request<CurrencyControllerFindAllActiveQueryResponse, ResponseErrorConfig<CurrencyControllerFindAllActive401>, unknown>({ method : "GET", url : `/currency/ativos`, ... requestConfig })
return res.data
}

export function currencyControllerFindAllActiveQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  
        const queryKey = currencyControllerFindAllActiveQueryKey()
        return queryOptions<CurrencyControllerFindAllActiveQueryResponse, ResponseErrorConfig<CurrencyControllerFindAllActive401>, CurrencyControllerFindAllActiveQueryResponse, typeof queryKey>({
         
         queryKey,
         queryFn: async ({ signal }) => {
            config.signal = signal
            return currencyControllerFindAllActive(config)
         },
        })
  
}

/**
 * @summary Listar apenas moedas ativas
 * {@link /currency/ativos}
 */
export function useCurrencyControllerFindAllActive<TData = CurrencyControllerFindAllActiveQueryResponse, TQueryData = CurrencyControllerFindAllActiveQueryResponse, TQueryKey extends QueryKey = CurrencyControllerFindAllActiveQueryKey>(options: 
  {
    query?: Partial<QueryObserverOptions<CurrencyControllerFindAllActiveQueryResponse, ResponseErrorConfig<CurrencyControllerFindAllActive401>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  }
   = {}) {
  
         const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
         const queryKey = queryOptions?.queryKey ?? currencyControllerFindAllActiveQueryKey()
  
         const query = useQuery({
          ...currencyControllerFindAllActiveQueryOptions(config),
          queryKey,
          ...queryOptions
         } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<CurrencyControllerFindAllActive401>> & { queryKey: TQueryKey }
  
         query.queryKey = queryKey as TQueryKey
  
         return query
         
}