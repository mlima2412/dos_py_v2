/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/lib/fetch-client'
import type { DespesasControllerFindAllQueryResponse } from '../types/DespesasControllerFindAll.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/lib/fetch-client'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const despesasControllerFindAllSuspenseQueryKey = () => [{ url: '/despesas' }] as const

export type DespesasControllerFindAllSuspenseQueryKey = ReturnType<typeof despesasControllerFindAllSuspenseQueryKey>

/**
 * @summary Listar todas as despesas
 * {@link /despesas}
 */
export async function despesasControllerFindAllSuspense(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<DespesasControllerFindAllQueryResponse, ResponseErrorConfig<Error>, unknown>({ method: 'GET', url: `/despesas`, ...requestConfig })
  return res.data
}

export function despesasControllerFindAllSuspenseQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = despesasControllerFindAllSuspenseQueryKey()
  return queryOptions<DespesasControllerFindAllQueryResponse, ResponseErrorConfig<Error>, DespesasControllerFindAllQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return despesasControllerFindAllSuspense(config)
    },
  })
}

/**
 * @summary Listar todas as despesas
 * {@link /despesas}
 */
export function useDespesasControllerFindAllSuspense<
  TData = DespesasControllerFindAllQueryResponse,
  TQueryKey extends QueryKey = DespesasControllerFindAllSuspenseQueryKey,
>(
  options: {
    query?: Partial<UseSuspenseQueryOptions<DespesasControllerFindAllQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? despesasControllerFindAllSuspenseQueryKey()

  const query = useSuspenseQuery(
    {
      ...despesasControllerFindAllSuspenseQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as UseSuspenseQueryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}