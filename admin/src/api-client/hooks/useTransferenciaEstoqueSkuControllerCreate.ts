/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { TransferenciaEstoqueSkuControllerCreateMutationRequest, TransferenciaEstoqueSkuControllerCreateMutationResponse, TransferenciaEstoqueSkuControllerCreate400, TransferenciaEstoqueSkuControllerCreate404 } from "../types/TransferenciaEstoqueSkuControllerCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const transferenciaEstoqueSkuControllerCreateMutationKey = () =>   [{"url":"/transferencia-estoque-sku"}] as const

export type TransferenciaEstoqueSkuControllerCreateMutationKey = ReturnType<typeof transferenciaEstoqueSkuControllerCreateMutationKey>

/**
 * @description Cria um novo item de transferência de estoque, vinculando uma transferência a um movimento de estoque
 * @summary Criar item de transferência de estoque
 * {@link /transferencia-estoque-sku}
 */
export async function transferenciaEstoqueSkuControllerCreate(data: TransferenciaEstoqueSkuControllerCreateMutationRequest, config: Partial<RequestConfig<TransferenciaEstoqueSkuControllerCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config

const requestData = data
const res = await request<TransferenciaEstoqueSkuControllerCreateMutationResponse, ResponseErrorConfig<TransferenciaEstoqueSkuControllerCreate400 | TransferenciaEstoqueSkuControllerCreate404>, TransferenciaEstoqueSkuControllerCreateMutationRequest>({ method : "POST", url : `/transferencia-estoque-sku`, data : requestData, ... requestConfig })
return res.data
}

/**
 * @description Cria um novo item de transferência de estoque, vinculando uma transferência a um movimento de estoque
 * @summary Criar item de transferência de estoque
 * {@link /transferencia-estoque-sku}
 */
export function useTransferenciaEstoqueSkuControllerCreate<TContext>(options: 
  {
    mutation?: UseMutationOptions<TransferenciaEstoqueSkuControllerCreateMutationResponse, ResponseErrorConfig<TransferenciaEstoqueSkuControllerCreate400 | TransferenciaEstoqueSkuControllerCreate404>, {data: TransferenciaEstoqueSkuControllerCreateMutationRequest}, TContext> & { client?: QueryClient },
    client?: Partial<RequestConfig<TransferenciaEstoqueSkuControllerCreateMutationRequest>> & { client?: typeof fetch },
  }
   = {}) {
  
          const { mutation = {}, client: config = {} } = options ?? {}
          const { client: queryClient, ...mutationOptions } = mutation;
          const mutationKey = mutationOptions.mutationKey ?? transferenciaEstoqueSkuControllerCreateMutationKey()
  
          return useMutation<TransferenciaEstoqueSkuControllerCreateMutationResponse, ResponseErrorConfig<TransferenciaEstoqueSkuControllerCreate400 | TransferenciaEstoqueSkuControllerCreate404>, {data: TransferenciaEstoqueSkuControllerCreateMutationRequest}, TContext>({
            mutationFn: async({ data }) => {
              return transferenciaEstoqueSkuControllerCreate(data, config)
            },
            mutationKey,
            ...mutationOptions
          }, queryClient)
      
}