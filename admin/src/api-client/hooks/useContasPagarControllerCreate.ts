/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { ContasPagarControllerCreateMutationRequest, ContasPagarControllerCreateMutationResponse, ContasPagarControllerCreate400 } from "../types/ContasPagarControllerCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, UseMutationResult, QueryClient } from "@tanstack/react-query";
import { mutationOptions, useMutation } from "@tanstack/react-query";

export const contasPagarControllerCreateMutationKey = () => [{ url: '/contas-pagar' }] as const

export type ContasPagarControllerCreateMutationKey = ReturnType<typeof contasPagarControllerCreateMutationKey>

/**
 * @summary Criar nova conta a pagar
 * {@link /contas-pagar}
 */
export async function contasPagarControllerCreate(data: ContasPagarControllerCreateMutationRequest, config: Partial<RequestConfig<ContasPagarControllerCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<ContasPagarControllerCreateMutationResponse, ResponseErrorConfig<ContasPagarControllerCreate400>, ContasPagarControllerCreateMutationRequest>({ method : "POST", url : `/contas-pagar`, data : requestData, ... requestConfig })  
  return res.data
}

export function contasPagarControllerCreateMutationOptions(config: Partial<RequestConfig<ContasPagarControllerCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const mutationKey = contasPagarControllerCreateMutationKey()
  return mutationOptions<ContasPagarControllerCreateMutationResponse, ResponseErrorConfig<ContasPagarControllerCreate400>, {data: ContasPagarControllerCreateMutationRequest}, typeof mutationKey>({
    mutationKey,
    mutationFn: async({ data }) => {
      return contasPagarControllerCreate(data, config)
    },
  })
}

/**
 * @summary Criar nova conta a pagar
 * {@link /contas-pagar}
 */
export function useContasPagarControllerCreate<TContext>(options: 
{
  mutation?: UseMutationOptions<ContasPagarControllerCreateMutationResponse, ResponseErrorConfig<ContasPagarControllerCreate400>, {data: ContasPagarControllerCreateMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<ContasPagarControllerCreateMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? contasPagarControllerCreateMutationKey()

  const baseOptions = contasPagarControllerCreateMutationOptions(config) as UseMutationOptions<ContasPagarControllerCreateMutationResponse, ResponseErrorConfig<ContasPagarControllerCreate400>, {data: ContasPagarControllerCreateMutationRequest}, TContext>

  return useMutation<ContasPagarControllerCreateMutationResponse, ResponseErrorConfig<ContasPagarControllerCreate400>, {data: ContasPagarControllerCreateMutationRequest}, TContext>({
    ...baseOptions,
    mutationKey,
    ...mutationOptions,
  }, queryClient) as UseMutationResult<ContasPagarControllerCreateMutationResponse, ResponseErrorConfig<ContasPagarControllerCreate400>, {data: ContasPagarControllerCreateMutationRequest}, TContext>
}