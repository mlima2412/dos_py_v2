/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { EstoqueSkuControllerUpdateMutationRequest, EstoqueSkuControllerUpdateMutationResponse, EstoqueSkuControllerUpdatePathParams, EstoqueSkuControllerUpdate404 } from "../types/EstoqueSkuControllerUpdate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const estoqueSkuControllerUpdateMutationKey = () =>   [{"url":"/estoque-sku/{localId}/{skuId}"}] as const

export type EstoqueSkuControllerUpdateMutationKey = ReturnType<typeof estoqueSkuControllerUpdateMutationKey>

/**
 * @summary Atualizar quantidade em estoque
 * {@link /estoque-sku/:localId/:skuId}
 */
export async function estoqueSkuControllerUpdate(localId: EstoqueSkuControllerUpdatePathParams["localId"], skuId: EstoqueSkuControllerUpdatePathParams["skuId"], data?: EstoqueSkuControllerUpdateMutationRequest, config: Partial<RequestConfig<EstoqueSkuControllerUpdateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config

const requestData = data
const res = await request<EstoqueSkuControllerUpdateMutationResponse, ResponseErrorConfig<EstoqueSkuControllerUpdate404>, EstoqueSkuControllerUpdateMutationRequest>({ method : "PATCH", url : `/estoque-sku/${localId}/${skuId}`, data : requestData, ... requestConfig })
return res.data
}

/**
 * @summary Atualizar quantidade em estoque
 * {@link /estoque-sku/:localId/:skuId}
 */
export function useEstoqueSkuControllerUpdate<TContext>(options: 
  {
    mutation?: UseMutationOptions<EstoqueSkuControllerUpdateMutationResponse, ResponseErrorConfig<EstoqueSkuControllerUpdate404>, {localId: EstoqueSkuControllerUpdatePathParams["localId"], skuId: EstoqueSkuControllerUpdatePathParams["skuId"], data?: EstoqueSkuControllerUpdateMutationRequest}, TContext> & { client?: QueryClient },
    client?: Partial<RequestConfig<EstoqueSkuControllerUpdateMutationRequest>> & { client?: typeof fetch },
  }
   = {}) {
  
          const { mutation = {}, client: config = {} } = options ?? {}
          const { client: queryClient, ...mutationOptions } = mutation;
          const mutationKey = mutationOptions.mutationKey ?? estoqueSkuControllerUpdateMutationKey()
  
          return useMutation<EstoqueSkuControllerUpdateMutationResponse, ResponseErrorConfig<EstoqueSkuControllerUpdate404>, {localId: EstoqueSkuControllerUpdatePathParams["localId"], skuId: EstoqueSkuControllerUpdatePathParams["skuId"], data?: EstoqueSkuControllerUpdateMutationRequest}, TContext>({
            mutationFn: async({ localId, skuId, data }) => {
              return estoqueSkuControllerUpdate(localId, skuId, data, config)
            },
            mutationKey,
            ...mutationOptions
          }, queryClient)
      
}