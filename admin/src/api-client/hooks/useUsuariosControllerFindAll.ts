/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { UsuariosControllerFindAllQueryResponse } from "../types/UsuariosControllerFindAll.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const usuariosControllerFindAllQueryKey = () =>   [{ url: '/usuarios' }] as const

export type UsuariosControllerFindAllQueryKey = ReturnType<typeof usuariosControllerFindAllQueryKey>

/**
 * @summary Listar todos os usuários
 * {@link /usuarios}
 */
export async function usuariosControllerFindAll(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config


const res = await request<UsuariosControllerFindAllQueryResponse, ResponseErrorConfig<Error>, unknown>({ method : "GET", url : `/usuarios`, ... requestConfig })
return res.data
}

export function usuariosControllerFindAllQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  
        const queryKey = usuariosControllerFindAllQueryKey()
        return queryOptions<UsuariosControllerFindAllQueryResponse, ResponseErrorConfig<Error>, UsuariosControllerFindAllQueryResponse, typeof queryKey>({
         
         queryKey,
         queryFn: async ({ signal }) => {
            config.signal = signal
            return usuariosControllerFindAll(config)
         },
        })
  
}

/**
 * @summary Listar todos os usuários
 * {@link /usuarios}
 */
export function useUsuariosControllerFindAll<TData = UsuariosControllerFindAllQueryResponse, TQueryData = UsuariosControllerFindAllQueryResponse, TQueryKey extends QueryKey = UsuariosControllerFindAllQueryKey>(options: 
  {
    query?: Partial<QueryObserverOptions<UsuariosControllerFindAllQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  }
   = {}) {
  
         const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
         const queryKey = queryOptions?.queryKey ?? usuariosControllerFindAllQueryKey()
  
         const query = useQuery({
          ...usuariosControllerFindAllQueryOptions(config),
          queryKey,
          ...queryOptions
         } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }
  
         query.queryKey = queryKey as TQueryKey
  
         return query
         
}