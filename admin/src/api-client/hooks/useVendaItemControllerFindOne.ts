/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { VendaItemControllerFindOneQueryResponse, VendaItemControllerFindOnePathParams, VendaItemControllerFindOneQueryParams, VendaItemControllerFindOneHeaderParams, VendaItemControllerFindOne404 } from "../types/VendaItemControllerFindOne.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const vendaItemControllerFindOneQueryKey = (id: VendaItemControllerFindOnePathParams["id"], params: VendaItemControllerFindOneQueryParams) =>   [{ url: '/venda-item/:id', params: {id:id} }, ...(params ? [params] : [])] as const

export type VendaItemControllerFindOneQueryKey = ReturnType<typeof vendaItemControllerFindOneQueryKey>

/**
 * @summary Buscar item de venda por ID (requer vendaId)
 * {@link /venda-item/:id}
 */
export async function vendaItemControllerFindOne(id: VendaItemControllerFindOnePathParams["id"], params: VendaItemControllerFindOneQueryParams, headers: VendaItemControllerFindOneHeaderParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config


const res = await request<VendaItemControllerFindOneQueryResponse, ResponseErrorConfig<VendaItemControllerFindOne404>, unknown>({ method : "GET", url : `/venda-item/${id}`, params, ... requestConfig, headers : { ...headers, ...requestConfig.headers } })
return res.data
}

export function vendaItemControllerFindOneQueryOptions(id: VendaItemControllerFindOnePathParams["id"], params: VendaItemControllerFindOneQueryParams, headers: VendaItemControllerFindOneHeaderParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  
        const queryKey = vendaItemControllerFindOneQueryKey(id, params)
        return queryOptions<VendaItemControllerFindOneQueryResponse, ResponseErrorConfig<VendaItemControllerFindOne404>, VendaItemControllerFindOneQueryResponse, typeof queryKey>({
         enabled: !!(id&& params),
         queryKey,
         queryFn: async ({ signal }) => {
            config.signal = signal
            return vendaItemControllerFindOne(id, params, headers, config)
         },
        })
  
}

/**
 * @summary Buscar item de venda por ID (requer vendaId)
 * {@link /venda-item/:id}
 */
export function useVendaItemControllerFindOne<TData = VendaItemControllerFindOneQueryResponse, TQueryData = VendaItemControllerFindOneQueryResponse, TQueryKey extends QueryKey = VendaItemControllerFindOneQueryKey>(id: VendaItemControllerFindOnePathParams["id"], params: VendaItemControllerFindOneQueryParams, headers: VendaItemControllerFindOneHeaderParams, options: 
  {
    query?: Partial<QueryObserverOptions<VendaItemControllerFindOneQueryResponse, ResponseErrorConfig<VendaItemControllerFindOne404>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  }
   = {}) {
  
         const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
         const queryKey = queryOptions?.queryKey ?? vendaItemControllerFindOneQueryKey(id, params)
  
         const query = useQuery({
          ...vendaItemControllerFindOneQueryOptions(id, params, headers, config),
          queryKey,
          ...queryOptions
         } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<VendaItemControllerFindOne404>> & { queryKey: TQueryKey }
  
         query.queryKey = queryKey as TQueryKey
  
         return query
         
}