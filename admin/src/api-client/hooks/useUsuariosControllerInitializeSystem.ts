/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { UsuariosControllerInitializeSystemMutationResponse } from "../types/UsuariosControllerInitializeSystem.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const usuariosControllerInitializeSystemMutationKey = () =>   [{"url":"/usuarios/initialize-system"}] as const

export type UsuariosControllerInitializeSystemMutationKey = ReturnType<typeof usuariosControllerInitializeSystemMutationKey>

/**
 * @description Cria perfis padrão e usuário admin se não existirem
 * @summary Inicializar sistema
 * {@link /usuarios/initialize-system}
 */
export async function usuariosControllerInitializeSystem(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config


const res = await request<UsuariosControllerInitializeSystemMutationResponse, ResponseErrorConfig<Error>, unknown>({ method : "POST", url : `/usuarios/initialize-system`, ... requestConfig })
return res.data
}

/**
 * @description Cria perfis padrão e usuário admin se não existirem
 * @summary Inicializar sistema
 * {@link /usuarios/initialize-system}
 */
export function useUsuariosControllerInitializeSystem<TContext>(options: 
  {
    mutation?: UseMutationOptions<UsuariosControllerInitializeSystemMutationResponse, ResponseErrorConfig<Error>, void, TContext> & { client?: QueryClient },
    client?: Partial<RequestConfig> & { client?: typeof fetch },
  }
   = {}) {
  
          const { mutation = {}, client: config = {} } = options ?? {}
          const { client: queryClient, ...mutationOptions } = mutation;
          const mutationKey = mutationOptions.mutationKey ?? usuariosControllerInitializeSystemMutationKey()
  
          return useMutation<UsuariosControllerInitializeSystemMutationResponse, ResponseErrorConfig<Error>, void, TContext>({
            mutationFn: async() => {
              return usuariosControllerInitializeSystem(config)
            },
            mutationKey,
            ...mutationOptions
          }, queryClient)
      
}