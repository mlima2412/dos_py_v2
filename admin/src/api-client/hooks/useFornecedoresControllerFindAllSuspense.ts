/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/lib/fetch-client'
import type { FornecedoresControllerFindAllQueryResponse, FornecedoresControllerFindAllPathParams } from '../types/FornecedoresControllerFindAll.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/lib/fetch-client'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const fornecedoresControllerFindAllSuspenseQueryKey = (parceiroId: FornecedoresControllerFindAllPathParams['parceiroId']) =>
  [{ url: '/fornecedores/:parceiroId', params: { parceiroId: parceiroId } }] as const

export type FornecedoresControllerFindAllSuspenseQueryKey = ReturnType<typeof fornecedoresControllerFindAllSuspenseQueryKey>

/**
 * @summary Listar todos os fornecedores de um parceiro
 * {@link /fornecedores/:parceiroId}
 */
export async function fornecedoresControllerFindAllSuspense(
  parceiroId: FornecedoresControllerFindAllPathParams['parceiroId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<FornecedoresControllerFindAllQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/fornecedores/${parceiroId}`,
    ...requestConfig,
  })
  return res.data
}

export function fornecedoresControllerFindAllSuspenseQueryOptions(
  parceiroId: FornecedoresControllerFindAllPathParams['parceiroId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = fornecedoresControllerFindAllSuspenseQueryKey(parceiroId)
  return queryOptions<FornecedoresControllerFindAllQueryResponse, ResponseErrorConfig<Error>, FornecedoresControllerFindAllQueryResponse, typeof queryKey>({
    enabled: !!parceiroId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return fornecedoresControllerFindAllSuspense(parceiroId, config)
    },
  })
}

/**
 * @summary Listar todos os fornecedores de um parceiro
 * {@link /fornecedores/:parceiroId}
 */
export function useFornecedoresControllerFindAllSuspense<
  TData = FornecedoresControllerFindAllQueryResponse,
  TQueryKey extends QueryKey = FornecedoresControllerFindAllSuspenseQueryKey,
>(
  parceiroId: FornecedoresControllerFindAllPathParams['parceiroId'],
  options: {
    query?: Partial<UseSuspenseQueryOptions<FornecedoresControllerFindAllQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? fornecedoresControllerFindAllSuspenseQueryKey(parceiroId)

  const query = useSuspenseQuery(
    {
      ...fornecedoresControllerFindAllSuspenseQueryOptions(parceiroId, config),
      queryKey,
      ...queryOptions,
    } as unknown as UseSuspenseQueryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}
