/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { ConferenciaEstoqueControllerRemoveMutationResponse, ConferenciaEstoqueControllerRemovePathParams, ConferenciaEstoqueControllerRemoveHeaderParams, ConferenciaEstoqueControllerRemove400, ConferenciaEstoqueControllerRemove404 } from "../types/ConferenciaEstoqueControllerRemove.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, UseMutationResult, QueryClient } from "@tanstack/react-query";
import { mutationOptions, useMutation } from "@tanstack/react-query";

export const conferenciaEstoqueControllerRemoveMutationKey = () => [{ url: '/conferencia-estoque/:publicId' }] as const

export type ConferenciaEstoqueControllerRemoveMutationKey = ReturnType<typeof conferenciaEstoqueControllerRemoveMutationKey>

/**
 * @summary Remover conferência de estoque
 * {@link /conferencia-estoque/:publicId}
 */
export async function conferenciaEstoqueControllerRemove(publicId: ConferenciaEstoqueControllerRemovePathParams["publicId"], headers: ConferenciaEstoqueControllerRemoveHeaderParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<ConferenciaEstoqueControllerRemoveMutationResponse, ResponseErrorConfig<ConferenciaEstoqueControllerRemove400 | ConferenciaEstoqueControllerRemove404>, unknown>({ method : "DELETE", url : `/conferencia-estoque/${publicId}`, ... requestConfig, headers : { ...headers, ...requestConfig.headers } })  
  return res.data
}

export function conferenciaEstoqueControllerRemoveMutationOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const mutationKey = conferenciaEstoqueControllerRemoveMutationKey()
  return mutationOptions<ConferenciaEstoqueControllerRemoveMutationResponse, ResponseErrorConfig<ConferenciaEstoqueControllerRemove400 | ConferenciaEstoqueControllerRemove404>, {publicId: ConferenciaEstoqueControllerRemovePathParams["publicId"], headers: ConferenciaEstoqueControllerRemoveHeaderParams}, typeof mutationKey>({
    mutationKey,
    mutationFn: async({ publicId, headers }) => {
      return conferenciaEstoqueControllerRemove(publicId, headers, config)
    },
  })
}

/**
 * @summary Remover conferência de estoque
 * {@link /conferencia-estoque/:publicId}
 */
export function useConferenciaEstoqueControllerRemove<TContext>(options: 
{
  mutation?: UseMutationOptions<ConferenciaEstoqueControllerRemoveMutationResponse, ResponseErrorConfig<ConferenciaEstoqueControllerRemove400 | ConferenciaEstoqueControllerRemove404>, {publicId: ConferenciaEstoqueControllerRemovePathParams["publicId"], headers: ConferenciaEstoqueControllerRemoveHeaderParams}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? conferenciaEstoqueControllerRemoveMutationKey()

  const baseOptions = conferenciaEstoqueControllerRemoveMutationOptions(config) as UseMutationOptions<ConferenciaEstoqueControllerRemoveMutationResponse, ResponseErrorConfig<ConferenciaEstoqueControllerRemove400 | ConferenciaEstoqueControllerRemove404>, {publicId: ConferenciaEstoqueControllerRemovePathParams["publicId"], headers: ConferenciaEstoqueControllerRemoveHeaderParams}, TContext>

  return useMutation<ConferenciaEstoqueControllerRemoveMutationResponse, ResponseErrorConfig<ConferenciaEstoqueControllerRemove400 | ConferenciaEstoqueControllerRemove404>, {publicId: ConferenciaEstoqueControllerRemovePathParams["publicId"], headers: ConferenciaEstoqueControllerRemoveHeaderParams}, TContext>({
    ...baseOptions,
    mutationKey,
    ...mutationOptions,
  }, queryClient) as UseMutationResult<ConferenciaEstoqueControllerRemoveMutationResponse, ResponseErrorConfig<ConferenciaEstoqueControllerRemove400 | ConferenciaEstoqueControllerRemove404>, {publicId: ConferenciaEstoqueControllerRemovePathParams["publicId"], headers: ConferenciaEstoqueControllerRemoveHeaderParams}, TContext>
}