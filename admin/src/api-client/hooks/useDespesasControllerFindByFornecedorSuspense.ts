/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/lib/fetch-client'
import type {
  DespesasControllerFindByFornecedorQueryResponse,
  DespesasControllerFindByFornecedorPathParams,
} from '../types/DespesasControllerFindByFornecedor.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/lib/fetch-client'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const despesasControllerFindByFornecedorSuspenseQueryKey = (fornecedorId: DespesasControllerFindByFornecedorPathParams['fornecedorId']) =>
  [{ url: '/despesas/fornecedor/:fornecedorId', params: { fornecedorId: fornecedorId } }] as const

export type DespesasControllerFindByFornecedorSuspenseQueryKey = ReturnType<typeof despesasControllerFindByFornecedorSuspenseQueryKey>

/**
 * @summary Listar despesas por fornecedor
 * {@link /despesas/fornecedor/:fornecedorId}
 */
export async function despesasControllerFindByFornecedorSuspense(
  fornecedorId: DespesasControllerFindByFornecedorPathParams['fornecedorId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<DespesasControllerFindByFornecedorQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/despesas/fornecedor/${fornecedorId}`,
    ...requestConfig,
  })
  return res.data
}

export function despesasControllerFindByFornecedorSuspenseQueryOptions(
  fornecedorId: DespesasControllerFindByFornecedorPathParams['fornecedorId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = despesasControllerFindByFornecedorSuspenseQueryKey(fornecedorId)
  return queryOptions<
    DespesasControllerFindByFornecedorQueryResponse,
    ResponseErrorConfig<Error>,
    DespesasControllerFindByFornecedorQueryResponse,
    typeof queryKey
  >({
    enabled: !!fornecedorId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return despesasControllerFindByFornecedorSuspense(fornecedorId, config)
    },
  })
}

/**
 * @summary Listar despesas por fornecedor
 * {@link /despesas/fornecedor/:fornecedorId}
 */
export function useDespesasControllerFindByFornecedorSuspense<
  TData = DespesasControllerFindByFornecedorQueryResponse,
  TQueryKey extends QueryKey = DespesasControllerFindByFornecedorSuspenseQueryKey,
>(
  fornecedorId: DespesasControllerFindByFornecedorPathParams['fornecedorId'],
  options: {
    query?: Partial<UseSuspenseQueryOptions<DespesasControllerFindByFornecedorQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? despesasControllerFindByFornecedorSuspenseQueryKey(fornecedorId)

  const query = useSuspenseQuery(
    {
      ...despesasControllerFindByFornecedorSuspenseQueryOptions(fornecedorId, config),
      queryKey,
      ...queryOptions,
    } as unknown as UseSuspenseQueryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}