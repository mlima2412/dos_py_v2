/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { TransferenciaEstoqueControllerFindOneQueryResponse, TransferenciaEstoqueControllerFindOnePathParams, TransferenciaEstoqueControllerFindOneHeaderParams, TransferenciaEstoqueControllerFindOne404 } from "../types/TransferenciaEstoqueControllerFindOne.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const transferenciaEstoqueControllerFindOneQueryKey = (publicId: TransferenciaEstoqueControllerFindOnePathParams["publicId"]) =>   [{ url: '/transferencia-estoque/:publicId', params: {publicId:publicId} }] as const

export type TransferenciaEstoqueControllerFindOneQueryKey = ReturnType<typeof transferenciaEstoqueControllerFindOneQueryKey>

/**
 * @description Retorna uma transferência de estoque específica pelo seu publicId, incluindo todos os itens e movimentos relacionados. Filtra pelo parceiro especificado no header.
 * @summary Buscar transferência por Public ID
 * {@link /transferencia-estoque/:publicId}
 */
export async function transferenciaEstoqueControllerFindOne(publicId: TransferenciaEstoqueControllerFindOnePathParams["publicId"], headers: TransferenciaEstoqueControllerFindOneHeaderParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config


const res = await request<TransferenciaEstoqueControllerFindOneQueryResponse, ResponseErrorConfig<TransferenciaEstoqueControllerFindOne404>, unknown>({ method : "GET", url : `/transferencia-estoque/${publicId}`, ... requestConfig, headers : { ...headers, ...requestConfig.headers } })
return res.data
}

export function transferenciaEstoqueControllerFindOneQueryOptions(publicId: TransferenciaEstoqueControllerFindOnePathParams["publicId"], headers: TransferenciaEstoqueControllerFindOneHeaderParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  
        const queryKey = transferenciaEstoqueControllerFindOneQueryKey(publicId)
        return queryOptions<TransferenciaEstoqueControllerFindOneQueryResponse, ResponseErrorConfig<TransferenciaEstoqueControllerFindOne404>, TransferenciaEstoqueControllerFindOneQueryResponse, typeof queryKey>({
         enabled: !!(publicId),
         queryKey,
         queryFn: async ({ signal }) => {
            config.signal = signal
            return transferenciaEstoqueControllerFindOne(publicId, headers, config)
         },
        })
  
}

/**
 * @description Retorna uma transferência de estoque específica pelo seu publicId, incluindo todos os itens e movimentos relacionados. Filtra pelo parceiro especificado no header.
 * @summary Buscar transferência por Public ID
 * {@link /transferencia-estoque/:publicId}
 */
export function useTransferenciaEstoqueControllerFindOne<TData = TransferenciaEstoqueControllerFindOneQueryResponse, TQueryData = TransferenciaEstoqueControllerFindOneQueryResponse, TQueryKey extends QueryKey = TransferenciaEstoqueControllerFindOneQueryKey>(publicId: TransferenciaEstoqueControllerFindOnePathParams["publicId"], headers: TransferenciaEstoqueControllerFindOneHeaderParams, options: 
  {
    query?: Partial<QueryObserverOptions<TransferenciaEstoqueControllerFindOneQueryResponse, ResponseErrorConfig<TransferenciaEstoqueControllerFindOne404>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  }
   = {}) {
  
         const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
         const queryKey = queryOptions?.queryKey ?? transferenciaEstoqueControllerFindOneQueryKey(publicId)
  
         const query = useQuery({
          ...transferenciaEstoqueControllerFindOneQueryOptions(publicId, headers, config),
          queryKey,
          ...queryOptions
         } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<TransferenciaEstoqueControllerFindOne404>> & { queryKey: TQueryKey }
  
         query.queryKey = queryKey as TQueryKey
  
         return query
         
}