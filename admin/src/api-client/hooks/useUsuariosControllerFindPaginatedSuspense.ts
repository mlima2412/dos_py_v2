/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { UsuariosControllerFindPaginatedQueryResponse, UsuariosControllerFindPaginatedQueryParams } from "../types/UsuariosControllerFindPaginated.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from "@tanstack/react-query";
import { queryOptions, useSuspenseQuery } from "@tanstack/react-query";

export const usuariosControllerFindPaginatedSuspenseQueryKey = (params: UsuariosControllerFindPaginatedQueryParams) =>   [{ url: '/usuarios/paginated' }, ...(params ? [params] : [])] as const

export type UsuariosControllerFindPaginatedSuspenseQueryKey = ReturnType<typeof usuariosControllerFindPaginatedSuspenseQueryKey>

/**
 * @summary Listar usuários com paginação, busca e filtros
 * {@link /usuarios/paginated}
 */
export async function usuariosControllerFindPaginatedSuspense(params: UsuariosControllerFindPaginatedQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config


const res = await request<UsuariosControllerFindPaginatedQueryResponse, ResponseErrorConfig<Error>, unknown>({ method : "GET", url : `/usuarios/paginated`, params, ... requestConfig })
return res.data
}

export function usuariosControllerFindPaginatedSuspenseQueryOptions(params: UsuariosControllerFindPaginatedQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  
        const queryKey = usuariosControllerFindPaginatedSuspenseQueryKey(params)
        return queryOptions<UsuariosControllerFindPaginatedQueryResponse, ResponseErrorConfig<Error>, UsuariosControllerFindPaginatedQueryResponse, typeof queryKey>({
         enabled: !!(params),
         queryKey,
         queryFn: async ({ signal }) => {
            config.signal = signal
            return usuariosControllerFindPaginatedSuspense(params, config)
         },
        })
  
}

/**
 * @summary Listar usuários com paginação, busca e filtros
 * {@link /usuarios/paginated}
 */
export function useUsuariosControllerFindPaginatedSuspense<TData = UsuariosControllerFindPaginatedQueryResponse, TQueryKey extends QueryKey = UsuariosControllerFindPaginatedSuspenseQueryKey>(params: UsuariosControllerFindPaginatedQueryParams, options: 
  {
    query?: Partial<UseSuspenseQueryOptions<UsuariosControllerFindPaginatedQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & { client?: QueryClient },
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  }
   = {}) {
  
         const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
         const queryKey = queryOptions?.queryKey ?? usuariosControllerFindPaginatedSuspenseQueryKey(params)
  
         const query = useSuspenseQuery({
          ...usuariosControllerFindPaginatedSuspenseQueryOptions(params, config),
          queryKey,
          ...queryOptions
         } as unknown as UseSuspenseQueryOptions, queryClient) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }
  
         query.queryKey = queryKey as TQueryKey
  
         return query
         
}