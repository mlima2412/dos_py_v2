/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/lib/fetch-client'
import type {
  FornecedoresControllerUpdateMutationRequest,
  FornecedoresControllerUpdateMutationResponse,
  FornecedoresControllerUpdatePathParams,
  FornecedoresControllerUpdate404,
  FornecedoresControllerUpdate409,
} from '../types/FornecedoresControllerUpdate.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/lib/fetch-client'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const fornecedoresControllerUpdateMutationKey = () => [{ url: '/fornecedores/{publicId}' }] as const

export type FornecedoresControllerUpdateMutationKey = ReturnType<typeof fornecedoresControllerUpdateMutationKey>

/**
 * @summary Atualizar dados do fornecedor
 * {@link /fornecedores/:publicId}
 */
export async function fornecedoresControllerUpdate(
  publicId: FornecedoresControllerUpdatePathParams['publicId'],
  data?: FornecedoresControllerUpdateMutationRequest,
  config: Partial<RequestConfig<FornecedoresControllerUpdateMutationRequest>> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<
    FornecedoresControllerUpdateMutationResponse,
    ResponseErrorConfig<FornecedoresControllerUpdate404 | FornecedoresControllerUpdate409>,
    FornecedoresControllerUpdateMutationRequest
  >({ method: 'PATCH', url: `/fornecedores/${publicId}`, data: requestData, ...requestConfig })
  return res.data
}

/**
 * @summary Atualizar dados do fornecedor
 * {@link /fornecedores/:publicId}
 */
export function useFornecedoresControllerUpdate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      FornecedoresControllerUpdateMutationResponse,
      ResponseErrorConfig<FornecedoresControllerUpdate404 | FornecedoresControllerUpdate409>,
      { publicId: FornecedoresControllerUpdatePathParams['publicId']; data?: FornecedoresControllerUpdateMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<FornecedoresControllerUpdateMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? fornecedoresControllerUpdateMutationKey()

  return useMutation<
    FornecedoresControllerUpdateMutationResponse,
    ResponseErrorConfig<FornecedoresControllerUpdate404 | FornecedoresControllerUpdate409>,
    { publicId: FornecedoresControllerUpdatePathParams['publicId']; data?: FornecedoresControllerUpdateMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ publicId, data }) => {
        return fornecedoresControllerUpdate(publicId, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}