/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { PedidoCompraControllerCreateMutationRequest, PedidoCompraControllerCreateMutationResponse, PedidoCompraControllerCreateHeaderParams, PedidoCompraControllerCreate400, PedidoCompraControllerCreate404 } from "../types/PedidoCompraControllerCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, UseMutationResult, QueryClient } from "@tanstack/react-query";
import { mutationOptions, useMutation } from "@tanstack/react-query";

export const pedidoCompraControllerCreateMutationKey = () => [{ url: '/pedido-compra' }] as const

export type PedidoCompraControllerCreateMutationKey = ReturnType<typeof pedidoCompraControllerCreateMutationKey>

/**
 * @summary Criar novo pedido de compra
 * {@link /pedido-compra}
 */
export async function pedidoCompraControllerCreate(data: PedidoCompraControllerCreateMutationRequest, headers: PedidoCompraControllerCreateHeaderParams, config: Partial<RequestConfig<PedidoCompraControllerCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<PedidoCompraControllerCreateMutationResponse, ResponseErrorConfig<PedidoCompraControllerCreate400 | PedidoCompraControllerCreate404>, PedidoCompraControllerCreateMutationRequest>({ method : "POST", url : `/pedido-compra`, data : requestData, ... requestConfig, headers : { ...headers, ...requestConfig.headers } })  
  return res.data
}

export function pedidoCompraControllerCreateMutationOptions(config: Partial<RequestConfig<PedidoCompraControllerCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const mutationKey = pedidoCompraControllerCreateMutationKey()
  return mutationOptions<PedidoCompraControllerCreateMutationResponse, ResponseErrorConfig<PedidoCompraControllerCreate400 | PedidoCompraControllerCreate404>, {data: PedidoCompraControllerCreateMutationRequest, headers: PedidoCompraControllerCreateHeaderParams}, typeof mutationKey>({
    mutationKey,
    mutationFn: async({ data, headers }) => {
      return pedidoCompraControllerCreate(data, headers, config)
    },
  })
}

/**
 * @summary Criar novo pedido de compra
 * {@link /pedido-compra}
 */
export function usePedidoCompraControllerCreate<TContext>(options: 
{
  mutation?: UseMutationOptions<PedidoCompraControllerCreateMutationResponse, ResponseErrorConfig<PedidoCompraControllerCreate400 | PedidoCompraControllerCreate404>, {data: PedidoCompraControllerCreateMutationRequest, headers: PedidoCompraControllerCreateHeaderParams}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<PedidoCompraControllerCreateMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? pedidoCompraControllerCreateMutationKey()

  const baseOptions = pedidoCompraControllerCreateMutationOptions(config) as UseMutationOptions<PedidoCompraControllerCreateMutationResponse, ResponseErrorConfig<PedidoCompraControllerCreate400 | PedidoCompraControllerCreate404>, {data: PedidoCompraControllerCreateMutationRequest, headers: PedidoCompraControllerCreateHeaderParams}, TContext>

  return useMutation<PedidoCompraControllerCreateMutationResponse, ResponseErrorConfig<PedidoCompraControllerCreate400 | PedidoCompraControllerCreate404>, {data: PedidoCompraControllerCreateMutationRequest, headers: PedidoCompraControllerCreateHeaderParams}, TContext>({
    ...baseOptions,
    mutationKey,
    ...mutationOptions,
  }, queryClient) as UseMutationResult<PedidoCompraControllerCreateMutationResponse, ResponseErrorConfig<PedidoCompraControllerCreate400 | PedidoCompraControllerCreate404>, {data: PedidoCompraControllerCreateMutationRequest, headers: PedidoCompraControllerCreateHeaderParams}, TContext>
}