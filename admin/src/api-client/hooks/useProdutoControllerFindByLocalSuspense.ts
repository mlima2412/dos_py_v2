/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { ProdutoControllerFindByLocalQueryResponse, ProdutoControllerFindByLocalPathParams, ProdutoControllerFindByLocalQueryParams, ProdutoControllerFindByLocalHeaderParams, ProdutoControllerFindByLocal404 } from "../types/ProdutoControllerFindByLocal.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from "@tanstack/react-query";
import { queryOptions, useSuspenseQuery } from "@tanstack/react-query";

export const produtoControllerFindByLocalSuspenseQueryKey = (localId: ProdutoControllerFindByLocalPathParams["localId"], params?: ProdutoControllerFindByLocalQueryParams) =>   [{ url: '/produto/local/:localId', params: {localId:localId} }, ...(params ? [params] : [])] as const

export type ProdutoControllerFindByLocalSuspenseQueryKey = ReturnType<typeof produtoControllerFindByLocalSuspenseQueryKey>

/**
 * @description Lista todos os produtos que possuem SKUs com estoque em um local específico
 * @summary Listar produtos por local de estoque
 * {@link /produto/local/:localId}
 */
export async function produtoControllerFindByLocalSuspense(localId: ProdutoControllerFindByLocalPathParams["localId"], headers: ProdutoControllerFindByLocalHeaderParams, params?: ProdutoControllerFindByLocalQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config


const res = await request<ProdutoControllerFindByLocalQueryResponse, ResponseErrorConfig<ProdutoControllerFindByLocal404>, unknown>({ method : "GET", url : `/produto/local/${localId}`, params, ... requestConfig, headers : { ...headers, ...requestConfig.headers } })
return res.data
}

export function produtoControllerFindByLocalSuspenseQueryOptions(localId: ProdutoControllerFindByLocalPathParams["localId"], headers: ProdutoControllerFindByLocalHeaderParams, params?: ProdutoControllerFindByLocalQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  
        const queryKey = produtoControllerFindByLocalSuspenseQueryKey(localId, params)
        return queryOptions<ProdutoControllerFindByLocalQueryResponse, ResponseErrorConfig<ProdutoControllerFindByLocal404>, ProdutoControllerFindByLocalQueryResponse, typeof queryKey>({
         enabled: !!(localId),
         queryKey,
         queryFn: async ({ signal }) => {
            config.signal = signal
            return produtoControllerFindByLocalSuspense(localId, headers, params, config)
         },
        })
  
}

/**
 * @description Lista todos os produtos que possuem SKUs com estoque em um local específico
 * @summary Listar produtos por local de estoque
 * {@link /produto/local/:localId}
 */
export function useProdutoControllerFindByLocalSuspense<TData = ProdutoControllerFindByLocalQueryResponse, TQueryKey extends QueryKey = ProdutoControllerFindByLocalSuspenseQueryKey>(localId: ProdutoControllerFindByLocalPathParams["localId"], headers: ProdutoControllerFindByLocalHeaderParams, params?: ProdutoControllerFindByLocalQueryParams, options: 
  {
    query?: Partial<UseSuspenseQueryOptions<ProdutoControllerFindByLocalQueryResponse, ResponseErrorConfig<ProdutoControllerFindByLocal404>, TData, TQueryKey>> & { client?: QueryClient },
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  }
   = {}) {
  
         const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
         const queryKey = queryOptions?.queryKey ?? produtoControllerFindByLocalSuspenseQueryKey(localId, params)
  
         const query = useSuspenseQuery({
          ...produtoControllerFindByLocalSuspenseQueryOptions(localId, headers, params, config),
          queryKey,
          ...queryOptions
         } as unknown as UseSuspenseQueryOptions, queryClient) as UseSuspenseQueryResult<TData, ResponseErrorConfig<ProdutoControllerFindByLocal404>> & { queryKey: TQueryKey }
  
         query.queryKey = queryKey as TQueryKey
  
         return query
         
}