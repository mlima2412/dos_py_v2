/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { FormaPagamentoControllerCreateMutationRequest, FormaPagamentoControllerCreateMutationResponse, FormaPagamentoControllerCreateHeaderParams, FormaPagamentoControllerCreate400 } from "../types/FormaPagamentoControllerCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const formaPagamentoControllerCreateMutationKey = () =>   [{"url":"/forma-pagamento"}] as const

export type FormaPagamentoControllerCreateMutationKey = ReturnType<typeof formaPagamentoControllerCreateMutationKey>

/**
 * @summary Criar nova forma de pagamento
 * {@link /forma-pagamento}
 */
export async function formaPagamentoControllerCreate(data: FormaPagamentoControllerCreateMutationRequest, headers: FormaPagamentoControllerCreateHeaderParams, config: Partial<RequestConfig<FormaPagamentoControllerCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config

const requestData = data
const res = await request<FormaPagamentoControllerCreateMutationResponse, ResponseErrorConfig<FormaPagamentoControllerCreate400>, FormaPagamentoControllerCreateMutationRequest>({ method : "POST", url : `/forma-pagamento`, data : requestData, ... requestConfig, headers : { ...headers, ...requestConfig.headers } })
return res.data
}

/**
 * @summary Criar nova forma de pagamento
 * {@link /forma-pagamento}
 */
export function useFormaPagamentoControllerCreate<TContext>(options: 
  {
    mutation?: UseMutationOptions<FormaPagamentoControllerCreateMutationResponse, ResponseErrorConfig<FormaPagamentoControllerCreate400>, {data: FormaPagamentoControllerCreateMutationRequest, headers: FormaPagamentoControllerCreateHeaderParams}, TContext> & { client?: QueryClient },
    client?: Partial<RequestConfig<FormaPagamentoControllerCreateMutationRequest>> & { client?: typeof fetch },
  }
   = {}) {
  
          const { mutation = {}, client: config = {} } = options ?? {}
          const { client: queryClient, ...mutationOptions } = mutation;
          const mutationKey = mutationOptions.mutationKey ?? formaPagamentoControllerCreateMutationKey()
  
          return useMutation<FormaPagamentoControllerCreateMutationResponse, ResponseErrorConfig<FormaPagamentoControllerCreate400>, {data: FormaPagamentoControllerCreateMutationRequest, headers: FormaPagamentoControllerCreateHeaderParams}, TContext>({
            mutationFn: async({ data, headers }) => {
              return formaPagamentoControllerCreate(data, headers, config)
            },
            mutationKey,
            ...mutationOptions
          }, queryClient)
      
}