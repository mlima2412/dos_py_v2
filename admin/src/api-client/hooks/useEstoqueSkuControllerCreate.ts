/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { EstoqueSkuControllerCreateMutationRequest, EstoqueSkuControllerCreateMutationResponse, EstoqueSkuControllerCreate400, EstoqueSkuControllerCreate404, EstoqueSkuControllerCreate409 } from "../types/EstoqueSkuControllerCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const estoqueSkuControllerCreateMutationKey = () =>   [{"url":"/estoque-sku"}] as const

export type EstoqueSkuControllerCreateMutationKey = ReturnType<typeof estoqueSkuControllerCreateMutationKey>

/**
 * @summary Criar novo registro de estoque SKU
 * {@link /estoque-sku}
 */
export async function estoqueSkuControllerCreate(data: EstoqueSkuControllerCreateMutationRequest, config: Partial<RequestConfig<EstoqueSkuControllerCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config

const requestData = data
const res = await request<EstoqueSkuControllerCreateMutationResponse, ResponseErrorConfig<EstoqueSkuControllerCreate400 | EstoqueSkuControllerCreate404 | EstoqueSkuControllerCreate409>, EstoqueSkuControllerCreateMutationRequest>({ method : "POST", url : `/estoque-sku`, data : requestData, ... requestConfig })
return res.data
}

/**
 * @summary Criar novo registro de estoque SKU
 * {@link /estoque-sku}
 */
export function useEstoqueSkuControllerCreate<TContext>(options: 
  {
    mutation?: UseMutationOptions<EstoqueSkuControllerCreateMutationResponse, ResponseErrorConfig<EstoqueSkuControllerCreate400 | EstoqueSkuControllerCreate404 | EstoqueSkuControllerCreate409>, {data: EstoqueSkuControllerCreateMutationRequest}, TContext> & { client?: QueryClient },
    client?: Partial<RequestConfig<EstoqueSkuControllerCreateMutationRequest>> & { client?: typeof fetch },
  }
   = {}) {
  
          const { mutation = {}, client: config = {} } = options ?? {}
          const { client: queryClient, ...mutationOptions } = mutation;
          const mutationKey = mutationOptions.mutationKey ?? estoqueSkuControllerCreateMutationKey()
  
          return useMutation<EstoqueSkuControllerCreateMutationResponse, ResponseErrorConfig<EstoqueSkuControllerCreate400 | EstoqueSkuControllerCreate404 | EstoqueSkuControllerCreate409>, {data: EstoqueSkuControllerCreateMutationRequest}, TContext>({
            mutationFn: async({ data }) => {
              return estoqueSkuControllerCreate(data, config)
            },
            mutationKey,
            ...mutationOptions
          }, queryClient)
      
}