/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { RollupClassificacaoControllerGetCategoriaMesQueryResponse, RollupClassificacaoControllerGetCategoriaMesQueryParams } from "../types/RollupClassificacaoControllerGetCategoriaMes.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from "@tanstack/react-query";
import { queryOptions, useSuspenseQuery } from "@tanstack/react-query";

export const rollupClassificacaoControllerGetCategoriaMesSuspenseQueryKey = (params: RollupClassificacaoControllerGetCategoriaMesQueryParams) =>   [{ url: '/dashboard/despesas/classificacao/categoria-mes' }, ...(params ? [params] : [])] as const

export type RollupClassificacaoControllerGetCategoriaMesSuspenseQueryKey = ReturnType<typeof rollupClassificacaoControllerGetCategoriaMesSuspenseQueryKey>

/**
 * @summary Obter resumo mensal de despesas por categoria e média mensal
 * {@link /dashboard/despesas/classificacao/categoria-mes}
 */
export async function rollupClassificacaoControllerGetCategoriaMesSuspense(params: RollupClassificacaoControllerGetCategoriaMesQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config


const res = await request<RollupClassificacaoControllerGetCategoriaMesQueryResponse, ResponseErrorConfig<Error>, unknown>({ method : "GET", url : `/dashboard/despesas/classificacao/categoria-mes`, params, ... requestConfig })
return res.data
}

export function rollupClassificacaoControllerGetCategoriaMesSuspenseQueryOptions(params: RollupClassificacaoControllerGetCategoriaMesQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  
        const queryKey = rollupClassificacaoControllerGetCategoriaMesSuspenseQueryKey(params)
        return queryOptions<RollupClassificacaoControllerGetCategoriaMesQueryResponse, ResponseErrorConfig<Error>, RollupClassificacaoControllerGetCategoriaMesQueryResponse, typeof queryKey>({
         enabled: !!(params),
         queryKey,
         queryFn: async ({ signal }) => {
            config.signal = signal
            return rollupClassificacaoControllerGetCategoriaMesSuspense(params, config)
         },
        })
  
}

/**
 * @summary Obter resumo mensal de despesas por categoria e média mensal
 * {@link /dashboard/despesas/classificacao/categoria-mes}
 */
export function useRollupClassificacaoControllerGetCategoriaMesSuspense<TData = RollupClassificacaoControllerGetCategoriaMesQueryResponse, TQueryKey extends QueryKey = RollupClassificacaoControllerGetCategoriaMesSuspenseQueryKey>(params: RollupClassificacaoControllerGetCategoriaMesQueryParams, options: 
  {
    query?: Partial<UseSuspenseQueryOptions<RollupClassificacaoControllerGetCategoriaMesQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & { client?: QueryClient },
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  }
   = {}) {
  
         const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
         const queryKey = queryOptions?.queryKey ?? rollupClassificacaoControllerGetCategoriaMesSuspenseQueryKey(params)
  
         const query = useSuspenseQuery({
          ...rollupClassificacaoControllerGetCategoriaMesSuspenseQueryOptions(params, config),
          queryKey,
          ...queryOptions
         } as unknown as UseSuspenseQueryOptions, queryClient) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }
  
         query.queryKey = queryKey as TQueryKey
  
         return query
         
}