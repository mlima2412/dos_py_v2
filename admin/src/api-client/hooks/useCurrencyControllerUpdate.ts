/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/lib/fetch-client'
import type {
  CurrencyControllerUpdateMutationRequest,
  CurrencyControllerUpdateMutationResponse,
  CurrencyControllerUpdatePathParams,
  CurrencyControllerUpdate400,
  CurrencyControllerUpdate401,
  CurrencyControllerUpdate404,
  CurrencyControllerUpdate409,
} from '../types/CurrencyControllerUpdate.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/lib/fetch-client'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const currencyControllerUpdateMutationKey = () => [{ url: '/currency/{publicId}' }] as const

export type CurrencyControllerUpdateMutationKey = ReturnType<typeof currencyControllerUpdateMutationKey>

/**
 * @summary Atualizar moeda
 * {@link /currency/:publicId}
 */
export async function currencyControllerUpdate(
  publicId: CurrencyControllerUpdatePathParams['publicId'],
  data?: CurrencyControllerUpdateMutationRequest,
  config: Partial<RequestConfig<CurrencyControllerUpdateMutationRequest>> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<
    CurrencyControllerUpdateMutationResponse,
    ResponseErrorConfig<CurrencyControllerUpdate400 | CurrencyControllerUpdate401 | CurrencyControllerUpdate404 | CurrencyControllerUpdate409>,
    CurrencyControllerUpdateMutationRequest
  >({ method: 'PATCH', url: `/currency/${publicId}`, data: requestData, ...requestConfig })
  return res.data
}

/**
 * @summary Atualizar moeda
 * {@link /currency/:publicId}
 */
export function useCurrencyControllerUpdate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CurrencyControllerUpdateMutationResponse,
      ResponseErrorConfig<CurrencyControllerUpdate400 | CurrencyControllerUpdate401 | CurrencyControllerUpdate404 | CurrencyControllerUpdate409>,
      { publicId: CurrencyControllerUpdatePathParams['publicId']; data?: CurrencyControllerUpdateMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CurrencyControllerUpdateMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? currencyControllerUpdateMutationKey()

  return useMutation<
    CurrencyControllerUpdateMutationResponse,
    ResponseErrorConfig<CurrencyControllerUpdate400 | CurrencyControllerUpdate401 | CurrencyControllerUpdate404 | CurrencyControllerUpdate409>,
    { publicId: CurrencyControllerUpdatePathParams['publicId']; data?: CurrencyControllerUpdateMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ publicId, data }) => {
        return currencyControllerUpdate(publicId, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}