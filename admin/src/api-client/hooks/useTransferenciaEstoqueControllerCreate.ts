/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { TransferenciaEstoqueControllerCreateMutationRequest, TransferenciaEstoqueControllerCreateMutationResponse, TransferenciaEstoqueControllerCreateHeaderParams, TransferenciaEstoqueControllerCreate400, TransferenciaEstoqueControllerCreate404 } from "../types/TransferenciaEstoqueControllerCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, UseMutationResult, QueryClient } from "@tanstack/react-query";
import { mutationOptions, useMutation } from "@tanstack/react-query";

export const transferenciaEstoqueControllerCreateMutationKey = () => [{ url: '/transferencia-estoque' }] as const

export type TransferenciaEstoqueControllerCreateMutationKey = ReturnType<typeof transferenciaEstoqueControllerCreateMutationKey>

/**
 * @description Cria uma nova transferência de estoque entre locais. O usuário que cria a transferência é obtido automaticamente do token de autenticação e o parceiro do header x-parceiro-id.
 * @summary Criar transferência de estoque
 * {@link /transferencia-estoque}
 */
export async function transferenciaEstoqueControllerCreate(data: TransferenciaEstoqueControllerCreateMutationRequest, headers: TransferenciaEstoqueControllerCreateHeaderParams, config: Partial<RequestConfig<TransferenciaEstoqueControllerCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<TransferenciaEstoqueControllerCreateMutationResponse, ResponseErrorConfig<TransferenciaEstoqueControllerCreate400 | TransferenciaEstoqueControllerCreate404>, TransferenciaEstoqueControllerCreateMutationRequest>({ method : "POST", url : `/transferencia-estoque`, data : requestData, ... requestConfig, headers : { ...headers, ...requestConfig.headers } })  
  return res.data
}

export function transferenciaEstoqueControllerCreateMutationOptions(config: Partial<RequestConfig<TransferenciaEstoqueControllerCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const mutationKey = transferenciaEstoqueControllerCreateMutationKey()
  return mutationOptions<TransferenciaEstoqueControllerCreateMutationResponse, ResponseErrorConfig<TransferenciaEstoqueControllerCreate400 | TransferenciaEstoqueControllerCreate404>, {data: TransferenciaEstoqueControllerCreateMutationRequest, headers: TransferenciaEstoqueControllerCreateHeaderParams}, typeof mutationKey>({
    mutationKey,
    mutationFn: async({ data, headers }) => {
      return transferenciaEstoqueControllerCreate(data, headers, config)
    },
  })
}

/**
 * @description Cria uma nova transferência de estoque entre locais. O usuário que cria a transferência é obtido automaticamente do token de autenticação e o parceiro do header x-parceiro-id.
 * @summary Criar transferência de estoque
 * {@link /transferencia-estoque}
 */
export function useTransferenciaEstoqueControllerCreate<TContext>(options: 
{
  mutation?: UseMutationOptions<TransferenciaEstoqueControllerCreateMutationResponse, ResponseErrorConfig<TransferenciaEstoqueControllerCreate400 | TransferenciaEstoqueControllerCreate404>, {data: TransferenciaEstoqueControllerCreateMutationRequest, headers: TransferenciaEstoqueControllerCreateHeaderParams}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<TransferenciaEstoqueControllerCreateMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? transferenciaEstoqueControllerCreateMutationKey()

  const baseOptions = transferenciaEstoqueControllerCreateMutationOptions(config) as UseMutationOptions<TransferenciaEstoqueControllerCreateMutationResponse, ResponseErrorConfig<TransferenciaEstoqueControllerCreate400 | TransferenciaEstoqueControllerCreate404>, {data: TransferenciaEstoqueControllerCreateMutationRequest, headers: TransferenciaEstoqueControllerCreateHeaderParams}, TContext>

  return useMutation<TransferenciaEstoqueControllerCreateMutationResponse, ResponseErrorConfig<TransferenciaEstoqueControllerCreate400 | TransferenciaEstoqueControllerCreate404>, {data: TransferenciaEstoqueControllerCreateMutationRequest, headers: TransferenciaEstoqueControllerCreateHeaderParams}, TContext>({
    ...baseOptions,
    mutationKey,
    ...mutationOptions,
  }, queryClient) as UseMutationResult<TransferenciaEstoqueControllerCreateMutationResponse, ResponseErrorConfig<TransferenciaEstoqueControllerCreate400 | TransferenciaEstoqueControllerCreate404>, {data: TransferenciaEstoqueControllerCreateMutationRequest, headers: TransferenciaEstoqueControllerCreateHeaderParams}, TContext>
}