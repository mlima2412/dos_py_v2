/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { TransferenciaEstoqueControllerCreateMutationRequest, TransferenciaEstoqueControllerCreateMutationResponse, TransferenciaEstoqueControllerCreate400, TransferenciaEstoqueControllerCreate404 } from "../types/TransferenciaEstoqueControllerCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const transferenciaEstoqueControllerCreateMutationKey = () =>   [{"url":"/transferencia-estoque"}] as const

export type TransferenciaEstoqueControllerCreateMutationKey = ReturnType<typeof transferenciaEstoqueControllerCreateMutationKey>

/**
 * @description Cria uma nova transferência de estoque entre locais. O usuário que cria a transferência é obtido automaticamente do token de autenticação.
 * @summary Criar transferência de estoque
 * {@link /transferencia-estoque}
 */
export async function transferenciaEstoqueControllerCreate(data: TransferenciaEstoqueControllerCreateMutationRequest, config: Partial<RequestConfig<TransferenciaEstoqueControllerCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config

const requestData = data
const res = await request<TransferenciaEstoqueControllerCreateMutationResponse, ResponseErrorConfig<TransferenciaEstoqueControllerCreate400 | TransferenciaEstoqueControllerCreate404>, TransferenciaEstoqueControllerCreateMutationRequest>({ method : "POST", url : `/transferencia-estoque`, data : requestData, ... requestConfig })
return res.data
}

/**
 * @description Cria uma nova transferência de estoque entre locais. O usuário que cria a transferência é obtido automaticamente do token de autenticação.
 * @summary Criar transferência de estoque
 * {@link /transferencia-estoque}
 */
export function useTransferenciaEstoqueControllerCreate<TContext>(options: 
  {
    mutation?: UseMutationOptions<TransferenciaEstoqueControllerCreateMutationResponse, ResponseErrorConfig<TransferenciaEstoqueControllerCreate400 | TransferenciaEstoqueControllerCreate404>, {data: TransferenciaEstoqueControllerCreateMutationRequest}, TContext> & { client?: QueryClient },
    client?: Partial<RequestConfig<TransferenciaEstoqueControllerCreateMutationRequest>> & { client?: typeof fetch },
  }
   = {}) {
  
          const { mutation = {}, client: config = {} } = options ?? {}
          const { client: queryClient, ...mutationOptions } = mutation;
          const mutationKey = mutationOptions.mutationKey ?? transferenciaEstoqueControllerCreateMutationKey()
  
          return useMutation<TransferenciaEstoqueControllerCreateMutationResponse, ResponseErrorConfig<TransferenciaEstoqueControllerCreate400 | TransferenciaEstoqueControllerCreate404>, {data: TransferenciaEstoqueControllerCreateMutationRequest}, TContext>({
            mutationFn: async({ data }) => {
              return transferenciaEstoqueControllerCreate(data, config)
            },
            mutationKey,
            ...mutationOptions
          }, queryClient)
      
}