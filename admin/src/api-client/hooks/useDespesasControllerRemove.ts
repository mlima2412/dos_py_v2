/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { DespesasControllerRemoveMutationResponse, DespesasControllerRemovePathParams, DespesasControllerRemoveHeaderParams, DespesasControllerRemove404 } from "../types/DespesasControllerRemove.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, UseMutationResult, QueryClient } from "@tanstack/react-query";
import { mutationOptions, useMutation } from "@tanstack/react-query";

export const despesasControllerRemoveMutationKey = () => [{ url: '/despesas/:publicId' }] as const

export type DespesasControllerRemoveMutationKey = ReturnType<typeof despesasControllerRemoveMutationKey>

/**
 * @summary Remover despesa
 * {@link /despesas/:publicId}
 */
export async function despesasControllerRemove(publicId: DespesasControllerRemovePathParams["publicId"], headers: DespesasControllerRemoveHeaderParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<DespesasControllerRemoveMutationResponse, ResponseErrorConfig<DespesasControllerRemove404>, unknown>({ method : "DELETE", url : `/despesas/${publicId}`, ... requestConfig, headers : { ...headers, ...requestConfig.headers } })  
  return res.data
}

export function despesasControllerRemoveMutationOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const mutationKey = despesasControllerRemoveMutationKey()
  return mutationOptions<DespesasControllerRemoveMutationResponse, ResponseErrorConfig<DespesasControllerRemove404>, {publicId: DespesasControllerRemovePathParams["publicId"], headers: DespesasControllerRemoveHeaderParams}, typeof mutationKey>({
    mutationKey,
    mutationFn: async({ publicId, headers }) => {
      return despesasControllerRemove(publicId, headers, config)
    },
  })
}

/**
 * @summary Remover despesa
 * {@link /despesas/:publicId}
 */
export function useDespesasControllerRemove<TContext>(options: 
{
  mutation?: UseMutationOptions<DespesasControllerRemoveMutationResponse, ResponseErrorConfig<DespesasControllerRemove404>, {publicId: DespesasControllerRemovePathParams["publicId"], headers: DespesasControllerRemoveHeaderParams}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? despesasControllerRemoveMutationKey()

  const baseOptions = despesasControllerRemoveMutationOptions(config) as UseMutationOptions<DespesasControllerRemoveMutationResponse, ResponseErrorConfig<DespesasControllerRemove404>, {publicId: DespesasControllerRemovePathParams["publicId"], headers: DespesasControllerRemoveHeaderParams}, TContext>

  return useMutation<DespesasControllerRemoveMutationResponse, ResponseErrorConfig<DespesasControllerRemove404>, {publicId: DespesasControllerRemovePathParams["publicId"], headers: DespesasControllerRemoveHeaderParams}, TContext>({
    ...baseOptions,
    mutationKey,
    ...mutationOptions,
  }, queryClient) as UseMutationResult<DespesasControllerRemoveMutationResponse, ResponseErrorConfig<DespesasControllerRemove404>, {publicId: DespesasControllerRemovePathParams["publicId"], headers: DespesasControllerRemoveHeaderParams}, TContext>
}