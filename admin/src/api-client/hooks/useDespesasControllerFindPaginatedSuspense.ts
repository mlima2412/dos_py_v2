/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/lib/fetch-client'
import type { DespesasControllerFindPaginatedQueryResponse, DespesasControllerFindPaginatedQueryParams } from '../types/DespesasControllerFindPaginated.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/lib/fetch-client'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const despesasControllerFindPaginatedSuspenseQueryKey = (params: DespesasControllerFindPaginatedQueryParams) =>
  [{ url: '/despesas/paginated' }, ...(params ? [params] : [])] as const

export type DespesasControllerFindPaginatedSuspenseQueryKey = ReturnType<typeof despesasControllerFindPaginatedSuspenseQueryKey>

/**
 * @summary Listar despesas com paginação, busca e filtros
 * {@link /despesas/paginated}
 */
export async function despesasControllerFindPaginatedSuspense(
  params: DespesasControllerFindPaginatedQueryParams,
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<DespesasControllerFindPaginatedQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/despesas/paginated`,
    params,
    ...requestConfig,
  })
  return res.data
}

export function despesasControllerFindPaginatedSuspenseQueryOptions(
  params: DespesasControllerFindPaginatedQueryParams,
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = despesasControllerFindPaginatedSuspenseQueryKey(params)
  return queryOptions<DespesasControllerFindPaginatedQueryResponse, ResponseErrorConfig<Error>, DespesasControllerFindPaginatedQueryResponse, typeof queryKey>({
    enabled: !!params,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return despesasControllerFindPaginatedSuspense(params, config)
    },
  })
}

/**
 * @summary Listar despesas com paginação, busca e filtros
 * {@link /despesas/paginated}
 */
export function useDespesasControllerFindPaginatedSuspense<
  TData = DespesasControllerFindPaginatedQueryResponse,
  TQueryKey extends QueryKey = DespesasControllerFindPaginatedSuspenseQueryKey,
>(
  params: DespesasControllerFindPaginatedQueryParams,
  options: {
    query?: Partial<UseSuspenseQueryOptions<DespesasControllerFindPaginatedQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? despesasControllerFindPaginatedSuspenseQueryKey(params)

  const query = useSuspenseQuery(
    {
      ...despesasControllerFindPaginatedSuspenseQueryOptions(params, config),
      queryKey,
      ...queryOptions,
    } as unknown as UseSuspenseQueryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}