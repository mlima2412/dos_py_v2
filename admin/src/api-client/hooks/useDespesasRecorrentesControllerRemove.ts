/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/lib/fetch-client'
import type {
  DespesasRecorrentesControllerRemoveMutationResponse,
  DespesasRecorrentesControllerRemovePathParams,
  DespesasRecorrentesControllerRemove401,
  DespesasRecorrentesControllerRemove404,
} from '../types/DespesasRecorrentesControllerRemove.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/lib/fetch-client'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const despesasRecorrentesControllerRemoveMutationKey = () => [{ url: '/despesas-recorrentes/{publicId}' }] as const

export type DespesasRecorrentesControllerRemoveMutationKey = ReturnType<typeof despesasRecorrentesControllerRemoveMutationKey>

/**
 * @summary Remover despesa recorrente
 * {@link /despesas-recorrentes/:publicId}
 */
export async function despesasRecorrentesControllerRemove(
  publicId: DespesasRecorrentesControllerRemovePathParams['publicId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<
    DespesasRecorrentesControllerRemoveMutationResponse,
    ResponseErrorConfig<DespesasRecorrentesControllerRemove401 | DespesasRecorrentesControllerRemove404>,
    unknown
  >({ method: 'DELETE', url: `/despesas-recorrentes/${publicId}`, ...requestConfig })
  return res.data
}

/**
 * @summary Remover despesa recorrente
 * {@link /despesas-recorrentes/:publicId}
 */
export function useDespesasRecorrentesControllerRemove<TContext>(
  options: {
    mutation?: UseMutationOptions<
      DespesasRecorrentesControllerRemoveMutationResponse,
      ResponseErrorConfig<DespesasRecorrentesControllerRemove401 | DespesasRecorrentesControllerRemove404>,
      { publicId: DespesasRecorrentesControllerRemovePathParams['publicId'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? despesasRecorrentesControllerRemoveMutationKey()

  return useMutation<
    DespesasRecorrentesControllerRemoveMutationResponse,
    ResponseErrorConfig<DespesasRecorrentesControllerRemove401 | DespesasRecorrentesControllerRemove404>,
    { publicId: DespesasRecorrentesControllerRemovePathParams['publicId'] },
    TContext
  >(
    {
      mutationFn: async ({ publicId }) => {
        return despesasRecorrentesControllerRemove(publicId, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}