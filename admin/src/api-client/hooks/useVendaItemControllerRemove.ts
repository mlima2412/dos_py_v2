/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { VendaItemControllerRemoveMutationResponse, VendaItemControllerRemovePathParams, VendaItemControllerRemoveQueryParams, VendaItemControllerRemoveHeaderParams, VendaItemControllerRemove400, VendaItemControllerRemove404 } from "../types/VendaItemControllerRemove.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, UseMutationResult, QueryClient } from "@tanstack/react-query";
import { mutationOptions, useMutation } from "@tanstack/react-query";

export const vendaItemControllerRemoveMutationKey = () => [{ url: '/venda-item/:id' }] as const

export type VendaItemControllerRemoveMutationKey = ReturnType<typeof vendaItemControllerRemoveMutationKey>

/**
 * @summary Remover item de venda (apenas se venda estiver PEDIDO)
 * {@link /venda-item/:id}
 */
export async function vendaItemControllerRemove(id: VendaItemControllerRemovePathParams["id"], params: VendaItemControllerRemoveQueryParams, headers: VendaItemControllerRemoveHeaderParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<VendaItemControllerRemoveMutationResponse, ResponseErrorConfig<VendaItemControllerRemove400 | VendaItemControllerRemove404>, unknown>({ method : "DELETE", url : `/venda-item/${id}`, params, ... requestConfig, headers : { ...headers, ...requestConfig.headers } })  
  return res.data
}

export function vendaItemControllerRemoveMutationOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const mutationKey = vendaItemControllerRemoveMutationKey()
  return mutationOptions<VendaItemControllerRemoveMutationResponse, ResponseErrorConfig<VendaItemControllerRemove400 | VendaItemControllerRemove404>, {id: VendaItemControllerRemovePathParams["id"], params: VendaItemControllerRemoveQueryParams, headers: VendaItemControllerRemoveHeaderParams}, typeof mutationKey>({
    mutationKey,
    mutationFn: async({ id, params, headers }) => {
      return vendaItemControllerRemove(id, params, headers, config)
    },
  })
}

/**
 * @summary Remover item de venda (apenas se venda estiver PEDIDO)
 * {@link /venda-item/:id}
 */
export function useVendaItemControllerRemove<TContext>(options: 
{
  mutation?: UseMutationOptions<VendaItemControllerRemoveMutationResponse, ResponseErrorConfig<VendaItemControllerRemove400 | VendaItemControllerRemove404>, {id: VendaItemControllerRemovePathParams["id"], params: VendaItemControllerRemoveQueryParams, headers: VendaItemControllerRemoveHeaderParams}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? vendaItemControllerRemoveMutationKey()

  const baseOptions = vendaItemControllerRemoveMutationOptions(config) as UseMutationOptions<VendaItemControllerRemoveMutationResponse, ResponseErrorConfig<VendaItemControllerRemove400 | VendaItemControllerRemove404>, {id: VendaItemControllerRemovePathParams["id"], params: VendaItemControllerRemoveQueryParams, headers: VendaItemControllerRemoveHeaderParams}, TContext>

  return useMutation<VendaItemControllerRemoveMutationResponse, ResponseErrorConfig<VendaItemControllerRemove400 | VendaItemControllerRemove404>, {id: VendaItemControllerRemovePathParams["id"], params: VendaItemControllerRemoveQueryParams, headers: VendaItemControllerRemoveHeaderParams}, TContext>({
    ...baseOptions,
    mutationKey,
    ...mutationOptions,
  }, queryClient) as UseMutationResult<VendaItemControllerRemoveMutationResponse, ResponseErrorConfig<VendaItemControllerRemove400 | VendaItemControllerRemove404>, {id: VendaItemControllerRemovePathParams["id"], params: VendaItemControllerRemoveQueryParams, headers: VendaItemControllerRemoveHeaderParams}, TContext>
}