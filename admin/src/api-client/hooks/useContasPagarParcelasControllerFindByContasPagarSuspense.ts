/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/lib/fetch-client'
import type {
  ContasPagarParcelasControllerFindByContasPagarQueryResponse,
  ContasPagarParcelasControllerFindByContasPagarPathParams,
} from '../types/ContasPagarParcelasControllerFindByContasPagar.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/lib/fetch-client'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const contasPagarParcelasControllerFindByContasPagarSuspenseQueryKey = (
  contasPagarId: ContasPagarParcelasControllerFindByContasPagarPathParams['contasPagarId'],
) => [{ url: '/contas-pagar-parcelas/contas-pagar/:contasPagarId', params: { contasPagarId: contasPagarId } }] as const

export type ContasPagarParcelasControllerFindByContasPagarSuspenseQueryKey = ReturnType<typeof contasPagarParcelasControllerFindByContasPagarSuspenseQueryKey>

/**
 * @summary Buscar parcelas por conta a pagar
 * {@link /contas-pagar-parcelas/contas-pagar/:contasPagarId}
 */
export async function contasPagarParcelasControllerFindByContasPagarSuspense(
  contasPagarId: ContasPagarParcelasControllerFindByContasPagarPathParams['contasPagarId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<ContasPagarParcelasControllerFindByContasPagarQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/contas-pagar-parcelas/contas-pagar/${contasPagarId}`,
    ...requestConfig,
  })
  return res.data
}

export function contasPagarParcelasControllerFindByContasPagarSuspenseQueryOptions(
  contasPagarId: ContasPagarParcelasControllerFindByContasPagarPathParams['contasPagarId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = contasPagarParcelasControllerFindByContasPagarSuspenseQueryKey(contasPagarId)
  return queryOptions<
    ContasPagarParcelasControllerFindByContasPagarQueryResponse,
    ResponseErrorConfig<Error>,
    ContasPagarParcelasControllerFindByContasPagarQueryResponse,
    typeof queryKey
  >({
    enabled: !!contasPagarId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return contasPagarParcelasControllerFindByContasPagarSuspense(contasPagarId, config)
    },
  })
}

/**
 * @summary Buscar parcelas por conta a pagar
 * {@link /contas-pagar-parcelas/contas-pagar/:contasPagarId}
 */
export function useContasPagarParcelasControllerFindByContasPagarSuspense<
  TData = ContasPagarParcelasControllerFindByContasPagarQueryResponse,
  TQueryKey extends QueryKey = ContasPagarParcelasControllerFindByContasPagarSuspenseQueryKey,
>(
  contasPagarId: ContasPagarParcelasControllerFindByContasPagarPathParams['contasPagarId'],
  options: {
    query?: Partial<UseSuspenseQueryOptions<ContasPagarParcelasControllerFindByContasPagarQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? contasPagarParcelasControllerFindByContasPagarSuspenseQueryKey(contasPagarId)

  const query = useSuspenseQuery(
    {
      ...contasPagarParcelasControllerFindByContasPagarSuspenseQueryOptions(contasPagarId, config),
      queryKey,
      ...queryOptions,
    } as unknown as UseSuspenseQueryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}