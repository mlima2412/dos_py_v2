/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/lib/fetch-client'
import type {
  DespesasControllerFindBySubCategoriaQueryResponse,
  DespesasControllerFindBySubCategoriaPathParams,
} from '../types/DespesasControllerFindBySubCategoria.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/lib/fetch-client'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const despesasControllerFindBySubCategoriaQueryKey = (subCategoriaId: DespesasControllerFindBySubCategoriaPathParams['subCategoriaId']) =>
  [{ url: '/despesas/subcategoria/:subCategoriaId', params: { subCategoriaId: subCategoriaId } }] as const

export type DespesasControllerFindBySubCategoriaQueryKey = ReturnType<typeof despesasControllerFindBySubCategoriaQueryKey>

/**
 * @summary Listar despesas por subcategoria
 * {@link /despesas/subcategoria/:subCategoriaId}
 */
export async function despesasControllerFindBySubCategoria(
  subCategoriaId: DespesasControllerFindBySubCategoriaPathParams['subCategoriaId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<DespesasControllerFindBySubCategoriaQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/despesas/subcategoria/${subCategoriaId}`,
    ...requestConfig,
  })
  return res.data
}

export function despesasControllerFindBySubCategoriaQueryOptions(
  subCategoriaId: DespesasControllerFindBySubCategoriaPathParams['subCategoriaId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = despesasControllerFindBySubCategoriaQueryKey(subCategoriaId)
  return queryOptions<
    DespesasControllerFindBySubCategoriaQueryResponse,
    ResponseErrorConfig<Error>,
    DespesasControllerFindBySubCategoriaQueryResponse,
    typeof queryKey
  >({
    enabled: !!subCategoriaId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return despesasControllerFindBySubCategoria(subCategoriaId, config)
    },
  })
}

/**
 * @summary Listar despesas por subcategoria
 * {@link /despesas/subcategoria/:subCategoriaId}
 */
export function useDespesasControllerFindBySubCategoria<
  TData = DespesasControllerFindBySubCategoriaQueryResponse,
  TQueryData = DespesasControllerFindBySubCategoriaQueryResponse,
  TQueryKey extends QueryKey = DespesasControllerFindBySubCategoriaQueryKey,
>(
  subCategoriaId: DespesasControllerFindBySubCategoriaPathParams['subCategoriaId'],
  options: {
    query?: Partial<QueryObserverOptions<DespesasControllerFindBySubCategoriaQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? despesasControllerFindBySubCategoriaQueryKey(subCategoriaId)

  const query = useQuery(
    {
      ...despesasControllerFindBySubCategoriaQueryOptions(subCategoriaId, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}