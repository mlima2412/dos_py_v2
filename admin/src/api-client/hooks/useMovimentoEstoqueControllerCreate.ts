/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { MovimentoEstoqueControllerCreateMutationRequest, MovimentoEstoqueControllerCreateMutationResponse, MovimentoEstoqueControllerCreate400, MovimentoEstoqueControllerCreate404 } from "../types/MovimentoEstoqueControllerCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const movimentoEstoqueControllerCreateMutationKey = () =>   [{"url":"/movimento-estoque"}] as const

export type MovimentoEstoqueControllerCreateMutationKey = ReturnType<typeof movimentoEstoqueControllerCreateMutationKey>

/**
 * @description Registra um novo movimento de estoque e atualiza automaticamente as quantidades
 * @summary Criar movimento de estoque
 * {@link /movimento-estoque}
 */
export async function movimentoEstoqueControllerCreate(data: MovimentoEstoqueControllerCreateMutationRequest, config: Partial<RequestConfig<MovimentoEstoqueControllerCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config

const requestData = data
const res = await request<MovimentoEstoqueControllerCreateMutationResponse, ResponseErrorConfig<MovimentoEstoqueControllerCreate400 | MovimentoEstoqueControllerCreate404>, MovimentoEstoqueControllerCreateMutationRequest>({ method : "POST", url : `/movimento-estoque`, data : requestData, ... requestConfig })
return res.data
}

/**
 * @description Registra um novo movimento de estoque e atualiza automaticamente as quantidades
 * @summary Criar movimento de estoque
 * {@link /movimento-estoque}
 */
export function useMovimentoEstoqueControllerCreate<TContext>(options: 
  {
    mutation?: UseMutationOptions<MovimentoEstoqueControllerCreateMutationResponse, ResponseErrorConfig<MovimentoEstoqueControllerCreate400 | MovimentoEstoqueControllerCreate404>, {data: MovimentoEstoqueControllerCreateMutationRequest}, TContext> & { client?: QueryClient },
    client?: Partial<RequestConfig<MovimentoEstoqueControllerCreateMutationRequest>> & { client?: typeof fetch },
  }
   = {}) {
  
          const { mutation = {}, client: config = {} } = options ?? {}
          const { client: queryClient, ...mutationOptions } = mutation;
          const mutationKey = mutationOptions.mutationKey ?? movimentoEstoqueControllerCreateMutationKey()
  
          return useMutation<MovimentoEstoqueControllerCreateMutationResponse, ResponseErrorConfig<MovimentoEstoqueControllerCreate400 | MovimentoEstoqueControllerCreate404>, {data: MovimentoEstoqueControllerCreateMutationRequest}, TContext>({
            mutationFn: async({ data }) => {
              return movimentoEstoqueControllerCreate(data, config)
            },
            mutationKey,
            ...mutationOptions
          }, queryClient)
      
}