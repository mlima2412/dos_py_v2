/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { ParceirosControllerCreateMutationRequest, ParceirosControllerCreateMutationResponse, ParceirosControllerCreate400, ParceirosControllerCreate409 } from "../types/ParceirosControllerCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, UseMutationResult, QueryClient } from "@tanstack/react-query";
import { mutationOptions, useMutation } from "@tanstack/react-query";

export const parceirosControllerCreateMutationKey = () => [{ url: '/parceiros' }] as const

export type ParceirosControllerCreateMutationKey = ReturnType<typeof parceirosControllerCreateMutationKey>

/**
 * @summary Criar um novo parceiro
 * {@link /parceiros}
 */
export async function parceirosControllerCreate(data: ParceirosControllerCreateMutationRequest, config: Partial<RequestConfig<ParceirosControllerCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<ParceirosControllerCreateMutationResponse, ResponseErrorConfig<ParceirosControllerCreate400 | ParceirosControllerCreate409>, ParceirosControllerCreateMutationRequest>({ method : "POST", url : `/parceiros`, data : requestData, ... requestConfig })  
  return res.data
}

export function parceirosControllerCreateMutationOptions(config: Partial<RequestConfig<ParceirosControllerCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const mutationKey = parceirosControllerCreateMutationKey()
  return mutationOptions<ParceirosControllerCreateMutationResponse, ResponseErrorConfig<ParceirosControllerCreate400 | ParceirosControllerCreate409>, {data: ParceirosControllerCreateMutationRequest}, typeof mutationKey>({
    mutationKey,
    mutationFn: async({ data }) => {
      return parceirosControllerCreate(data, config)
    },
  })
}

/**
 * @summary Criar um novo parceiro
 * {@link /parceiros}
 */
export function useParceirosControllerCreate<TContext>(options: 
{
  mutation?: UseMutationOptions<ParceirosControllerCreateMutationResponse, ResponseErrorConfig<ParceirosControllerCreate400 | ParceirosControllerCreate409>, {data: ParceirosControllerCreateMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<ParceirosControllerCreateMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? parceirosControllerCreateMutationKey()

  const baseOptions = parceirosControllerCreateMutationOptions(config) as UseMutationOptions<ParceirosControllerCreateMutationResponse, ResponseErrorConfig<ParceirosControllerCreate400 | ParceirosControllerCreate409>, {data: ParceirosControllerCreateMutationRequest}, TContext>

  return useMutation<ParceirosControllerCreateMutationResponse, ResponseErrorConfig<ParceirosControllerCreate400 | ParceirosControllerCreate409>, {data: ParceirosControllerCreateMutationRequest}, TContext>({
    ...baseOptions,
    mutationKey,
    ...mutationOptions,
  }, queryClient) as UseMutationResult<ParceirosControllerCreateMutationResponse, ResponseErrorConfig<ParceirosControllerCreate400 | ParceirosControllerCreate409>, {data: ParceirosControllerCreateMutationRequest}, TContext>
}