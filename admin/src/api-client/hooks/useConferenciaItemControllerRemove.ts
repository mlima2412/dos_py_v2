/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { ConferenciaItemControllerRemoveMutationResponse, ConferenciaItemControllerRemovePathParams, ConferenciaItemControllerRemove400, ConferenciaItemControllerRemove404 } from "../types/ConferenciaItemControllerRemove.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const conferenciaItemControllerRemoveMutationKey = () =>   [{"url":"/conferencia-item/{id}"}] as const

export type ConferenciaItemControllerRemoveMutationKey = ReturnType<typeof conferenciaItemControllerRemoveMutationKey>

/**
 * @summary Remover item de conferência
 * {@link /conferencia-item/:id}
 */
export async function conferenciaItemControllerRemove(id: ConferenciaItemControllerRemovePathParams["id"], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config


const res = await request<ConferenciaItemControllerRemoveMutationResponse, ResponseErrorConfig<ConferenciaItemControllerRemove400 | ConferenciaItemControllerRemove404>, unknown>({ method : "DELETE", url : `/conferencia-item/${id}`, ... requestConfig })
return res.data
}

/**
 * @summary Remover item de conferência
 * {@link /conferencia-item/:id}
 */
export function useConferenciaItemControllerRemove<TContext>(options: 
  {
    mutation?: UseMutationOptions<ConferenciaItemControllerRemoveMutationResponse, ResponseErrorConfig<ConferenciaItemControllerRemove400 | ConferenciaItemControllerRemove404>, {id: ConferenciaItemControllerRemovePathParams["id"]}, TContext> & { client?: QueryClient },
    client?: Partial<RequestConfig> & { client?: typeof fetch },
  }
   = {}) {
  
          const { mutation = {}, client: config = {} } = options ?? {}
          const { client: queryClient, ...mutationOptions } = mutation;
          const mutationKey = mutationOptions.mutationKey ?? conferenciaItemControllerRemoveMutationKey()
  
          return useMutation<ConferenciaItemControllerRemoveMutationResponse, ResponseErrorConfig<ConferenciaItemControllerRemove400 | ConferenciaItemControllerRemove404>, {id: ConferenciaItemControllerRemovePathParams["id"]}, TContext>({
            mutationFn: async({ id }) => {
              return conferenciaItemControllerRemove(id, config)
            },
            mutationKey,
            ...mutationOptions
          }, queryClient)
      
}