/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { CurrencyControllerRemoveMutationResponse, CurrencyControllerRemovePathParams, CurrencyControllerRemove401, CurrencyControllerRemove404, CurrencyControllerRemove409 } from "../types/CurrencyControllerRemove.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const currencyControllerRemoveMutationKey = () =>   [{"url":"/currency/{publicId}"}] as const

export type CurrencyControllerRemoveMutationKey = ReturnType<typeof currencyControllerRemoveMutationKey>

/**
 * @summary Remover moeda
 * {@link /currency/:publicId}
 */
export async function currencyControllerRemove(publicId: CurrencyControllerRemovePathParams["publicId"], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config


const res = await request<CurrencyControllerRemoveMutationResponse, ResponseErrorConfig<CurrencyControllerRemove401 | CurrencyControllerRemove404 | CurrencyControllerRemove409>, unknown>({ method : "DELETE", url : `/currency/${publicId}`, ... requestConfig })
return res.data
}

/**
 * @summary Remover moeda
 * {@link /currency/:publicId}
 */
export function useCurrencyControllerRemove<TContext>(options: 
  {
    mutation?: UseMutationOptions<CurrencyControllerRemoveMutationResponse, ResponseErrorConfig<CurrencyControllerRemove401 | CurrencyControllerRemove404 | CurrencyControllerRemove409>, {publicId: CurrencyControllerRemovePathParams["publicId"]}, TContext> & { client?: QueryClient },
    client?: Partial<RequestConfig> & { client?: typeof fetch },
  }
   = {}) {
  
          const { mutation = {}, client: config = {} } = options ?? {}
          const { client: queryClient, ...mutationOptions } = mutation;
          const mutationKey = mutationOptions.mutationKey ?? currencyControllerRemoveMutationKey()
  
          return useMutation<CurrencyControllerRemoveMutationResponse, ResponseErrorConfig<CurrencyControllerRemove401 | CurrencyControllerRemove404 | CurrencyControllerRemove409>, {publicId: CurrencyControllerRemovePathParams["publicId"]}, TContext>({
            mutationFn: async({ publicId }) => {
              return currencyControllerRemove(publicId, config)
            },
            mutationKey,
            ...mutationOptions
          }, queryClient)
      
}