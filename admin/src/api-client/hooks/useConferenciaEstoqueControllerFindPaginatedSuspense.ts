/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { ConferenciaEstoqueControllerFindPaginatedQueryResponse, ConferenciaEstoqueControllerFindPaginatedQueryParams, ConferenciaEstoqueControllerFindPaginatedHeaderParams } from "../types/ConferenciaEstoqueControllerFindPaginated.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from "@tanstack/react-query";
import { queryOptions, useSuspenseQuery } from "@tanstack/react-query";

export const conferenciaEstoqueControllerFindPaginatedSuspenseQueryKey = (params?: ConferenciaEstoqueControllerFindPaginatedQueryParams) => [{ url: '/conferencia-estoque/paginated' }, ...(params ? [params] : [])] as const

export type ConferenciaEstoqueControllerFindPaginatedSuspenseQueryKey = ReturnType<typeof conferenciaEstoqueControllerFindPaginatedSuspenseQueryKey>

/**
 * @summary Listar conferências de estoque paginadas
 * {@link /conferencia-estoque/paginated}
 */
export async function conferenciaEstoqueControllerFindPaginatedSuspense(headers: ConferenciaEstoqueControllerFindPaginatedHeaderParams, params?: ConferenciaEstoqueControllerFindPaginatedQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<ConferenciaEstoqueControllerFindPaginatedQueryResponse, ResponseErrorConfig<Error>, unknown>({ method : "GET", url : `/conferencia-estoque/paginated`, params, ... requestConfig, headers : { ...headers, ...requestConfig.headers } })  
  return res.data
}

export function conferenciaEstoqueControllerFindPaginatedSuspenseQueryOptions(headers: ConferenciaEstoqueControllerFindPaginatedHeaderParams, params?: ConferenciaEstoqueControllerFindPaginatedQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = conferenciaEstoqueControllerFindPaginatedSuspenseQueryKey(params)
  return queryOptions<ConferenciaEstoqueControllerFindPaginatedQueryResponse, ResponseErrorConfig<Error>, ConferenciaEstoqueControllerFindPaginatedQueryResponse, typeof queryKey>({
 
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return conferenciaEstoqueControllerFindPaginatedSuspense(headers, params, config)
   },
  })
}

/**
 * @summary Listar conferências de estoque paginadas
 * {@link /conferencia-estoque/paginated}
 */
export function useConferenciaEstoqueControllerFindPaginatedSuspense<TData = ConferenciaEstoqueControllerFindPaginatedQueryResponse, TQueryKey extends QueryKey = ConferenciaEstoqueControllerFindPaginatedSuspenseQueryKey>(headers: ConferenciaEstoqueControllerFindPaginatedHeaderParams, params?: ConferenciaEstoqueControllerFindPaginatedQueryParams, options: 
{
  query?: Partial<UseSuspenseQueryOptions<ConferenciaEstoqueControllerFindPaginatedQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? conferenciaEstoqueControllerFindPaginatedSuspenseQueryKey(params)

  const query = useSuspenseQuery({
   ...conferenciaEstoqueControllerFindPaginatedSuspenseQueryOptions(headers, params, config),
   queryKey,
   ...queryOptions
  } as unknown as UseSuspenseQueryOptions, queryClient) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}