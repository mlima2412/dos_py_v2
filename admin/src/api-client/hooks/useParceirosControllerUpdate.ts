/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { ParceirosControllerUpdateMutationRequest, ParceirosControllerUpdateMutationResponse, ParceirosControllerUpdatePathParams, ParceirosControllerUpdate404, ParceirosControllerUpdate409 } from "../types/ParceirosControllerUpdate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const parceirosControllerUpdateMutationKey = () =>   [{"url":"/parceiros/{publicId}"}] as const

export type ParceirosControllerUpdateMutationKey = ReturnType<typeof parceirosControllerUpdateMutationKey>

/**
 * @summary Atualizar parceiro
 * {@link /parceiros/:publicId}
 */
export async function parceirosControllerUpdate(publicId: ParceirosControllerUpdatePathParams["publicId"], data?: ParceirosControllerUpdateMutationRequest, config: Partial<RequestConfig<ParceirosControllerUpdateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config

const requestData = data
const res = await request<ParceirosControllerUpdateMutationResponse, ResponseErrorConfig<ParceirosControllerUpdate404 | ParceirosControllerUpdate409>, ParceirosControllerUpdateMutationRequest>({ method : "PATCH", url : `/parceiros/${publicId}`, data : requestData, ... requestConfig })
return res.data
}

/**
 * @summary Atualizar parceiro
 * {@link /parceiros/:publicId}
 */
export function useParceirosControllerUpdate<TContext>(options: 
  {
    mutation?: UseMutationOptions<ParceirosControllerUpdateMutationResponse, ResponseErrorConfig<ParceirosControllerUpdate404 | ParceirosControllerUpdate409>, {publicId: ParceirosControllerUpdatePathParams["publicId"], data?: ParceirosControllerUpdateMutationRequest}, TContext> & { client?: QueryClient },
    client?: Partial<RequestConfig<ParceirosControllerUpdateMutationRequest>> & { client?: typeof fetch },
  }
   = {}) {
  
          const { mutation = {}, client: config = {} } = options ?? {}
          const { client: queryClient, ...mutationOptions } = mutation;
          const mutationKey = mutationOptions.mutationKey ?? parceirosControllerUpdateMutationKey()
  
          return useMutation<ParceirosControllerUpdateMutationResponse, ResponseErrorConfig<ParceirosControllerUpdate404 | ParceirosControllerUpdate409>, {publicId: ParceirosControllerUpdatePathParams["publicId"], data?: ParceirosControllerUpdateMutationRequest}, TContext>({
            mutationFn: async({ publicId, data }) => {
              return parceirosControllerUpdate(publicId, data, config)
            },
            mutationKey,
            ...mutationOptions
          }, queryClient)
      
}