/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { ConferenciaEstoqueControllerCheckLocalEmConferenciaQueryResponse, ConferenciaEstoqueControllerCheckLocalEmConferenciaPathParams, ConferenciaEstoqueControllerCheckLocalEmConferenciaHeaderParams, ConferenciaEstoqueControllerCheckLocalEmConferencia404 } from "../types/ConferenciaEstoqueControllerCheckLocalEmConferencia.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const conferenciaEstoqueControllerCheckLocalEmConferenciaQueryKey = (localPublicId: ConferenciaEstoqueControllerCheckLocalEmConferenciaPathParams["localPublicId"]) => [{ url: '/conferencia-estoque/local/:localPublicId/em-conferencia', params: {localPublicId:localPublicId} }] as const

export type ConferenciaEstoqueControllerCheckLocalEmConferenciaQueryKey = ReturnType<typeof conferenciaEstoqueControllerCheckLocalEmConferenciaQueryKey>

/**
 * @summary Verificar se local de estoque está em processo de conferência
 * {@link /conferencia-estoque/local/:localPublicId/em-conferencia}
 */
export async function conferenciaEstoqueControllerCheckLocalEmConferencia(localPublicId: ConferenciaEstoqueControllerCheckLocalEmConferenciaPathParams["localPublicId"], headers: ConferenciaEstoqueControllerCheckLocalEmConferenciaHeaderParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<ConferenciaEstoqueControllerCheckLocalEmConferenciaQueryResponse, ResponseErrorConfig<ConferenciaEstoqueControllerCheckLocalEmConferencia404>, unknown>({ method : "GET", url : `/conferencia-estoque/local/${localPublicId}/em-conferencia`, ... requestConfig, headers : { ...headers, ...requestConfig.headers } })  
  return res.data
}

export function conferenciaEstoqueControllerCheckLocalEmConferenciaQueryOptions(localPublicId: ConferenciaEstoqueControllerCheckLocalEmConferenciaPathParams["localPublicId"], headers: ConferenciaEstoqueControllerCheckLocalEmConferenciaHeaderParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = conferenciaEstoqueControllerCheckLocalEmConferenciaQueryKey(localPublicId)
  return queryOptions<ConferenciaEstoqueControllerCheckLocalEmConferenciaQueryResponse, ResponseErrorConfig<ConferenciaEstoqueControllerCheckLocalEmConferencia404>, ConferenciaEstoqueControllerCheckLocalEmConferenciaQueryResponse, typeof queryKey>({
   enabled: !!(localPublicId),
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return conferenciaEstoqueControllerCheckLocalEmConferencia(localPublicId, headers, config)
   },
  })
}

/**
 * @summary Verificar se local de estoque está em processo de conferência
 * {@link /conferencia-estoque/local/:localPublicId/em-conferencia}
 */
export function useConferenciaEstoqueControllerCheckLocalEmConferencia<TData = ConferenciaEstoqueControllerCheckLocalEmConferenciaQueryResponse, TQueryData = ConferenciaEstoqueControllerCheckLocalEmConferenciaQueryResponse, TQueryKey extends QueryKey = ConferenciaEstoqueControllerCheckLocalEmConferenciaQueryKey>(localPublicId: ConferenciaEstoqueControllerCheckLocalEmConferenciaPathParams["localPublicId"], headers: ConferenciaEstoqueControllerCheckLocalEmConferenciaHeaderParams, options: 
{
  query?: Partial<QueryObserverOptions<ConferenciaEstoqueControllerCheckLocalEmConferenciaQueryResponse, ResponseErrorConfig<ConferenciaEstoqueControllerCheckLocalEmConferencia404>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? conferenciaEstoqueControllerCheckLocalEmConferenciaQueryKey(localPublicId)

  const query = useQuery({
   ...conferenciaEstoqueControllerCheckLocalEmConferenciaQueryOptions(localPublicId, headers, config),
   queryKey,
   ...queryOptions
  } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<ConferenciaEstoqueControllerCheckLocalEmConferencia404>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}