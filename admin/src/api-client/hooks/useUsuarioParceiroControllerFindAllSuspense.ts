/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { UsuarioParceiroControllerFindAllQueryResponse } from "../types/UsuarioParceiroControllerFindAll.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from "@tanstack/react-query";
import { queryOptions, useSuspenseQuery } from "@tanstack/react-query";

export const usuarioParceiroControllerFindAllSuspenseQueryKey = () =>   [{ url: '/usuario-parceiro' }] as const

export type UsuarioParceiroControllerFindAllSuspenseQueryKey = ReturnType<typeof usuarioParceiroControllerFindAllSuspenseQueryKey>

/**
 * @summary Listar todas as relações usuário-parceiro
 * {@link /usuario-parceiro}
 */
export async function usuarioParceiroControllerFindAllSuspense(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config


const res = await request<UsuarioParceiroControllerFindAllQueryResponse, ResponseErrorConfig<Error>, unknown>({ method : "GET", url : `/usuario-parceiro`, ... requestConfig })
return res.data
}

export function usuarioParceiroControllerFindAllSuspenseQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  
        const queryKey = usuarioParceiroControllerFindAllSuspenseQueryKey()
        return queryOptions<UsuarioParceiroControllerFindAllQueryResponse, ResponseErrorConfig<Error>, UsuarioParceiroControllerFindAllQueryResponse, typeof queryKey>({
         
         queryKey,
         queryFn: async ({ signal }) => {
            config.signal = signal
            return usuarioParceiroControllerFindAllSuspense(config)
         },
        })
  
}

/**
 * @summary Listar todas as relações usuário-parceiro
 * {@link /usuario-parceiro}
 */
export function useUsuarioParceiroControllerFindAllSuspense<TData = UsuarioParceiroControllerFindAllQueryResponse, TQueryKey extends QueryKey = UsuarioParceiroControllerFindAllSuspenseQueryKey>(options: 
  {
    query?: Partial<UseSuspenseQueryOptions<UsuarioParceiroControllerFindAllQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & { client?: QueryClient },
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  }
   = {}) {
  
         const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
         const queryKey = queryOptions?.queryKey ?? usuarioParceiroControllerFindAllSuspenseQueryKey()
  
         const query = useSuspenseQuery({
          ...usuarioParceiroControllerFindAllSuspenseQueryOptions(config),
          queryKey,
          ...queryOptions
         } as unknown as UseSuspenseQueryOptions, queryClient) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }
  
         query.queryKey = queryKey as TQueryKey
  
         return query
         
}