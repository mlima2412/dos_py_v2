/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { DespesasRecorrentesControllerCreateMutationRequest, DespesasRecorrentesControllerCreateMutationResponse, DespesasRecorrentesControllerCreate400, DespesasRecorrentesControllerCreate401 } from "../types/DespesasRecorrentesControllerCreate.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, UseMutationResult, QueryClient } from "@tanstack/react-query";
import { mutationOptions, useMutation } from "@tanstack/react-query";

export const despesasRecorrentesControllerCreateMutationKey = () => [{ url: '/despesas-recorrentes' }] as const

export type DespesasRecorrentesControllerCreateMutationKey = ReturnType<typeof despesasRecorrentesControllerCreateMutationKey>

/**
 * @summary Criar nova despesa recorrente
 * {@link /despesas-recorrentes}
 */
export async function despesasRecorrentesControllerCreate(data: DespesasRecorrentesControllerCreateMutationRequest, config: Partial<RequestConfig<DespesasRecorrentesControllerCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<DespesasRecorrentesControllerCreateMutationResponse, ResponseErrorConfig<DespesasRecorrentesControllerCreate400 | DespesasRecorrentesControllerCreate401>, DespesasRecorrentesControllerCreateMutationRequest>({ method : "POST", url : `/despesas-recorrentes`, data : requestData, ... requestConfig })  
  return res.data
}

export function despesasRecorrentesControllerCreateMutationOptions(config: Partial<RequestConfig<DespesasRecorrentesControllerCreateMutationRequest>> & { client?: typeof fetch } = {}) {
  const mutationKey = despesasRecorrentesControllerCreateMutationKey()
  return mutationOptions<DespesasRecorrentesControllerCreateMutationResponse, ResponseErrorConfig<DespesasRecorrentesControllerCreate400 | DespesasRecorrentesControllerCreate401>, {data: DespesasRecorrentesControllerCreateMutationRequest}, typeof mutationKey>({
    mutationKey,
    mutationFn: async({ data }) => {
      return despesasRecorrentesControllerCreate(data, config)
    },
  })
}

/**
 * @summary Criar nova despesa recorrente
 * {@link /despesas-recorrentes}
 */
export function useDespesasRecorrentesControllerCreate<TContext>(options: 
{
  mutation?: UseMutationOptions<DespesasRecorrentesControllerCreateMutationResponse, ResponseErrorConfig<DespesasRecorrentesControllerCreate400 | DespesasRecorrentesControllerCreate401>, {data: DespesasRecorrentesControllerCreateMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<DespesasRecorrentesControllerCreateMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? despesasRecorrentesControllerCreateMutationKey()

  const baseOptions = despesasRecorrentesControllerCreateMutationOptions(config) as UseMutationOptions<DespesasRecorrentesControllerCreateMutationResponse, ResponseErrorConfig<DespesasRecorrentesControllerCreate400 | DespesasRecorrentesControllerCreate401>, {data: DespesasRecorrentesControllerCreateMutationRequest}, TContext>

  return useMutation<DespesasRecorrentesControllerCreateMutationResponse, ResponseErrorConfig<DespesasRecorrentesControllerCreate400 | DespesasRecorrentesControllerCreate401>, {data: DespesasRecorrentesControllerCreateMutationRequest}, TContext>({
    ...baseOptions,
    mutationKey,
    ...mutationOptions,
  }, queryClient) as UseMutationResult<DespesasRecorrentesControllerCreateMutationResponse, ResponseErrorConfig<DespesasRecorrentesControllerCreate400 | DespesasRecorrentesControllerCreate401>, {data: DespesasRecorrentesControllerCreateMutationRequest}, TContext>
}