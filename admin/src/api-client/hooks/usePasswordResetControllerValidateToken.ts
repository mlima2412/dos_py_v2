/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { PasswordResetControllerValidateTokenQueryResponse, PasswordResetControllerValidateTokenQueryParams } from "../types/PasswordResetControllerValidateToken.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const passwordResetControllerValidateTokenQueryKey = (params: PasswordResetControllerValidateTokenQueryParams) =>   [{ url: '/password-reset/validate-token' }, ...(params ? [params] : [])] as const

export type PasswordResetControllerValidateTokenQueryKey = ReturnType<typeof passwordResetControllerValidateTokenQueryKey>

/**
 * @summary Validar token de recuperação
 * {@link /password-reset/validate-token}
 */
export async function passwordResetControllerValidateToken(params: PasswordResetControllerValidateTokenQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config


const res = await request<PasswordResetControllerValidateTokenQueryResponse, ResponseErrorConfig<Error>, unknown>({ method : "GET", url : `/password-reset/validate-token`, params, ... requestConfig })
return res.data
}

export function passwordResetControllerValidateTokenQueryOptions(params: PasswordResetControllerValidateTokenQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  
        const queryKey = passwordResetControllerValidateTokenQueryKey(params)
        return queryOptions<PasswordResetControllerValidateTokenQueryResponse, ResponseErrorConfig<Error>, PasswordResetControllerValidateTokenQueryResponse, typeof queryKey>({
         enabled: !!(params),
         queryKey,
         queryFn: async ({ signal }) => {
            config.signal = signal
            return passwordResetControllerValidateToken(params, config)
         },
        })
  
}

/**
 * @summary Validar token de recuperação
 * {@link /password-reset/validate-token}
 */
export function usePasswordResetControllerValidateToken<TData = PasswordResetControllerValidateTokenQueryResponse, TQueryData = PasswordResetControllerValidateTokenQueryResponse, TQueryKey extends QueryKey = PasswordResetControllerValidateTokenQueryKey>(params: PasswordResetControllerValidateTokenQueryParams, options: 
  {
    query?: Partial<QueryObserverOptions<PasswordResetControllerValidateTokenQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  }
   = {}) {
  
         const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
         const queryKey = queryOptions?.queryKey ?? passwordResetControllerValidateTokenQueryKey(params)
  
         const query = useQuery({
          ...passwordResetControllerValidateTokenQueryOptions(params, config),
          queryKey,
          ...queryOptions
         } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }
  
         query.queryKey = queryKey as TQueryKey
  
         return query
         
}