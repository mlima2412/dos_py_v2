/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { FormaPagamentoControllerInativarMutationResponse, FormaPagamentoControllerInativarPathParams, FormaPagamentoControllerInativarHeaderParams, FormaPagamentoControllerInativar404 } from "../types/FormaPagamentoControllerInativar.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, UseMutationResult, QueryClient } from "@tanstack/react-query";
import { mutationOptions, useMutation } from "@tanstack/react-query";

export const formaPagamentoControllerInativarMutationKey = () => [{ url: '/forma-pagamento/:id/inativar' }] as const

export type FormaPagamentoControllerInativarMutationKey = ReturnType<typeof formaPagamentoControllerInativarMutationKey>

/**
 * @summary Inativar forma de pagamento
 * {@link /forma-pagamento/:id/inativar}
 */
export async function formaPagamentoControllerInativar(id: FormaPagamentoControllerInativarPathParams["id"], headers: FormaPagamentoControllerInativarHeaderParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<FormaPagamentoControllerInativarMutationResponse, ResponseErrorConfig<FormaPagamentoControllerInativar404>, unknown>({ method : "PATCH", url : `/forma-pagamento/${id}/inativar`, ... requestConfig, headers : { ...headers, ...requestConfig.headers } })  
  return res.data
}

export function formaPagamentoControllerInativarMutationOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const mutationKey = formaPagamentoControllerInativarMutationKey()
  return mutationOptions<FormaPagamentoControllerInativarMutationResponse, ResponseErrorConfig<FormaPagamentoControllerInativar404>, {id: FormaPagamentoControllerInativarPathParams["id"], headers: FormaPagamentoControllerInativarHeaderParams}, typeof mutationKey>({
    mutationKey,
    mutationFn: async({ id, headers }) => {
      return formaPagamentoControllerInativar(id, headers, config)
    },
  })
}

/**
 * @summary Inativar forma de pagamento
 * {@link /forma-pagamento/:id/inativar}
 */
export function useFormaPagamentoControllerInativar<TContext>(options: 
{
  mutation?: UseMutationOptions<FormaPagamentoControllerInativarMutationResponse, ResponseErrorConfig<FormaPagamentoControllerInativar404>, {id: FormaPagamentoControllerInativarPathParams["id"], headers: FormaPagamentoControllerInativarHeaderParams}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? formaPagamentoControllerInativarMutationKey()

  const baseOptions = formaPagamentoControllerInativarMutationOptions(config) as UseMutationOptions<FormaPagamentoControllerInativarMutationResponse, ResponseErrorConfig<FormaPagamentoControllerInativar404>, {id: FormaPagamentoControllerInativarPathParams["id"], headers: FormaPagamentoControllerInativarHeaderParams}, TContext>

  return useMutation<FormaPagamentoControllerInativarMutationResponse, ResponseErrorConfig<FormaPagamentoControllerInativar404>, {id: FormaPagamentoControllerInativarPathParams["id"], headers: FormaPagamentoControllerInativarHeaderParams}, TContext>({
    ...baseOptions,
    mutationKey,
    ...mutationOptions,
  }, queryClient) as UseMutationResult<FormaPagamentoControllerInativarMutationResponse, ResponseErrorConfig<FormaPagamentoControllerInativar404>, {id: FormaPagamentoControllerInativarPathParams["id"], headers: FormaPagamentoControllerInativarHeaderParams}, TContext>
}