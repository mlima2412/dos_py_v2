/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/fetch-client";
import type { FormaPagamentoControllerInativarMutationResponse, FormaPagamentoControllerInativarPathParams, FormaPagamentoControllerInativarHeaderParams, FormaPagamentoControllerInativar404 } from "../types/FormaPagamentoControllerInativar.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/fetch-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const formaPagamentoControllerInativarMutationKey = () =>   [{"url":"/forma-pagamento/{id}/inativar"}] as const

export type FormaPagamentoControllerInativarMutationKey = ReturnType<typeof formaPagamentoControllerInativarMutationKey>

/**
 * @summary Inativar forma de pagamento
 * {@link /forma-pagamento/:id/inativar}
 */
export async function formaPagamentoControllerInativar(id: FormaPagamentoControllerInativarPathParams["id"], headers: FormaPagamentoControllerInativarHeaderParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client:request = fetch, ...requestConfig } = config


const res = await request<FormaPagamentoControllerInativarMutationResponse, ResponseErrorConfig<FormaPagamentoControllerInativar404>, unknown>({ method : "PATCH", url : `/forma-pagamento/${id}/inativar`, ... requestConfig, headers : { ...headers, ...requestConfig.headers } })
return res.data
}

/**
 * @summary Inativar forma de pagamento
 * {@link /forma-pagamento/:id/inativar}
 */
export function useFormaPagamentoControllerInativar<TContext>(options: 
  {
    mutation?: UseMutationOptions<FormaPagamentoControllerInativarMutationResponse, ResponseErrorConfig<FormaPagamentoControllerInativar404>, {id: FormaPagamentoControllerInativarPathParams["id"], headers: FormaPagamentoControllerInativarHeaderParams}, TContext> & { client?: QueryClient },
    client?: Partial<RequestConfig> & { client?: typeof fetch },
  }
   = {}) {
  
          const { mutation = {}, client: config = {} } = options ?? {}
          const { client: queryClient, ...mutationOptions } = mutation;
          const mutationKey = mutationOptions.mutationKey ?? formaPagamentoControllerInativarMutationKey()
  
          return useMutation<FormaPagamentoControllerInativarMutationResponse, ResponseErrorConfig<FormaPagamentoControllerInativar404>, {id: FormaPagamentoControllerInativarPathParams["id"], headers: FormaPagamentoControllerInativarHeaderParams}, TContext>({
            mutationFn: async({ id, headers }) => {
              return formaPagamentoControllerInativar(id, headers, config)
            },
            mutationKey,
            ...mutationOptions
          }, queryClient)
      
}