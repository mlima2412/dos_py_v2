/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import type { ProdutoHistoricoPrecoControllerFindByProdutoPublicIdPathParams, ProdutoHistoricoPrecoControllerFindByProdutoPublicIdQueryParams, ProdutoHistoricoPrecoControllerFindByProdutoPublicIdHeaderParams, ProdutoHistoricoPrecoControllerFindByProdutoPublicId200, ProdutoHistoricoPrecoControllerFindByProdutoPublicId404, ProdutoHistoricoPrecoControllerFindByProdutoPublicIdQueryResponse } from "../types/ProdutoHistoricoPrecoControllerFindByProdutoPublicId.ts";
import type { ToZod } from "@kubb/plugin-zod/utils";
import { produtoHistoricoPrecoResponseDtoSchema } from "./produtoHistoricoPrecoResponseDtoSchema.ts";
import { z } from "zod";

export const produtoHistoricoPrecoControllerFindByProdutoPublicIdPathParamsSchema = z.object({
      "produtoPublicId": z.string().describe("Public ID do produto")
      }) as unknown as ToZod<ProdutoHistoricoPrecoControllerFindByProdutoPublicIdPathParams>

export const produtoHistoricoPrecoControllerFindByProdutoPublicIdQueryParamsSchema = z.object({
      "dataInicial": z.string().describe("Data inicial para filtro (formato ISO)").optional(),
  "dataFinal": z.string().describe("Data final para filtro (formato ISO)").optional(),
  "limit": z.coerce.number().int().min(1).max(100).describe("Limite de registros (máximo 100)").optional()
      }).optional() as unknown as ToZod<ProdutoHistoricoPrecoControllerFindByProdutoPublicIdQueryParams>

export const produtoHistoricoPrecoControllerFindByProdutoPublicIdHeaderParamsSchema = z.object({
      "x-parceiro-id": z.coerce.number().int().describe("ID do parceiro logado")
      }) as unknown as ToZod<ProdutoHistoricoPrecoControllerFindByProdutoPublicIdHeaderParams>

/**
 * @description Lista de históricos de preço do produto
 */
export const produtoHistoricoPrecoControllerFindByProdutoPublicId200Schema = z.array(z.lazy(() => produtoHistoricoPrecoResponseDtoSchema)) as unknown as ToZod<ProdutoHistoricoPrecoControllerFindByProdutoPublicId200>

/**
 * @description Produto não encontrado
 */
export const produtoHistoricoPrecoControllerFindByProdutoPublicId404Schema = z.unknown() as unknown as ToZod<ProdutoHistoricoPrecoControllerFindByProdutoPublicId404>

export const produtoHistoricoPrecoControllerFindByProdutoPublicIdQueryResponseSchema = z.lazy(() => produtoHistoricoPrecoControllerFindByProdutoPublicId200Schema) as unknown as ToZod<ProdutoHistoricoPrecoControllerFindByProdutoPublicIdQueryResponse>