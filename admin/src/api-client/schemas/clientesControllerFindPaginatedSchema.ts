/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import type { ClientesControllerFindPaginatedQueryParams, ClientesControllerFindPaginatedHeaderParams, ClientesControllerFindPaginated200, ClientesControllerFindPaginatedQueryResponse } from "../types/ClientesControllerFindPaginated.ts";
import type { ToZod } from "@kubb/plugin-zod/utils";
import { clienteSchema } from "./clienteSchema.ts";
import { z } from "zod";

export const clientesControllerFindPaginatedQueryParamsSchema = z.object({
      "page": z.string().default("1").describe("Número da página"),
  "limit": z.string().default("20").describe("Número de itens por página"),
  "search": z.string().describe("Termo de busca para filtrar por nome, sobrenome ou email").optional(),
  "canalOrigemId": z.string().describe("ID do canal de origem para filtrar").optional(),
  "ativo": z.string().describe("Filtrar apenas clientes ativos").optional()
      }) as unknown as ToZod<ClientesControllerFindPaginatedQueryParams>

export const clientesControllerFindPaginatedHeaderParamsSchema = z.object({
      "x-parceiro-id": z.coerce.number().int().describe("ID do parceiro logado")
      }) as unknown as ToZod<ClientesControllerFindPaginatedHeaderParams>

/**
 * @description Lista paginada de clientes
 */
export const clientesControllerFindPaginated200Schema = z.object({
      "data": z.array(z.lazy(() => clienteSchema)).optional(),
  "total": z.coerce.number().optional(),
  "page": z.coerce.number().optional(),
  "limit": z.coerce.number().optional(),
  "totalPages": z.coerce.number().optional()
      }) as unknown as ToZod<ClientesControllerFindPaginated200>

export const clientesControllerFindPaginatedQueryResponseSchema = z.lazy(() => clientesControllerFindPaginated200Schema) as unknown as ToZod<ClientesControllerFindPaginatedQueryResponse>