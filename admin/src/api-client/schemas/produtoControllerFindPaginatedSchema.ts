/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import type { ProdutoControllerFindPaginatedQueryParams, ProdutoControllerFindPaginatedHeaderParams, ProdutoControllerFindPaginated200, ProdutoControllerFindPaginatedQueryResponse } from "../types/ProdutoControllerFindPaginated.ts";
import { produtoSchema } from "./produtoSchema.ts";
import { z } from "zod/v4";

export const produtoControllerFindPaginatedQueryParamsSchema = z.object({
    "page": z.optional(z.string().default("1").describe("Número da página")),
"limit": z.optional(z.string().default("20").describe("Número de itens por página")),
"search": z.optional(z.string().describe("Termo de busca para filtrar por nome do produto")),
"categoriaId": z.optional(z.string().describe("ID da categoria para filtrar")),
"ativo": z.optional(z.string().describe("Filtrar apenas produtos ativos"))
    }) as unknown as z.ZodType<ProdutoControllerFindPaginatedQueryParams>

export const produtoControllerFindPaginatedHeaderParamsSchema = z.object({
    "x-parceiro-id": z.coerce.number().int().describe("ID do parceiro logado")
    }) as unknown as z.ZodType<ProdutoControllerFindPaginatedHeaderParams>

/**
 * @description Lista paginada de produtos
 */
export const produtoControllerFindPaginated200Schema = z.object({
    get "data"(){
                return z.optional(z.array(produtoSchema))
              },
"total": z.optional(z.coerce.number()),
"page": z.optional(z.coerce.number()),
"limit": z.optional(z.coerce.number()),
"totalPages": z.optional(z.coerce.number())
    }) as unknown as z.ZodType<ProdutoControllerFindPaginated200>

export const produtoControllerFindPaginatedQueryResponseSchema = produtoControllerFindPaginated200Schema as unknown as z.ZodType<ProdutoControllerFindPaginatedQueryResponse>