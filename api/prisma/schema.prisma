generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Perfil {
  id              Int               @id @default(autoincrement())
  nome            String
  ativo           Boolean           @default(true)
  UsuarioParceiro UsuarioParceiro[]

  @@map("perfil")
}

model Usuario {
  id                            Int                    @id @default(autoincrement())
  publicId                      String                 @unique @map("public_id")
  nome                          String
  email                         String                 @unique
  telefone                      String?                @map("telefone")
  provider                      String                 @default("LOCAL") // LOCAL, GOOGLE, FACEBOOK
  googleId                      String?                @map("google_id")
  senha                         String?
  ativo                         Boolean                @default(true)
  avatar                        String?                @default("")
  createdAt                     DateTime               @default(now()) @map("created_at")
  UsuarioParceiro               UsuarioParceiro[]
  PasswordResetToken            PasswordResetToken[]
  MovimentoEstoque              MovimentoEstoque[]
  TransferenciaEstoqueEnviadas  TransferenciaEstoque[] @relation("UsuarioEnviou")
  TransferenciaEstoqueRecebidas TransferenciaEstoque[] @relation("UsuarioRecebeu")
  ConferenciaEstoque            ConferenciaEstoque[]
  Venda                         Venda[]

  @@map("usuario")
}

model PasswordResetToken {
  id        String    @id @default(uuid())
  userId    Int
  token     String    @unique
  used      Boolean   @default(false)
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user Usuario @relation(fields: [userId], references: [id])

  @@map("password_reset_token")
}

model Fornecedor {
  id           Int       @id @default(autoincrement())
  publicId     String    @unique @map("public_id")
  nome         String
  ruccnpj      String?   @unique
  email        String?   @unique
  telefone     String?
  redesocial   String?
  ativo        Boolean   @default(true)
  ultimaCompra DateTime? @map("ultima_compra")
  createdAt    DateTime  @default(now()) @map("created_at")
  parceiroId   Int       @map("parceiro_id")
  Parceiro     Parceiro  @relation(fields: [parceiroId], references: [id])

  despesas            Despesa[]
  despesasRecorrentes DespesaRecorrente[]
  PedidoCompra        PedidoCompra[]
  Produto             Produto[]

  @@map("fornecedor")
}

model UsuarioParceiro {
  id         Int      @id @default(autoincrement())
  usuarioId  Int      @map("usuario_id")
  parceiroId Int      @map("parceiro_id")
  perfilId   Int      @map("perfil_id")
  createdAt  DateTime @default(now()) @map("created_at")
  Parceiro   Parceiro @relation(fields: [parceiroId], references: [id])
  Usuario    Usuario  @relation(fields: [usuarioId], references: [id])
  perfil     Perfil   @relation(fields: [perfilId], references: [id])

  @@map("usuario_parceiro")
}

model Parceiro {
  id                             Int                              @id @default(autoincrement())
  publicId                       String                           @unique @map("public_id")
  nome                           String
  ruccnpj                        String?                          @unique
  email                          String                           @unique
  redesocial                     String?                          @map("rede_social")
  telefone                       String?
  currencyId                     Int?                             @map("currency_id")
  ativo                          Boolean                          @default(true)
  logourl                        String?                          @map("logo_url")
  thumburl                       String?                          @map("thumb_url")
  createdAt                      DateTime                         @default(now()) @map("created_at")
  currency                       Currency?                        @relation(fields: [currencyId], references: [id])
  Cliente                        Cliente[]
  UsuarioParceiro                UsuarioParceiro[]
  despesas                       Despesa[]
  despesasRecorrentes            DespesaRecorrente[]
  RollupDespesasMensais          RollupDespesasMensais[]
  RollupDespesasMensaisCategoria RollupDespesasMensaisCategoria[]
  Fornecedor                     Fornecedor[]
  Produto                        Produto[]
  LocalEstoque                   LocalEstoque[]
  TransferenciaEstoque           TransferenciaEstoque[]
  ConferenciaEstoque             ConferenciaEstoque[]
  formaPagamento                 FormaPagamento[]
  PedidoCompra                   PedidoCompra[]
  Venda                          Venda[]

  @@map("parceiro")
}

model CanalOrigem {
  id        Int       @id @default(autoincrement())
  publicId  String    @unique @map("public_id")
  nome      String
  descricao String?
  ativo     Boolean   @default(true)
  createdAt DateTime  @default(now()) @map("created_at")
  Cliente   Cliente[]

  @@map("canal_origem")
}

model Cliente {
  id                Int            @id @default(autoincrement())
  publicId          String         @unique @map("public_id")
  nome              String
  sobrenome         String?
  email             String?
  redeSocial        String?        @map("rede_social")
  celular           String?
  ruccnpj           String?        @unique
  ruccnpjSecundario String?        @map("ruccnpj_secundario")
  nomeFatura        String?        @map("nome_fatura")
  endereco          String?
  cidade            String?
  cep               String?
  observacoes       String?
  linguagem         Linguagem      @default(Espanol)
  ativo             Boolean        @default(true)
  ultimaCompra      DateTime?      @map("ultima_compra")
  qtdCompras        Int            @default(0) @map("qtd_compras")
  parceiroId        Int            @map("parceiro_id")
  canalOrigemId     Int?           @map("canal_origem_id")
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  CanalOrigem       CanalOrigem?   @relation(fields: [canalOrigemId], references: [id])
  Parceiro          Parceiro       @relation(fields: [parceiroId], references: [id])
  Parcelamento      Parcelamento[]
  Venda             Venda[]

  @@map("cliente")
}

model Currency {
  id                  Int                   @id @default(autoincrement())
  publicId            String                @unique @map("public_id")
  nome                String
  prefixo             String
  isoCode             String                @unique @map("iso_code")
  precision           Int                   @default(2)
  locale              String                @default("pt-BR")
  defaultRate         Decimal               @default(0.0) @map("default_rate") @db.Decimal(12, 3)
  ativo               Boolean               @default(true)
  createdAt           DateTime              @default(now()) @map("created_at")
  parceiros           Parceiro[]
  despesas            Despesa[]
  despesasRecorrentes DespesaRecorrente[]
  ContasPagarParcelas ContasPagarParcelas[]
  PedidoCompra        PedidoCompra[]
  Produto             Produto[]

  @@map("currency")
}

model CategoriaDespesas {
  idCategoria                    Int                              @id @default(autoincrement()) @map("categoria_id")
  descricao                      String
  ativo                          Boolean                          @default(true)
  createdAt                      DateTime                         @default(now()) @map("created_at")
  SubCategoriaDespesa            SubCategoriaDespesa[]
  RollupDespesasMensaisCategoria RollupDespesasMensaisCategoria[]

  @@map("categoria_despesas")
}

model SubCategoriaDespesa {
  idSubCategoria Int      @id @default(autoincrement()) @map("subcategoria_id")
  categoriaId    Int      @map("categoria_id")
  descricao      String
  ativo          Boolean  @default(true)
  createdAt      DateTime @default(now()) @map("created_at")

  categoria                      CategoriaDespesas                @relation(fields: [categoriaId], references: [idCategoria])
  despesas                       Despesa[]
  despesasRecorrentes            DespesaRecorrente[]
  RollupDespesasMensaisCategoria RollupDespesasMensaisCategoria[]

  @@map("subcategoria_despesa")
}

enum Linguagem {
  Espanol   @map("Español")
  Portugues
}

enum TipoPagamento {
  A_VISTA_IMEDIATA
  A_PRAZO_SEM_PARCELAS
  PARCELADO
}

model Despesa {
  id             Int                 @id @default(autoincrement())
  publicId       String              @unique @map("public_id")
  dataRegistro   DateTime            @default(now()) @map("data_registro")
  valorTotal     Decimal             @default(0.0) @map("valor_total") @db.Decimal(12, 3)
  descricao      String
  tipoPagamento  TipoPagamento       @default(A_VISTA_IMEDIATA) @map("tipo_pagamento")
  subCategoriaId Int                 @map("sub_categoria_id")
  parceiroId     Int                 @map("parceiro_id")
  fornecedorId   Int?                @map("fornecedor_id")
  currencyId     Int?                @map("currency_id")
  cotacao        Decimal?            @default(0.0) @map("cotacao") @db.Decimal(12, 3)
  currency       Currency?           @relation(fields: [currencyId], references: [id])
  fornecedor     Fornecedor?         @relation(fields: [fornecedorId], references: [id])
  parceiro       Parceiro            @relation(fields: [parceiroId], references: [id])
  subCategoria   SubCategoriaDespesa @relation(fields: [subCategoriaId], references: [idSubCategoria])
  ContasPagar    ContasPagar[]

  @@map("despesa")
}

// Boilerplate para geração automática no contas a pagar
model DespesaRecorrente {
  id             Int                 @id @default(autoincrement())
  publicId       String              @unique @map("public_id")
  descricao      String
  valor          Decimal             @default(0.0) @db.Decimal(12, 3)
  frequencia     FrequenciaEnum      @default(MENSAL)
  diaVencimento  Int                 @map("dia_vencimento")
  dataInicio     DateTime            @default(now()) @map("data_inicio")
  dataFim        DateTime?           @map("data_fim")
  subCategoriaId Int                 @map("sub_categoria_id")
  parceiroId     Int                 @map("parceiro_id")
  fornecedorId   Int?                @map("fornecedor_id")
  currencyId     Int?                @map("currency_id")
  cotacao        Decimal?            @default(0.0) @db.Decimal(12, 3)
  currency       Currency?           @relation(fields: [currencyId], references: [id])
  fornecedor     Fornecedor?         @relation(fields: [fornecedorId], references: [id])
  parceiro       Parceiro            @relation(fields: [parceiroId], references: [id])
  subCategoria   SubCategoriaDespesa @relation(fields: [subCategoriaId], references: [idSubCategoria])

  @@map("despesa_recorrente")
}

enum FrequenciaEnum {
  SEMANAL
  QUINZENAL
  MENSAL
  TRIMESTRAL
  SEMESTRAL
  ANUAL
}

model ContasPagar {
  id                  Int                   @id @default(autoincrement())
  publicId            String                @unique @map("public_id")
  despesaId           Int?                  @map("despesa_id")
  dataCriacao         DateTime              @default(now()) @map("data_criacao")
  dataPagamento       DateTime?             @map("data_pagamento")
  valorTotal          Decimal               @default(0.0) @map("valor_total") @db.Decimal(12, 3)
  // saldo É usado para controlar as parcelas pagas. É a soma dos valores
  // pagos da tabela ContasPagarParcelas
  saldo               Decimal               @default(0.0) @db.Decimal(12, 3)
  pago                Boolean               @default(false)
  despesa             Despesa?              @relation(fields: [despesaId], references: [id], onDelete: Cascade)
  ContasPagarParcelas ContasPagarParcelas[]

  @@map("contas_a_pagar")
}

// É usado para controlar as parcelas de contas a pagar
// Ex: Contas a pagar de um fornecedor, ou de uma despesa
model ContasPagarParcelas {
  id             Int         @id @default(autoincrement())
  publicId       String      @unique @map("public_id")
  dataPagamento  DateTime?   @map("data_pagamento")
  dataVencimento DateTime    @map("data_vencimento")
  valor          Decimal     @default(0.0) @db.Decimal(12, 3)
  pago           Boolean     @default(false)
  currencyId     Int?        @map("currency_id")
  currency       Currency?   @relation(fields: [currencyId], references: [id])
  contasPagarId  Int         @map("contas_pagar_id")
  contasPagar    ContasPagar @relation(fields: [contasPagarId], references: [id], onDelete: Cascade)

  @@map("contas_a_pagar_parcelas")
}

model RollupDespesasMensais {
  parceiro_id Int      @map("parceiro_id")
  ym          String   @map("ym")
  realized    Decimal  @default(0.0) @map("realized") @db.Decimal(12, 3)
  to_pay      Decimal  @default(0.0) @map("to_pay") @db.Decimal(12, 3)
  Parceiro    Parceiro @relation(fields: [parceiro_id], references: [id])

  @@id([parceiro_id, ym])
  @@map("rollup_despesas_mensais")
}

model RollupDespesasMensaisCategoria {
  parceiro_id      Int     @map("parceiro_id")
  categoria_id     Int     @map("categoria_id")
  sub_categoria_id Int     @map("sub_categoria_id")
  ym               String  @map("ym")
  realized         Decimal @default(0.0) @map("realized") @db.Decimal(12, 3)

  Parceiro     Parceiro            @relation(fields: [parceiro_id], references: [id])
  Categoria    CategoriaDespesas   @relation(fields: [categoria_id], references: [idCategoria])
  SubCategoria SubCategoriaDespesa @relation(fields: [sub_categoria_id], references: [idSubCategoria])

  @@id([parceiro_id, ym, categoria_id, sub_categoria_id])
  @@map("rollup_despesas_mensais_categoria")
}

// Categoria agrupam produtos para uma melhor pesquisa e estatística
model CategoriaProduto {
  id        Int       @id @default(autoincrement())
  descricao String
  Produto   Produto[]

  @@map("categoria_produto")
}

model Produto {
  id                    Int                     @id @default(autoincrement())
  publicId              String                  @unique @map("public_id")
  nome                  String
  dataCadastro          DateTime                @default(now()) @map("data_cadastro")
  ativo                 Boolean                 @default(true)
  consignado            Boolean                 @default(false)
  categoriaId           Int?                    @map("categoria_id")
  descricao             String?
  imgURL                String?                 @map("img_url")
  precoCompra           Decimal?                @default(0.0) @map("preco_compra") @db.Decimal(12, 3)
  currencyId            Int?                    @map("currency_id")
  precoVenda            Decimal                 @map("preco_venda") @db.Decimal(12, 3)
  parceiroId            Int                     @map("parceiro_id")
  fornecedorId          Int?                    @map("fornecedor_id")
  Parceiro              Parceiro                @relation(fields: [parceiroId], references: [id])
  fornecedor            Fornecedor?             @relation(fields: [fornecedorId], references: [id])
  categoria             CategoriaProduto?       @relation(fields: [categoriaId], references: [id])
  currency              Currency?               @relation(fields: [currencyId], references: [id])
  ProdutoSKU            ProdutoSKU[]
  ProdutoHistoricoPreco ProdutoHistoricoPreco[]

  @@map("produto")
}

model ProdutoSKU {
  id               Int                @id @default(autoincrement())
  publicId         String             @unique @map("public_id")
  produtoId        Int                @map("produto_id")
  cor              String?            @map("cor")
  codCor           String?            @map("cod_cor") // hexadecimal da cor para usar em sites apps e catalogos
  tamanho          String?            @map("tamanho")
  qtdMinima        Int                @default(0) @map("qtd_minima")
  dataUltimaCompra DateTime?          @map("data_ultima_compra")
  // ondelete cascade para quando um produto for deletado, os skus também sejam deletados
  produto          Produto            @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  EstoqueSKU       EstoqueSKU[]
  MovimentoEstoque MovimentoEstoque[]
  ConferenciaItem  ConferenciaItem[]
  PedidoCompraItem PedidoCompraItem[]
  VendaItem        VendaItem[]

  @@map("produto_sku")
}

model ProdutoHistoricoPreco {
  id        Int      @id @default(autoincrement())
  produtoId Int      @map("produto_id")
  preco     Decimal  @map("preco") @db.Decimal(12, 3)
  data      DateTime @default(now()) @map("data")
  Produto   Produto  @relation(fields: [produtoId], references: [id])

  @@map("produto_historico_preco")
}

model LocalEstoque {
  id         Int    @id @default(autoincrement())
  publicId   String @unique @map("public_id")
  parceiroId Int    @map("parceiro_id")
  nome       String @map("nome")
  descricao  String @map("descricao")
  endereco   String @map("endereco")

  Parceiro   Parceiro     @relation(fields: [parceiroId], references: [id])
  EstoqueSKU EstoqueSKU[]

  // Relações com MovimentoEstoque
  MovimentoEstoqueOrigem  MovimentoEstoque[] @relation("Movimento_Origem")
  MovimentoEstoqueDestino MovimentoEstoque[] @relation("Movimento_Destino")

  // Relações com TransferenciaEstoque
  TransferenciaEstoqueOrigem  TransferenciaEstoque[] @relation("Transferencia_Origem")
  TransferenciaEstoqueDestino TransferenciaEstoque[] @relation("Transferencia_Destino")
  ConferenciaEstoque          ConferenciaEstoque[]
  PedidoCompra                PedidoCompra[]
  Venda                       Venda[]

  @@index([parceiroId])
  @@map("local_estoque")
}

model EstoqueSKU {
  skuId   Int          @map("sku_id")
  localId Int          @map("local_id")
  qtd     Int          @default(0) @map("qtd")
  sku     ProdutoSKU   @relation(fields: [skuId], references: [id])
  local   LocalEstoque @relation(fields: [localId], references: [id])

  @@id([localId, skuId])
  @@map("estoque_sku")
}

enum TipoMovimento {
  ENTRADA
  SAIDA
  TRANSFERENCIA
  CONDICIONAL
  DEVOLUCAO
  AJUSTE
}

// TODO: Falta agregar o id do pedido de compra e venda
model MovimentoEstoque {
  id                       Int                        @id @default(autoincrement())
  skuId                    Int                        @map("sku_id")
  tipo                     TipoMovimento              @default(ENTRADA)
  qtd                      Int                        @default(1)
  idUsuario                Int                        @map("id_usuario")
  dataMovimento            DateTime                   @default(now()) @map("data_movimento")
  localOrigemId            Int?                       @map("local_origem_id")
  localDestinoId           Int?                       @map("local_destino_id")
  observacao               String?                    @map("observacao")
  Usuario                  Usuario?                   @relation(fields: [idUsuario], references: [id])
  sku                      ProdutoSKU                 @relation(fields: [skuId], references: [id])
  localOrigem              LocalEstoque?              @relation("Movimento_Origem", fields: [localOrigemId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  localDestino             LocalEstoque?              @relation("Movimento_Destino", fields: [localDestinoId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  TransferenciaEstoqueItem TransferenciaEstoqueItem[] @relation("Movimento_Estoque")
  PedidoCompra             PedidoCompra?              @relation(fields: [pedidoCompraId], references: [id])
  pedidoCompraId           Int?

  @@index([skuId])
  @@index([localOrigemId])
  @@index([localDestinoId])
  @@map("movimento_estoque")
}

model TransferenciaEstoque {
  id                   Int       @id @default(autoincrement())
  publicId             String    @unique @map("public_id")
  parceiroId           Int       @map("parceiro_id")
  localOrigemId        Int       @map("local_origem_id")
  localDestinoId       Int       @map("local_destino_id")
  enviadoPorUsuarioId  Int       @map("enviado_por_usuario_id")
  recebidoPorUsuarioId Int?      @map("recebido_por_usuario_id")
  qtd                  Int       @default(1) // quantidade de itens
  valorTotal           Decimal   @default(0.0) @map("valor_total") @db.Decimal(12, 3)
  dataTransferencia    DateTime  @default(now()) @map("data_transferencia")
  dataRecebimento      DateTime? @map("data_recebimento")

  // Relações com Usuario
  enviadoPorUsuario  Usuario  @relation("UsuarioEnviou", fields: [enviadoPorUsuarioId], references: [id])
  recebidoPorUsuario Usuario? @relation("UsuarioRecebeu", fields: [recebidoPorUsuarioId], references: [id])

  // Relações com LocalEstoque
  localOrigem              LocalEstoque               @relation("Transferencia_Origem", fields: [localOrigemId], references: [id])
  localDestino             LocalEstoque               @relation("Transferencia_Destino", fields: [localDestinoId], references: [id])
  TransferenciaEstoqueItem TransferenciaEstoqueItem[] @relation("Transferencia_Estoque")
  // Relação com Parceiro
  Parceiro                 Parceiro                   @relation(fields: [parceiroId], references: [id])

  @@index([localOrigemId])
  @@index([localDestinoId])
  @@index([enviadoPorUsuarioId])
  @@index([recebidoPorUsuarioId])
  @@map("transferencia_estoque")
}

model TransferenciaEstoqueItem {
  id                 Int @id @default(autoincrement())
  transferenciaId    Int @map("transferencia_id")
  movimentoEstoqueId Int @map("movimento_estoque_id")

  TransferenciaEstoque TransferenciaEstoque @relation("Transferencia_Estoque", fields: [transferenciaId], references: [id])
  MovimentoEstoque     MovimentoEstoque     @relation("Movimento_Estoque", fields: [movimentoEstoqueId], references: [id])

  @@index([transferenciaId])
  @@map("transferencia_estoque_item")
}

model ConferenciaEstoque {
  id                 Int               @id @default(autoincrement())
  publicId           String            @unique @map("public_id")
  parceiroId         Int               @map("parceiro_id")
  localEstoqueId     Int               @map("local_estoque_id")
  dataInicio         DateTime          @default(now()) @map("data_inicio")
  dataFim            DateTime?         @map("data_fim")
  usuarioResponsavel Int               @map("usuario_responsavel_id")
  status             String            @default("PENDENTE") @map("status")
  Parceiro           Parceiro          @relation(fields: [parceiroId], references: [id])
  Usuario            Usuario           @relation(fields: [usuarioResponsavel], references: [id])
  LocalEstoque       LocalEstoque      @relation(fields: [localEstoqueId], references: [id])
  ConferenciaItem    ConferenciaItem[]

  @@map("conferencia_estoque")
}

model ConferenciaItem {
  id             Int     @id @default(autoincrement())
  conferenciaId  Int     @map("conferencia_id")
  skuId          Int     @map("sku_id")
  qtdSistema     Int     @default(0) @map("qtd_sistema")
  qtdConferencia Int     @default(0) @map("qtd_conferencia")
  diferenca      Int     @default(0) @map("diferenca")
  ajustado       Boolean @default(false) @map("ajustado")

  //skuId precisa ser relacionado com EstoqueSKU
  ProdutoSKU         ProdutoSKU         @relation(fields: [skuId], references: [id])
  ConferenciaEstoque ConferenciaEstoque @relation(fields: [conferenciaId], references: [id], onDelete: Cascade)

  @@map("conferencia_item")
}

model FormaPagamento {
  idFormaPag        Int            @id @default(autoincrement())
  parceiroId        Int            @map("parceiro_id")
  nome              String
  taxa              Decimal?       @default(0) @db.Decimal(12, 3)
  tempoLiberacao    Int            @default(0) @map("tempo_liberacao") // tempo em dias que o dinheiro irá ser liberado na conta bancaria
  impostoPosCalculo Boolean        @default(false) @map("imposto_pos_calculo")
  ativo             Boolean        @default(true) @map("ativo")
  Parceiro          Parceiro       @relation(fields: [parceiroId], references: [id])
  Pagamento         Pagamento[]
  Parcelamento      Parcelamento[]

  @@map("forma_pagamento")
}

model PedidoCompra {
  id               Int                @id @default(autoincrement())
  publicId         String             @unique @map("public_id")
  parceiroId       Int                @map("parceiro_id")
  localEntradaId   Int                @map("local_entrada_id") // estoque de entrada quando chegar
  fornecedorId     Int                @map("fornecedor_id")
  dataPedido       DateTime           @default(now()) @map("data_pedido")
  dataEntrega      DateTime?          @map("data_entrega")
  valorFrete       Decimal?           @default(0) @map("valor_frete") @db.Decimal(12, 3)
  valorTotal       Decimal?           @default(0) @map("valor_total") @db.Decimal(12, 3)
  observacao       String?            @map("observacao")
  valorComissao    Decimal?           @default(0) @map("valor_comissao") @db.Decimal(12, 3)
  cotacao          Float?             @default(1) @map("cotacao")
  currencyId       Int?               @map("currency_id")
  consignado       Boolean            @default(false) @map("consignado")
  status           Int                @default(1) @map("status") // diferentes status a ser implementado
  fornecedor       Fornecedor         @relation(fields: [fornecedorId], references: [id])
  currency         Currency?          @relation(fields: [currencyId], references: [id])
  Parceiro         Parceiro           @relation(fields: [parceiroId], references: [id])
  LocalEntrada     LocalEstoque       @relation(fields: [localEntradaId], references: [id])
  MovimentoEstoque MovimentoEstoque[]
  PedidoCompraItem PedidoCompraItem[]

  @@map("pedido_compra")
}

model PedidoCompraItem {
  id             Int          @id @default(autoincrement())
  pedidoCompraId Int          @map("pedido_compra_id")
  skuId          Int          @map("sku_id")
  qtd            Int          @map("qtd")
  precoCompra    Decimal      @map("preco_compra") @db.Decimal(12, 3)
  observacao     String?      @map("observacao")
  pedidoCompra   PedidoCompra @relation(fields: [pedidoCompraId], references: [id], onDelete: Cascade)
  ProdutoSKU     ProdutoSKU   @relation(fields: [skuId], references: [id])

  @@map("pedido_compra_item")
}

enum VendaTipo {
  DIRETA
  CONDICIONAL
  BRINDE
}

enum VendaStatus {
  PEDIDO // quando é só um orçamento/intenção
  ABERTA // usada em condicional
  CONFIRMADA
  CONFIRMADA_PARCIAL
  CONFIRMADA_TOTAL
  CANCELADA
}

enum VendaItemTipo {
  NORMAL
  BRINDE
}

enum TipoVenda {
  A_VISTA_IMEDIATA
  A_PRAZO_SEM_PARCELAS
  PARCELADO
  PARCELADO_FLEXIVEL // O cliente vai pagando quando possivel
}

model Pagamento {
  id               Int            @id @default(autoincrement())
  vendaId          Int            @map("venda_id")
  formaPagamentoId Int            @map("forma_pagamento_id") // transferencia, pik, dinheiro etc
  tipo             TipoVenda      @map("tipo") // parcelado, a vista etc
  valor            Decimal        @map("valor")
  valorDelivery    Decimal?       @map("valor_delivery") @db.Decimal(12, 3) // valor do delivery caso seja pago separado. Gera despesa.
  entrada          Boolean        @default(false) // se é entrada
  Venda            Venda          @relation(fields: [vendaId], references: [id])
  Parcelamento     Parcelamento[]
  FormaPagamento   FormaPagamento @relation(fields: [formaPagamentoId], references: [idFormaPag])

  @@map("pagamento")
}

model Parcelamento {
  id             Int            @id @default(autoincrement())
  idPagamento    Int            @map("id_pagamento") // um pagamento pode ter vários parcelamentos
  clienteId      Int            @map("cliente_id")
  valorTotal     Float          @map("valor_total")
  valorPago      Float          @map("valor_pago")
  idFormaPag     Int            @map("id_forma_pag")
  situacao       Int            @default(1) // 1 - Aberto, 2 - Concluido 
  cliente        Cliente        @relation(fields: [clienteId], references: [id])
  parcelas       Parcelas[]
  Pagamento      Pagamento      @relation(fields: [idPagamento], references: [id])
  FormaPagamento FormaPagamento @relation(fields: [idFormaPag], references: [idFormaPag])

  @@map("parcelamento")
}

// situação parcela
enum ParcelaStatus {
  PENDENTE
  PAGO
  PAGO_ATRASADO
}

model Parcelas {
  id             Int           @id @default(autoincrement())
  parcelamentoId Int           @map("parcelamento_id")
  numero         Int           @map("numero")
  valor          Decimal       @map("valor")
  vencimento     DateTime?     @map("vencimento") // se for nulo, é parcelado flexivel
  recebidoEm     DateTime?     @map("recebido_em")
  status         ParcelaStatus @default(PENDENTE) @map("status")
  Parcelamento   Parcelamento? @relation(fields: [parcelamentoId], references: [id])

  @@map("parcelas")
}

model Venda {
  id            Int          @id @default(autoincrement())
  publicId      String       @unique @map("public_id")
  usuarioId     Int          @map("usuario_id")
  parceiroId    Int          @map("parceiro_id")
  localSaidaId  Int          @map("local_saida_id") // estoque de saida quando sair
  clienteId     Int          @map("cliente_id")
  tipo          VendaTipo    @default(DIRETA) @map("tipo")
  status        VendaStatus  @default(PEDIDO) @map("status")
  dataVenda     DateTime     @default(now()) @map("data_venda")
  dataEntrega   DateTime?    @map("data_entrega")
  valorFrete    Decimal?     @default(0) @map("valor_frete") @db.Decimal(12, 3)
  valorTotal    Decimal?     @default(0) @map("valor_total") @db.Decimal(12, 3)
  desconto      Decimal?     @default(0) @map("desconto") @db.Decimal(12, 3) // desconto da venda
  ruccnpj       String?      @map("ruccnpj")
  numeroFatura  String?      @map("numero_fatura") // pode não ser o mesmo do cliente
  observacao    String?      @map("observacao")
  valorComissao Decimal?     @default(0) @map("valor_comissao") @db.Decimal(12, 3)
  Cliente       Cliente      @relation(fields: [clienteId], references: [id])
  VendaItem     VendaItem[]
  Pagamento     Pagamento[] // uma venda pode ter vários pagamentos
  Usuario       Usuario      @relation(fields: [usuarioId], references: [id])
  Parceiro      Parceiro     @relation(fields: [parceiroId], references: [id])
  LocalSaida    LocalEstoque @relation(fields: [localSaidaId], references: [id])

  @@map("venda")
}

model VendaItem {
  id           Int           @id @default(autoincrement())
  vendaId      Int           @map("venda_id")
  skuId        Int           @map("sku_id")
  tipo         VendaItemTipo @default(NORMAL) @map("tipo")
  qtdReservada Int           @map("qtd_reservada")
  qtdAceita    Int           @default(0) @map("qtd_aceita") // cliente ficou
  qtdDevolvida Int           @default(0) @map("qtd_devolvida") // cliente devolveu
  desconto     Decimal?      @default(0) @map("desconto") @db.Decimal(12, 3) // desconto do item
  precoUnit    Decimal       @map("preco_unit") @db.Decimal(12, 3)
  observacao   String?       @map("observacao")
  Venda        Venda         @relation(fields: [vendaId], references: [id], onDelete: Cascade)
  ProdutoSKU   ProdutoSKU    @relation(fields: [skuId], references: [id])

  @@map("venda_item")
}
